*------------------------------------------------------------*
User:                Lukas Fahr
Date:                28. April 2016
Time:                11.02 Uhr
Site:                70107571
Platform:            X64_7PRO
Maintenance Release: 9.03.01M2P081512
EM Version:          12.1
* 
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.01 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Training Log
Date:                28. April 2016
Time:                11.01 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O3O8Q8GY
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O3O8Q8GY new;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOG
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMLOG.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.01 Uhr" );
MPRINT(EM_DIAGRAM):   file _LOG;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "Site:                70107571";
MPRINT(EM_DIAGRAM):   put "Platform:            X64_7PRO";
MPRINT(EM_DIAGRAM):   put "Maintenance Release: 9.03.01M2P081512";
MPRINT(EM_DIAGRAM):   put "EM Version:          12.1";
MPRINT(EM_DIAGRAM):   put "* ";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMTRAIN.log" encoding="UTF-8" NOBOM;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _LOG MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_LOGIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMSCORE.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   file _LOG mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _LOGIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMREPORT.log" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _LOGIN;
MPRINT(EM_DIAGRAM):    filename _LOG;
MPRINT(EM_DIAGRAM):    filename _OUT
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMOUTPUT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.01 Uhr" );
MPRINT(EM_DIAGRAM):   file _OUT;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "User:                Lukas Fahr";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Training Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMTRAIN.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   ;
MPRINT(EM_COPYFILE):   data _null_;
MPRINT(EM_COPYFILE):   length line $20000;
MPRINT(EM_COPYFILE):   file _OUT MOD lrecl=20000;
MPRINT(EM_COPYFILE):   fid=fopen("_OUTIN",'i',20000,'v');
MPRINT(EM_COPYFILE):   if fid > 0 then do;
MPRINT(EM_COPYFILE):   do while(^fread(fid));
MPRINT(EM_COPYFILE):   rlen = frlen(fid);
MPRINT(EM_COPYFILE):   rc= fget(fid,line,20000);
MPRINT(EM_COPYFILE):   start = length(line)-length(left(line))+1;
MPRINT(EM_COPYFILE):   line=strip(line);
MPRINT(EM_COPYFILE):   put @start line;
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   if fid > 0 then rc=fclose(fid);
MPRINT(EM_COPYFILE):   end;
MPRINT(EM_COPYFILE):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   file _OUT mod;
MPRINT(EM_DIAGRAM):   put _page_;
MPRINT(EM_DIAGRAM):   put // "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Output";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    filename _OUTIN
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   filename _OUTIN;
MPRINT(EM_DIAGRAM):    filename _OUT;
MPRINT(EM_DIAGRAM):    filename _emtool_
'C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMRUNSTATUS.xml' encoding="UTF-8" NOBOM;
3082266    proc freq data=EMWS8.Rule4_VariableSet noprint;
MPRINT(EM_DIAGRAM):    proc freq data=EMWS8.Rule4_VariableSet noprint;
3082267    table ROLE*LEVEL/out=WORK.Rule4META;
MPRINT(EM_DIAGRAM):   table ROLE*LEVEL/out=WORK.Rule4META;
3082268    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.RULE4_VARIABLESET.
NOTE: The data set WORK.RULE4META has 5 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3082269    proc print data=WORK.Rule4META label noobs;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Rule4META label noobs;
3082270    var ROLE LEVEL COUNT;
MPRINT(EM_DIAGRAM):   var ROLE LEVEL COUNT;
3082271    label ROLE = "%sysfunc(sasmsg(sashelp.dmine, meta_role_vlabel, NOQUOTE))" LEVEL =
3082271  ! "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" COUNT =
3082271  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label ROLE = "Role" LEVEL = "Measurement Level" COUNT = "Frequency
Count";
3082272    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3082273    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_varSummary_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Variable Summary";
MPRINT(EM_DIAGRAM):   run;
3082274    run;
 
NOTE: There were 5 observations read from the data set WORK.RULE4META.
NOTE: The PROCEDURE PRINT printed page 2785.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082275    title10;
MPRINT(EM_DIAGRAM):   title10;
3082276    %let EMNORLEN = %DMNORLEN;
MPRINT(EM_DIAGRAM):
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN EMWS8 Meta3_TRAIN
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN
EMWS8.Meta3_TRAIN EMWS8.Meta3_TRAIN EMWS8 Meta3_TRAIN
MPRINT(EM_DIAGRAM):    proc dmdb data=EMWS8.Meta3_TRAIN
classout=WORK._DMDBCLASSTARGET(keep=NAME NRAW CRAW LEVEL FREQUENCY NMISSPERCENT);
MPRINT(EM_DIAGRAM):   class DepVar(DESC) ;
MPRINT(EM_DIAGRAM):   run;
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _INIT >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL setMetaData >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL next >>
Executing  SASHELP.EMCORE.EMINFOITERATOR.SCL _term >>
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set WORK._DMDBCLASSTARGET;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   if _N_=1 then call symput('_newevent', strip(LEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK._DMDBCLASSTARGET out=_TEMPCLASS(keep=LEVEL FREQUENCY
NMISSPERCENT rename=(LEVEL=DepVar));
MPRINT(EM_DIAGRAM):   by LEVEL;
MPRINT(EM_DIAGRAM):   where ^(NRAW eq . and CRAW eq '') and NAME="DepVar";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _TEMPCLASS;
MPRINT(EM_DIAGRAM):   set _TEMPCLASS;
MPRINT(EM_DIAGRAM):   NMISSPERCENT= NMISSPERCENT/100;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _sortedDecData;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_sortedDecdata;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   merge _TEMPCLASS(in=_a) _sortedDecdata(in=_b);
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   if (_a and ^_b) or (^_a and _b) then call symput('_emresetDec', '1');
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule4_DepVar_DD;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_DepVar_DD;
MPRINT(EM_DIAGRAM):   _levelorder_=_N_;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Rule4_DepVar_DD;
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_DepVar_DD;
MPRINT(EM_DIAGRAM):   merge EMWS8.Rule4_DepVar_DD _TEMPCLASS(rename=(NMISSPERCENT=TRAINPRIOR
FREQUENCY=COUNT));
MPRINT(EM_DIAGRAM):   by DepVar;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Rule4_DepVar_DD
out=EMWS8.Rule4_DepVar_DD(drop=_levelorder_);
MPRINT(EM_DIAGRAM):   by _levelorder_;
MPRINT(EM_DIAGRAM):   run;
3082323    data WORK.Rule4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
MPRINT(EM_DIAGRAM):    data WORK.Rule4_EVENT(KEEP=VARIABLE LABEL LEVEL EVENT NUMLEVELS ORDER);
3082324    length ORDER $20;
MPRINT(EM_DIAGRAM):   length ORDER $20;
3082325    label VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel,  NOQUOTE))"
3082325  ! EVENT = "%sysfunc(sasmsg(sashelp.dmine, assmt_event_vlabel, NOQUOTE))" NUMLEVELS =
3082325  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_numcat_vlabel, NOQUOTE))" LEVEL =
3082326       "%sysfunc(sasmsg(sashelp.dmine, meta_level_vlabel, NOQUOTE))" ORDER =
3082326  ! "%sysfunc(sasmsg(sashelp.dmine, meta_order_vlabel, NOQUOTE))" LABEL =
3082326  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label VARIABLE = "Target" EVENT = "Event" NUMLEVELS = "Number of Levels"
LEVEL = "Measurement Level" ORDER = "Order" LABEL = "Label";
3082327    set EMWS8.RULE4_DEPVAR_DM( where=(_TYPE_="TARGET"));
MPRINT(EM_DIAGRAM):   set EMWS8.RULE4_DEPVAR_DM( where=(_TYPE_="TARGET"));
3082328    NumLevels=2;
MPRINT(EM_DIAGRAM):   NumLevels=2;
3082329    select(upcase(ORDER));
MPRINT(EM_DIAGRAM):   select(upcase(ORDER));
3082330    when('DESC') ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   when('DESC') ORDER = 'Descending';
3082331    when('ASC') ORDER = 'Ascending';
MPRINT(EM_DIAGRAM):   when('ASC') ORDER = 'Ascending';
3082332    when('FMTDESC') ORDER = 'Formatted Descending';
MPRINT(EM_DIAGRAM):   when('FMTDESC') ORDER = 'Formatted Descending';
3082333    when('FMTASC') ORDER = 'Formatted Ascending';
MPRINT(EM_DIAGRAM):   when('FMTASC') ORDER = 'Formatted Ascending';
3082334    otherwise ORDER = 'Descending';
MPRINT(EM_DIAGRAM):   otherwise ORDER = 'Descending';
3082335    end;
MPRINT(EM_DIAGRAM):   end;
3082336    output;
MPRINT(EM_DIAGRAM):   output;
3082337    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.RULE4_DEPVAR_DM.
      WHERE _TYPE_='TARGET';
NOTE: The data set WORK.RULE4_EVENT has 1 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082338    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3082339    proc print data=WORK.Rule4_EVENT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=WORK.Rule4_EVENT noobs label;
3082340    var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
MPRINT(EM_DIAGRAM):   var VARIABLE EVENT LEVEL NUMLEVELS ORDER LABEL;
3082341    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3082342    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_modelEvent_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Model Events";
MPRINT(EM_DIAGRAM):   run;
3082343    run;
 
NOTE: There were 1 observations read from the data set WORK.RULE4_EVENT.
NOTE: The PROCEDURE PRINT printed page 2786.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082344    title10;
MPRINT(EM_DIAGRAM):   title10;
"No decisions defined for target "DepVar"."
3082345    proc print data = EMWS8.Rule4_DepVar_DM noobs label;
MPRINT(EM_DIAGRAM):    proc print data = EMWS8.Rule4_DepVar_DM noobs label;
3082346    var _type_ variable label;
MPRINT(EM_DIAGRAM):   var _type_ variable label;
3082347    where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR', 'DECPRIOR');
MPRINT(EM_DIAGRAM):   where _type_ ^in('MATRIX', 'DECISION', 'TRAINPRIOR', 'DATAPRIOR',
'DECPRIOR');
3082348    label _TYPE_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_type_vlabel,     NOQUOTE))"
3082348  ! VARIABLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_variable_vlabel, NOQUOTE))" LABEL =
3082348  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Type" VARIABLE = "Variable" LABEL = "Label";
3082349    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3082350    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_predDecVars_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Predicted and decision variables";
MPRINT(EM_DIAGRAM):   run;
3082351    run;
 
NOTE: There were 7 observations read from the data set EMWS8.RULE4_DEPVAR_DM.
      WHERE _type_ not in ('DATAPRIOR', 'DECISION', 'DECPRIOR', 'MATRIX', 'TRAINPRIOR');
NOTE: The PROCEDURE PRINT printed page 2787.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082352    title10;
MPRINT(EM_DIAGRAM):   title10;
3082353    data WORK.M2QD0RVS;
MPRINT(EM_DIAGRAM):    data WORK.M2QD0RVS;
3082354    set WORK.M2QD0RVS;
MPRINT(EM_DIAGRAM):   set WORK.M2QD0RVS;
3082355    where(use = 'Y' or (role = 'INPUT' and use = 'D'));
MPRINT(EM_DIAGRAM):   where(use = 'Y' or (role = 'INPUT' and use = 'D'));
3082356    if (role='REJECTED') then role='INPUT';
MPRINT(EM_DIAGRAM):   if (role='REJECTED') then role='INPUT';
3082357    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK.M2QD0RVS.
      WHERE (use='Y') or ((role='INPUT') and (use='D'));
NOTE: The data set WORK.M2QD0RVS has 26 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082358    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
3082359    * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
3082360    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082361    %macro DMDBClass;
3082362        AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
3082363       AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC)
3082364       HigherEducationBinary(ASC) Marital_Status(ASC)
3082365    %mend DMDBClass;
3082366    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082367    * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
3082368    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082369    %macro DMDBVar;
3082370        AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits MntGoldProds
3082371       MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
3082372       RMntFrq Recency Teenhome
3082373    %mend DMDBVar;
3082374    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082375    * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
3082376    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082377    proc dmdb batch data=EMWS8.Meta3_TRAIN
3082378    dmdbcat=WORK.EM_DMDB
3082379    maxlevel = 513
3082380    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.Meta3_TRAIN dmdbcat=WORK.EM_DMDB maxlevel =
513 ;
3082381    class %DMDBClass;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC) HigherEducationBinary(ASC)
Marital_Status(ASC)
MPRINT(EM_DIAGRAM):  ;
3082382    var %DMDBVar;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits
MntGoldProds MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
3082383    target
3082384    DepVar
3082385    ;
MPRINT(EM_DIAGRAM):   target DepVar ;
3082386    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
3082387    quit;
3082388    *--- end code ---*;
 
3082389    data WORK.M2QD0RVS;
MPRINT(EM_DIAGRAM):    data WORK.M2QD0RVS;
3082390    set WORK.M2QD0RVS end=eof;
MPRINT(EM_DIAGRAM):   set WORK.M2QD0RVS end=eof;
3082391    output;
MPRINT(EM_DIAGRAM):   output;
3082392    if eof then do;
MPRINT(EM_DIAGRAM):   if eof then do;
3082393    NAME="";
MPRINT(EM_DIAGRAM):   NAME="";
3082394    ROLE="COST";
MPRINT(EM_DIAGRAM):   ROLE="COST";
3082395    LEVEL="INTERVAL";
MPRINT(EM_DIAGRAM):   LEVEL="INTERVAL";
3082396    TYPE="N";
MPRINT(EM_DIAGRAM):   TYPE="N";
3082397    output;
MPRINT(EM_DIAGRAM):   output;
3082398    end;
MPRINT(EM_DIAGRAM):   end;
3082399    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK.M2QD0RVS.
NOTE: The data set WORK.M2QD0RVS has 27 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
NOTE: There were 2 observations read from the data set EMWS8.RULE4_DEPVAR_DD.
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
3082400    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3082401    * Rule4: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Rule4: Create decision matrix;
3082402    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082403    data WORK.DepVar;
MPRINT(EM_DIAGRAM):   data WORK.DepVar;
3082404      length   DepVar                           $  32
3082405               COUNT                                8
3082406               DATAPRIOR                            8
3082407               TRAINPRIOR                           8
3082408               DECPRIOR                             8
3082409               DECISION1                            8
3082410               DECISION2                            8
3082411               ;
MPRINT(EM_DIAGRAM):   length DepVar $ 32 COUNT 8 DATAPRIOR 8 TRAINPRIOR 8 DECPRIOR 8 DECISION1
8 DECISION2 8 ;
3082412
3082413      label    COUNT="Level Counts"
3082414               DATAPRIOR="Data Proportions"
3082415               TRAINPRIOR="Training Proportions"
3082416               DECPRIOR="Decision Priors"
3082417               DECISION1="1"
3082418               DECISION2="0"
3082419               ;
MPRINT(EM_DIAGRAM):   label COUNT= "Level Counts" DATAPRIOR= "Data Proportions" TRAINPRIOR=
"Training Proportions" DECPRIOR= "Decision Priors" DECISION1= "1" DECISION2= "0" ;
3082420      format   COUNT 10.
3082421               ;
MPRINT(EM_DIAGRAM):   format COUNT 10. ;
3082422    DepVar="1"; COUNT=359; DATAPRIOR=0.151221567; TRAINPRIOR=0.15122156697556;
3082422  ! DECPRIOR=.; DECISION1=1; DECISION2=0;
MPRINT(EM_DIAGRAM):   DepVar="1";
MPRINT(EM_DIAGRAM):   COUNT=359;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.151221567;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.15122156697556;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=1;
MPRINT(EM_DIAGRAM):   DECISION2=0;
3082423    output;
MPRINT(EM_DIAGRAM):   output;
3082424    DepVar="0"; COUNT=2015; DATAPRIOR=0.848778433; TRAINPRIOR=0.84877843302443;
3082424  ! DECPRIOR=.; DECISION1=0; DECISION2=1;
MPRINT(EM_DIAGRAM):   DepVar="0";
MPRINT(EM_DIAGRAM):   COUNT=2015;
MPRINT(EM_DIAGRAM):   DATAPRIOR=0.848778433;
MPRINT(EM_DIAGRAM):   TRAINPRIOR=0.84877843302443;
MPRINT(EM_DIAGRAM):   DECPRIOR=.;
MPRINT(EM_DIAGRAM):   DECISION1=0;
MPRINT(EM_DIAGRAM):   DECISION2=1;
3082425    output;
MPRINT(EM_DIAGRAM):   output;
3082426    ;
MPRINT(EM_DIAGRAM):   ;
3082427    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.DEPVAR has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082428    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3082429    modify DepVar(type=PROFIT label=DepVar);
MPRINT(EM_DIAGRAM):   modify DepVar(type=PROFIT label= DepVar);
MPRINT(EM_DIAGRAM):   label DECISION1= '1';
MPRINT(EM_DIAGRAM):   label DECISION2= '0';
MPRINT(EM_DIAGRAM):   run;
3082430    label DECISION1= '1';
3082431    label DECISION2= '0';
3082432    run;
 
NOTE: MODIFY was successful for WORK.DEPVAR.DATA.
3082433    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Rule4: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082434    *------------------------------------------------------------* ;
3082435    * Rule4: DMDBClass Macro ;
3082436    *------------------------------------------------------------* ;
3082437    %macro DMDBClass;
3082438        AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
3082439       AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC)
3082440       HigherEducationBinary(ASC) Marital_Status(ASC)
3082441    %mend DMDBClass;
3082442    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082443    * Rule4: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: DMDBVar Macro ;
3082444    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082445    %macro DMDBVar;
3082446        AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits MntGoldProds
3082447       MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
3082448       RMntFrq Recency Teenhome
3082449    %mend DMDBVar;
3082450    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082451    * Rule4: Create DMDB;
MPRINT(EM_DIAGRAM):   * Rule4: Create DMDB;
3082452    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082453    proc dmdb batch data=EMWS8.Meta3_TRAIN
3082454    dmdbcat=WORK.Rule4_DMDB
3082455    maxlevel = 513
3082456    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.Meta3_TRAIN dmdbcat=WORK.Rule4_DMDB maxlevel
= 513 ;
3082457    class %DMDBClass;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC) HigherEducationBinary(ASC)
Marital_Status(ASC)
MPRINT(EM_DIAGRAM):  ;
3082458    var %DMDBVar;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits
MntGoldProds MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
3082459    target
3082460    DepVar
3082461    ;
MPRINT(EM_DIAGRAM):   target DepVar ;
3082462    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
3082463    quit;
3082464    *--- end code ---*;
 
3082465    data WORK.M0FPGNPK;
MPRINT(EM_DIAGRAM):    data WORK.M0FPGNPK;
3082466    set WORK.M0FPGNPK;
MPRINT(EM_DIAGRAM):   set WORK.M0FPGNPK;
3082467    if NAME^='DepVar' then delete;
MPRINT(EM_DIAGRAM):   if NAME^='DepVar' then delete;
3082468    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.M0FPGNPK.
NOTE: The data set WORK.M0FPGNPK has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082469    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
3082470    * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
3082471    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082472    %macro DMDBClass;
3082473        DepVar(DESC)
3082474    %mend DMDBClass;
3082475    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082476    * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
3082477    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082478    %macro DMDBVar;
3082479
3082480    %mend DMDBVar;
3082481    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082482    * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
3082483    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082484    proc dmdb batch data=EMWS8.Meta3_TRAIN
3082485    dmdbcat=WORK.EM_DMDB
3082486    maxlevel = 513
3082487    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.Meta3_TRAIN dmdbcat=WORK.EM_DMDB maxlevel =
513 ;
3082488    class %DMDBClass;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   DepVar(DESC)
MPRINT(EM_DIAGRAM):  ;
3082489    target
3082490    DepVar
3082491    ;
MPRINT(EM_DIAGRAM):   target DepVar ;
3082492    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
3082493    quit;
3082494    *--- end code ---*;
 
3082495    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3082496    * Rule Induction Training;
MPRINT(EM_DIAGRAM):   * Rule Induction Training;
3082497    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
3082498    * Get counts for DepVar;
MPRINT(EM_DIAGRAM):    * Get counts for DepVar;
3082499    ;
MPRINT(EM_DIAGRAM):   ;
3082500    data _scr(keep= _level_ DepVar);
MPRINT(EM_DIAGRAM):   data _scr(keep= _level_ DepVar);
3082501    set EMWS8.Meta3_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_TRAIN;
3082502    length _level_ $16;
MPRINT(EM_DIAGRAM):   length _level_ $16;
3082503    label _level_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_rulelevel_vlabel, NOQUOTE,
3082503  ! DepVar))";
MPRINT(EM_DIAGRAM):   label _level_ = "DepVar";
3082504    _tmp=putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp=putn(DepVar, 'best.');
3082505    %DMNORMCP(_tmp, _level_);
MPRINT(DMNORMCP):   _level_=dmnorm(_tmp,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3082506    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: The data set WORK._SCR has 2374 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
3082507    proc freq data=_scr noprint;
MPRINT(EM_DIAGRAM):   proc freq data=_scr noprint;
3082508    table _level_ / out=_count;
MPRINT(EM_DIAGRAM):   table _level_ / out=_count;
3082509    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set WORK._SCR.
NOTE: The data set WORK._COUNT has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082510    * Get Normalized counts for DepVar;
MPRINT(EM_DIAGRAM):    * Get Normalized counts for DepVar;
3082511    ;
MPRINT(EM_DIAGRAM):   ;
3082512    data _scr(keep= _level_ DepVar);
MPRINT(EM_DIAGRAM):   data _scr(keep= _level_ DepVar);
3082513    set EMWS8.Meta3_VALIDATE;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_VALIDATE;
3082514    length _level_ $16;
MPRINT(EM_DIAGRAM):   length _level_ $16;
3082515    label _level_ = "%sysfunc(sasmsg(sashelp.dmine, rpt_rulelevel_vlabel, NOQUOTE,
3082515  ! DepVar))";
MPRINT(EM_DIAGRAM):   label _level_ = "DepVar";
3082516    _tmp = putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp = putn(DepVar, 'best.');
3082517    %DMNORMCP(_tmp, _level_);
MPRINT(DMNORMCP):   _level_=dmnorm(_tmp,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3082518    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: View EMWS8.META3_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.META3_VALIDATE.
NOTE: The data set WORK._SCR has 1018 observations and 2 variables.
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
 
3082519    proc freq data=_scr noprint;
MPRINT(EM_DIAGRAM):   proc freq data=_scr noprint;
3082520    table _level_ / out= _vcount;
MPRINT(EM_DIAGRAM):   table _level_ / out= _vcount;
3082521    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set WORK._SCR.
NOTE: The data set WORK._VCOUNT has 2 observations and 3 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082522    data _vcount;
MPRINT(EM_DIAGRAM):    data _vcount;
3082523    set _vcount;
MPRINT(EM_DIAGRAM):   set _vcount;
3082524    label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_validcount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Valid Count";
3082525    label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_validpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Valid Percent";
3082526    rename count = vcount;
MPRINT(EM_DIAGRAM):   rename count = vcount;
3082527    rename percent = vpercent;
MPRINT(EM_DIAGRAM):   rename percent = vpercent;
3082528    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 2 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082529    data _count;
MPRINT(EM_DIAGRAM):   data _count;
3082530    merge _count _vcount;
MPRINT(EM_DIAGRAM):   merge _count _vcount;
3082531    by _level_;
MPRINT(EM_DIAGRAM):   by _level_;
3082532    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: There were 2 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._COUNT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082533    data _count;
MPRINT(EM_DIAGRAM):    data _count;
3082534    set _count;
MPRINT(EM_DIAGRAM):   set _count;
3082535    label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_traincount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Train Count";
3082536    label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Train Percent";
3082537    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082538    proc sort data=_count;
MPRINT(EM_DIAGRAM):   proc sort data=_count;
3082539    by DESCENDING count;
MPRINT(EM_DIAGRAM):   by DESCENDING count;
3082540    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
3082541    *;
3082542    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_tarfreq_title, NOQUOTE, DepVar))";
MPRINT(EM_DIAGRAM):   title9 "Target=DepVar: Frequencies";
MPRINT(EM_DIAGRAM):   *;
3082543    *;
3082544    proc print data=_count noobs label;
MPRINT(EM_DIAGRAM):   proc print data=_count noobs label;
3082545    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The PROCEDURE PRINT printed page 2788.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082546    title9;
MPRINT(EM_DIAGRAM):   title9;
3082547    data WORK.M1RYA2X2;
MPRINT(EM_DIAGRAM):    data WORK.M1RYA2X2;
3082548    set WORK.M1RYA2X2;
MPRINT(EM_DIAGRAM):   set WORK.M1RYA2X2;
3082549    if NAME^='DepVar' then delete;
MPRINT(EM_DIAGRAM):   if NAME^='DepVar' then delete;
3082550    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.M1RYA2X2.
NOTE: The data set WORK.M1RYA2X2 has 1 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082551    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
3082552    * EM: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBClass Macro ;
3082553    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082554    %macro DMDBClass;
3082555        DepVar(DESC)
3082556    %mend DMDBClass;
3082557    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082558    * EM: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * EM: DMDBVar Macro ;
3082559    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082560    %macro DMDBVar;
3082561
3082562    %mend DMDBVar;
3082563    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082564    * EM: Create DMDB;
MPRINT(EM_DIAGRAM):   * EM: Create DMDB;
3082565    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082566    proc dmdb batch data=EMWS8.Meta3_TRAIN
3082567    dmdbcat=WORK.EM_DMDB
3082568    maxlevel = 513
3082569    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=EMWS8.Meta3_TRAIN dmdbcat=WORK.EM_DMDB maxlevel =
513 ;
3082570    class %DMDBClass;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   DepVar(DESC)
MPRINT(EM_DIAGRAM):  ;
3082571    target
3082572    DepVar
3082573    ;
MPRINT(EM_DIAGRAM):   target DepVar ;
3082574    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
3082575    quit;
3082576    *--- end code ---*;
 
3082577    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3082578    * Rip Model 1;
MPRINT(EM_DIAGRAM):   * Rip Model 1;
3082579    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082580    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082581    * TREE MODEL DepVar BINARY RIP1;
MPRINT(EM_DIAGRAM):   * TREE MODEL DepVar BINARY RIP1;
3082582    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
MPRINT(EM_DIAGRAM):   reset noprint;
MPRINT(EM_DIAGRAM):   select count(*) into :_tmpnobs from EMWS8.Meta3_TRAIN;
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
MPRINT(EM_DIAGRAM):   quit;
3082583    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3082584    * Rule4: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Rule4: Create decision matrix;
3082585    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082586    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082587    * Rule4: Tree Variables Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: Tree Variables Macro ;
3082588    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082589    %macro EM_TREEVARS;
3082590        AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
3082591       AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income
3082592       Kidhome Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts
3082593       MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency
3082594       Teenhome
3082595    %mend EM_TREEVARS;
3082596    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082597    * Rule4: Tree Targets Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: Tree Targets Macro ;
3082598    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082599    %macro EM_TREETARGETS;
3082600        DepVar
3082601    %mend EM_TREETARGETS;
3082602    data WORK.EM_Rule4 / view=WORK.EM_Rule4;
MPRINT(EM_DIAGRAM):   data WORK.EM_Rule4 / view=WORK.EM_Rule4;
3082603    set EMWS8.Meta3_TRAIN(keep=%EM_TREEVARS %EM_TREETARGETS);
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_TRAIN(keep
MPRINT(EM_DIAGRAM):  =AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts MonthsAsCustomer
NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome DepVar);
3082604    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_RULE4.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Rule4: Interval Inputs Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082605    *------------------------------------------------------------* ;
3082606    * Rule4: Interval Inputs Macro ;
3082607    *------------------------------------------------------------* ;
3082608    %macro INTINPUTS;
3082609        AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits MntGoldProds
3082610       MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
3082611       RMntFrq Recency Teenhome
3082612    %mend INTINPUTS;
3082613    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082614    * Rule4: Binary and Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: Binary and Nominal Inputs Macro ;
3082615    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082616    %macro NOMINPUTS;
3082617        AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
3082618       Education HigherEducationBinary Marital_Status
3082619    %mend NOMINPUTS;
3082620    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082621    * Rule4: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: Ordinal Inputs Macro ;
3082622    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3082623    %macro ORDINPUTS;
3082624
3082625    %mend ORDINPUTS;
3082626    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3082627    * Rule4: Run ARBOR procedure;
MPRINT(EM_DIAGRAM):   * Rule4: Run ARBOR procedure;
3082628    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
3082629    proc arbor data=WORK.EM_Rule4
3082630    Leafsize=50
3082631    Mincatsize = 5
3082632    Maxdepth=4
3082633    Missing=USEINSEARCH
3082634    ;
MPRINT(EM_DIAGRAM):    proc arbor data=WORK.EM_Rule4 Leafsize=50 Mincatsize = 5 Maxdepth=4
Missing=USEINSEARCH ;
3082635    ;
MPRINT(EM_DIAGRAM):   ;
3082636    input %INTINPUTS
MPRINT(EM_DIAGRAM):   input
MPRINT(INTINPUTS):   AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits
MntGoldProds MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
3082637    / level = interval;
MPRINT(EM_DIAGRAM):   / level = interval;
3082638    input %NOMINPUTS
MPRINT(EM_DIAGRAM):   input
MPRINT(NOMINPUTS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
Education HigherEducationBinary Marital_Status
3082639    / level=nominal;
MPRINT(EM_DIAGRAM):   / level=nominal;
3082640    target DepVar / level=BINARY
3082641    Criterion=GINI
3082642    ;
MPRINT(EM_DIAGRAM):   target DepVar / level=BINARY Criterion=GINI ;
3082643    ;
MPRINT(EM_DIAGRAM):   ;
3082644    Performance DISK
3082645    ;
MPRINT(EM_DIAGRAM):   Performance DISK ;
NOTE: View EMWS8.META3_VALIDATE.VIEW used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
 
3082646    Assess
3082647    Validata=EMWS8.Meta3_VALIDATE
3082648    measure=ASE
3082649    ;
MPRINT(EM_DIAGRAM):   Assess Validata=EMWS8.Meta3_VALIDATE measure=ASE ;
NOTE: 1367749 kilobytes of physical memory.
NOTE: Will use 2374 out of 2374 training cases.
NOTE: Using memory pool with 135983104 bytes.
NOTE: Will not search for split on variable AcceptedCmp2.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Will not search for split on variable Complain.
NOTE: Acceptable cases have the same value.
NOTE: Option MINCATSIZE=5 may apply.
NOTE: Passed training data 8 times.
NOTE: Training used 1539536 bytes of work memory.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The subtree sequence contains 14 subtrees. The largest has 27 nodes and 14 leaves.
NOTE: Using subtree with 25 nodes and 13 leaves.
3082650    MAKEMACRO NLEAVES=nleaves;
MPRINT(EM_DIAGRAM):   MAKEMACRO NLEAVES=nleaves;
NOTE: Created macro variable NLEAVES equal to 13.
3082651    save
3082652    MODEL=WORK.OUTTREE_TREE_0IX5F3N
3082653    SEQUENCE=WORK.OUTSEQ_TREE_0IX5F3N
3082654    IMPORTANCE=WORK.OUTIMPORT_TREE_0IX5F3N
3082655    NODESTAT=WORK.OUTNODES_TREE_0IX5F3N
3082656    SUMMARY=WORK.OUTSUMMARY_TREE_0IX5F3N
3082657    STATSBYNODE=WORK.OUTSTATS_TREE_0IX5F3N
3082658    Pathlistnonmissing = WORK.OUTPATH_TREE_0IX5F3N
3082659    Rules = WORK.OUTRULES_TREE_0IX5F3N
3082660    ;
MPRINT(EM_DIAGRAM):   save MODEL=WORK.OUTTREE_TREE_0IX5F3N SEQUENCE=WORK.OUTSEQ_TREE_0IX5F3N
IMPORTANCE=WORK.OUTIMPORT_TREE_0IX5F3N NODESTAT=WORK.OUTNODES_TREE_0IX5F3N
SUMMARY=WORK.OUTSUMMARY_TREE_0IX5F3N STATSBYNODE=WORK.OUTSTATS_TREE_0IX5F3N Pathlistnonmissing
= WORK.OUTPATH_TREE_0IX5F3N Rules = WORK.OUTRULES_TREE_0IX5F3N ;
NOTE: The data set WORK.OUTIMPORT_TREE_0IX5F3N has 25 observations and 6 variables.
NOTE: The data set WORK.OUTTREE_TREE_0IX5F3N has 930 observations and 4 variables.
NOTE: The data set WORK.OUTNODES_TREE_0IX5F3N has 25 observations and 24 variables.
NOTE: The data set WORK.OUTPATH_TREE_0IX5F3N has 101 observations and 7 variables.
NOTE: The data set WORK.OUTRULES_TREE_0IX5F3N has 244 observations and 6 variables.
NOTE: The data set WORK.OUTSEQ_TREE_0IX5F3N has 14 observations and 20 variables.
NOTE: The data set WORK.OUTSTATS_TREE_0IX5F3N has 175 observations and 5 variables.
NOTE: The data set WORK.OUTSUMMARY_TREE_0IX5F3N has 24 observations and 6 variables.
3082661    code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
3082661  ! Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1.sas"
3082662    group=Rule4
3082663    ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1.sas" group=Rule4 ;
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1.sas opened.
3082664    code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
3082664  ! Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1_res.sas"
3082665    group=Rule4
3082666    residual
3082667    ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1_res.sas" group=Rule4 residual ;
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\RIP1_res.sas opened.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
3082668    score data=EMWS8.Meta3_TRAIN out=_ptrain
3082669    ;
MPRINT(EM_DIAGRAM):   score data=EMWS8.Meta3_TRAIN out=_ptrain ;
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: The data set WORK._PTRAIN has 2374 observations and 59 variables.
NOTE: View EMWS8.META3_VALIDATE.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.01 seconds
 
3082670    score data=EMWS8.Meta3_VALIDATE out=_pvalid
3082671    ;
MPRINT(EM_DIAGRAM):   score data=EMWS8.Meta3_VALIDATE out=_pvalid ;
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: The data set WORK._PVALID has 1018 observations and 59 variables.
3082672    run;
MPRINT(EM_DIAGRAM):   run;
 
3082673    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View WORK.EM_RULE4.VIEW used (Total process time):
      real time           0.37 seconds
      cpu time            0.37 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: There were 2374 observations read from the data set WORK.EM_RULE4.
NOTE: The data set WORK._NAMEDAT has 2 observations and 5 variables.
NOTE: PROCEDURE ARBOR used (Total process time):
      real time           0.39 seconds
      cpu time            0.39 seconds
 
 
3082674    data WORK.OUTIMPORT_TREE_0IX5F3N;
MPRINT(EM_DIAGRAM):    data WORK.OUTIMPORT_TREE_0IX5F3N;
3082675    set WORK.OUTIMPORT_TREE_0IX5F3N;
MPRINT(EM_DIAGRAM):   set WORK.OUTIMPORT_TREE_0IX5F3N;
3082676    label NAME = "%sysfunc(sasmsg(sashelp.dmine, meta_name_vlabel, noquote))" LABEL =
3082676  ! "%sysfunc(sasmsg(sashelp.dmine, meta_label_vlabel, noquote))" NRULES =
3082676  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_nrules_vlabel, noquote))" IMPORTANCE =
3082677       "%sysfunc(sasmsg(sashelp.dmine, rpt_importance_vlabel, noquote))" NSURROGATES =
3082677  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_nsurrogates_vlabel, noquote))"
3082678    VIMPORTANCE = "%sysfunc(sasmsg(sashelp.dmine, rpt_vimportance_vlabel, noquote))"
3082678  ! RATIO = "%sysfunc(sasmsg(sashelp.dmine, rpt_ratio_vlabel, noquote))"
3082679    ;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" LABEL = "Label" NRULES = "Number of
Splitting Rules" IMPORTANCE = "Importance" NSURROGATES = "Number of Surrogate Rules"
VIMPORTANCE = "Validation Importance" RATIO = "Ratio of Validation to Training Importance" ;
3082680    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable NSURROGATES is uninitialized.
NOTE: There were 25 observations read from the data set WORK.OUTIMPORT_TREE_0IX5F3N.
NOTE: The data set WORK.OUTIMPORT_TREE_0IX5F3N has 25 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3082681    filename x "C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
3082681  ! Files\_TD9752_WN7LF-LEAVE_\Prc2\DESCRIBE.SOURCE" encoding='utf-8' NOBOM;
MPRINT(EM_DIAGRAM):   filename x "C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\DESCRIBE.SOURCE" encoding='utf-8' NOBOM;
3082682    data temp;
MPRINT(EM_DIAGRAM):    data temp;
3082683    length varname $21;
MPRINT(EM_DIAGRAM):   length varname $21;
3082684    retain varname;
MPRINT(EM_DIAGRAM):   retain varname;
3082685    set WORK.OUTPATH_TREE_0IX5F3N;
MPRINT(EM_DIAGRAM):   set WORK.OUTPATH_TREE_0IX5F3N;
3082686    if ^missing(variable) then varname=variable;
MPRINT(EM_DIAGRAM):   if ^missing(variable) then varname=variable;
3082687    else if ^missing(var_name) then varname=var_name;
MPRINT(EM_DIAGRAM):   else if ^missing(var_name) then varname=var_name;
3082688    output;
MPRINT(EM_DIAGRAM):   output;
3082689    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 101 observations read from the data set WORK.OUTPATH_TREE_0IX5F3N.
NOTE: The data set WORK.TEMP has 101 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082690    proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
3082691    by node;
MPRINT(EM_DIAGRAM):   by node;
3082692    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 101 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 101 observations and 8 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082693    proc sort data=WORK.OUTNODES_TREE_0IX5F3N out=outnodes;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.OUTNODES_TREE_0IX5F3N out=outnodes;
3082694    by node;
MPRINT(EM_DIAGRAM):   by node;
3082695    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set WORK.OUTNODES_TREE_0IX5F3N.
NOTE: The data set WORK.OUTNODES has 25 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082696    data temp;
MPRINT(EM_DIAGRAM):   data temp;
3082697    merge temp(in=_a) outnodes(keep= node
3082698    NPRIORS
3082699    P_DepVar0
3082700    P_DepVar1
3082701    );
MPRINT(EM_DIAGRAM):   merge temp(in=_a) outnodes(keep= node NPRIORS P_DepVar0 P_DepVar1 );
3082702    by node;
MPRINT(EM_DIAGRAM):   by node;
3082703    if _a;
MPRINT(EM_DIAGRAM):   if _a;
3082704    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 101 observations read from the data set WORK.TEMP.
NOTE: There were 25 observations read from the data set WORK.OUTNODES.
NOTE: The data set WORK.TEMP has 101 observations and 11 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082705    proc sort data=temp;
MPRINT(EM_DIAGRAM):   proc sort data=temp;
3082706    by node descending varname descending numeric_value;
MPRINT(EM_DIAGRAM):   by node descending varname descending numeric_value;
3082707    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 101 observations read from the data set WORK.TEMP.
NOTE: The data set WORK.TEMP has 101 observations and 11 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082708    data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
3082709    file x;
MPRINT(EM_DIAGRAM):   file x;
3082710    set temp;
MPRINT(EM_DIAGRAM):   set temp;
3082711    by node descending varname;
MPRINT(EM_DIAGRAM):   by node descending varname;
3082712    retain origvar oldnode string;
MPRINT(EM_DIAGRAM):   retain origvar oldnode string;
3082713    length origvar $32 oldnode 8 string $200;
MPRINT(EM_DIAGRAM):   length origvar $32 oldnode 8 string $200;
3082714    if _n_ = 1 then do;
MPRINT(EM_DIAGRAM):   if _n_ = 1 then do;
3082715    origvar = varname;
MPRINT(EM_DIAGRAM):   origvar = varname;
3082716    oldnode = node;
MPRINT(EM_DIAGRAM):   oldnode = node;
3082717    end;
MPRINT(EM_DIAGRAM):   end;
3082718    if first.node then do;
MPRINT(EM_DIAGRAM):   if first.node then do;
3082719    put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
3082720    put " Node = " node;
MPRINT(EM_DIAGRAM):   put " Node = " node;
3082721    put "&EM_CODEBAR";
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
3082722    end;
MPRINT(EM_DIAGRAM):   end;
3082723    if first.varname then do;
MPRINT(EM_DIAGRAM):   if first.varname then do;
3082724    if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
3082725    if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
3082726    if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
3082727    if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
3082728    string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
3082729    end;
MPRINT(EM_DIAGRAM):   end;
3082730    else do;
MPRINT(EM_DIAGRAM):   else do;
3082731    string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
3082732    end;
MPRINT(EM_DIAGRAM):   end;
3082733    end;
MPRINT(EM_DIAGRAM):   end;
3082734    end;
MPRINT(EM_DIAGRAM):   end;
3082735    else do;
MPRINT(EM_DIAGRAM):   else do;
3082736    if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
3082737    string= "AND "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "AND "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
3082738    end;
MPRINT(EM_DIAGRAM):   end;
3082739    else do;
MPRINT(EM_DIAGRAM):   else do;
3082740    string= "if "|| strip(varname)||" "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   string= "if "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
3082741    end;
MPRINT(EM_DIAGRAM):   end;
3082742    end;
MPRINT(EM_DIAGRAM):   end;
3082743    end;
MPRINT(EM_DIAGRAM):   end;
3082744    else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
3082745    if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
3082746    string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "AND "||strip(varname) ||" IS ONE OF: "||character_value;
3082747    end;
MPRINT(EM_DIAGRAM):   end;
3082748    else do;
MPRINT(EM_DIAGRAM):   else do;
3082749    string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" IS ONE OF: "||character_value;
3082750    end;
MPRINT(EM_DIAGRAM):   end;
3082751    end;
MPRINT(EM_DIAGRAM):   end;
3082752    else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
3082753    if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
3082754    string = " AND "|| strip(varname) || " equals Missing";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals Missing";
3082755    end;
MPRINT(EM_DIAGRAM):   end;
3082756    else do;
MPRINT(EM_DIAGRAM):   else do;
3082757    string = "if "|| strip(varname) ||" equals Missing";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals Missing";
3082758    end;
MPRINT(EM_DIAGRAM):   end;
3082759    end;
MPRINT(EM_DIAGRAM):   end;
3082760    else if RELATION in ("ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISNOTMISSING") then do;
3082761    if ^first.node then do;
MPRINT(EM_DIAGRAM):   if ^first.node then do;
3082762    string = " AND "|| strip(varname) || " equals All Values";
MPRINT(EM_DIAGRAM):   string = " AND "|| strip(varname) || " equals All Values";
3082763    end;
MPRINT(EM_DIAGRAM):   end;
3082764    else do;
MPRINT(EM_DIAGRAM):   else do;
3082765    string = "if "|| strip(varname) ||" equals All Values";
MPRINT(EM_DIAGRAM):   string = "if "|| strip(varname) ||" equals All Values";
3082766    end;
MPRINT(EM_DIAGRAM):   end;
3082767    end;
MPRINT(EM_DIAGRAM):   end;
3082768    if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
3082769    oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
3082770    end;
MPRINT(EM_DIAGRAM):   end;
3082771    else do;
MPRINT(EM_DIAGRAM):   else do;
3082772    if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION ^in ("=", "ISMISSING", "ISNOTMISSING") then do;
3082773    if MISSING(CHARACTER_VALUE) then do;
MPRINT(EM_DIAGRAM):   if MISSING(CHARACTER_VALUE) then do;
3082774    if NUMERIC_VALUE ne . then do;
MPRINT(EM_DIAGRAM):   if NUMERIC_VALUE ne . then do;
3082775    if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||"
3082775  ! "||strip(relation)||" "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(numeric_value);
3082776    else string= " if "|| strip(varname)||" "||strip(relation)||"
3082776  ! "||strip(numeric_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||"
"||strip(numeric_value);
3082777    end;
MPRINT(EM_DIAGRAM):   end;
3082778    end;
MPRINT(EM_DIAGRAM):   end;
3082779    else do;
MPRINT(EM_DIAGRAM):   else do;
3082780    if ^MISSING(string) then string= strip(string)||" AND "|| strip(varname)||"
3082780  ! "||strip(relation)||" "||strip(character_value);
MPRINT(EM_DIAGRAM):   if ^MISSING(string) then string= strip(string)||" AND "||
strip(varname)||" "||strip(relation)||" "||strip(character_value);
3082781    else string= " if "|| strip(varname)||" "||strip(relation)||"
3082781  ! "||strip(character_value);
MPRINT(EM_DIAGRAM):   else string= " if "|| strip(varname)||" "||strip(relation)||"
"||strip(character_value);
3082782    end;
MPRINT(EM_DIAGRAM):   end;
3082783    end;
MPRINT(EM_DIAGRAM):   end;
3082784    else if RELATION in ("=") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("=") then do;
3082785    string = strip(string)||", "||strip(character_value);
MPRINT(EM_DIAGRAM):   string = strip(string)||", "||strip(character_value);
3082786    end;
MPRINT(EM_DIAGRAM):   end;
3082787    else if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   else if RELATION in ("ISMISSING") then do;
3082788    end;
MPRINT(EM_DIAGRAM):   end;
3082789    if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
3082790    oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
3082791    end;
MPRINT(EM_DIAGRAM):   end;
3082792    if last.varname then do;
MPRINT(EM_DIAGRAM):   if last.varname then do;
3082793    if RELATION in ("ISMISSING") then do;
MPRINT(EM_DIAGRAM):   if RELATION in ("ISMISSING") then do;
3082794    if ^first.varname then do;
MPRINT(EM_DIAGRAM):   if ^first.varname then do;
3082795    string = strip(string) || " or MISSING";
MPRINT(EM_DIAGRAM):   string = strip(string) || " or MISSING";
3082796    end;
MPRINT(EM_DIAGRAM):   end;
3082797    end;
MPRINT(EM_DIAGRAM):   end;
3082798    put string;
MPRINT(EM_DIAGRAM):   put string;
3082799    if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
3082800    oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
3082801    end;
MPRINT(EM_DIAGRAM):   end;
3082802    if last.node then do;
MPRINT(EM_DIAGRAM):   if last.node then do;
3082803    put "then ";
MPRINT(EM_DIAGRAM):   put "then ";
3082804    put " Tree Node Identifier   = " node;
MPRINT(EM_DIAGRAM):   put " Tree Node Identifier   = " node;
3082805    put " Number of Observations = " NPRIORS;
MPRINT(EM_DIAGRAM):   put " Number of Observations = " NPRIORS;
3082806    put " Predicted: DepVar=0  = " P_DepVar0;
MPRINT(EM_DIAGRAM):   put " Predicted: DepVar=0  = " P_DepVar0;
3082807    put " Predicted: DepVar=1  = " P_DepVar1;
MPRINT(EM_DIAGRAM):   put " Predicted: DepVar=1  = " P_DepVar1;
3082808    put " ";
MPRINT(EM_DIAGRAM):   put " ";
3082809    if ^missing(varname) then origvar = varname;
MPRINT(EM_DIAGRAM):   if ^missing(varname) then origvar = varname;
3082810    oldnode=node;
MPRINT(EM_DIAGRAM):   oldnode=node;
3082811    end;
MPRINT(EM_DIAGRAM):   end;
3082812    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Numeric values have been converted to character values at the places given by:
      (Line):(Column).
      -7876142:***   -7876138:***   -7876085:***   -7876084:***
NOTE: The file X is:
 
      Filename=C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\DESCRIBE.SOURCE,
      RECFM=V,LRECL=1536,File Size (bytes)=0,
      Last Modified=28. April 2016 11.02 Uhr,
      Create Time=28. April 2016 11.02 Uhr
 
NOTE: 156 records were written to the file X.
      The minimum record length was 1.
      The maximum record length was 68.
NOTE: There were 101 observations read from the data set WORK.TEMP.
NOTE: At least one W.D format was too small for the number to be printed. The decimal may be
      shifted by the "BEST" format.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082813    filename x;
MPRINT(EM_DIAGRAM):    filename x;
NOTE: Fileref X has been deassigned.
3082814    data leafds;
MPRINT(EM_DIAGRAM):    data leafds;
3082815    set WORK.OUTNODES_TREE_0IX5F3N;
MPRINT(EM_DIAGRAM):   set WORK.OUTNODES_TREE_0IX5F3N;
3082816    if LEAF ne .;
MPRINT(EM_DIAGRAM):   if LEAF ne .;
3082817    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 25 observations read from the data set WORK.OUTNODES_TREE_0IX5F3N.
NOTE: The data set WORK.LEAFDS has 13 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082818    proc sort data=leafds;
MPRINT(EM_DIAGRAM):   proc sort data=leafds;
3082819    by descending N;
MPRINT(EM_DIAGRAM):   by descending N;
3082820    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.LEAFDS.
NOTE: The data set WORK.LEAFDS has 13 observations and 24 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
NOTE: Argument three to KSUBSTR exceeds the length of the input string, the function has
      recalculated the length of the string.
RIP LEAF: N=1  varid=17  nodeid=21  val=0.99159663865546  count=1071
RIP LEAF: N=2  varid=18  nodeid=21  val=0.00840336134453  count=1071
RIP LEAF: N=1  varid=17  nodeid=16  val=0.89330024813895  count=403
RIP LEAF: N=2  varid=18  nodeid=16  val=0.10669975186104  count=403
RIP LEAF: N=1  varid=17  nodeid=12  val=0.42944785276073  count=163
RIP LEAF: N=2  varid=18  nodeid=12  val=0.57055214723926  count=163
RIP LEAF: N=1  varid=17  nodeid=25  val=0.91156462585034  count=147
RIP LEAF: N=2  varid=18  nodeid=25  val=0.08843537414965  count=147
RIP LEAF: N=1  varid=17  nodeid=17  val=0.6822429906542  count=107
RIP LEAF: N=2  varid=18  nodeid=17  val=0.31775700934579  count=107
RIP LEAF: N=1  varid=17  nodeid=20  val=0.94285714285714  count=105
RIP LEAF: N=2  varid=18  nodeid=20  val=0.05714285714285  count=105
RIP LEAF: N=1  varid=17  nodeid=24  val=0.75806451612903  count=62
RIP LEAF: N=2  varid=18  nodeid=24  val=0.24193548387096  count=62
RIP LEAF: N=1  varid=17  nodeid=18  val=0.44827586206896  count=58
RIP LEAF: N=2  varid=18  nodeid=18  val=0.55172413793103  count=58
RIP LEAF: N=1  varid=17  nodeid=13  val=0.05263157894736  count=57
RIP LEAF: N=2  varid=18  nodeid=13  val=0.94736842105263  count=57
RIP LEAF: N=1  varid=17  nodeid=26  val=0.47058823529411  count=51
RIP LEAF: N=2  varid=18  nodeid=26  val=0.52941176470588  count=51
RIP LEAF: N=1  varid=17  nodeid=19  val=0.8  count=50
RIP LEAF: N=2  varid=18  nodeid=19  val=0.2  count=50
RIP LEAF: N=1  varid=17  nodeid=11  val=0.82  count=50
RIP LEAF: N=2  varid=18  nodeid=11  val=0.18  count=50
RIP LEAF: N=1  varid=17  nodeid=27  val=0.72  count=50
RIP LEAF: N=2  varid=18  nodeid=27  val=0.28  count=50
3082821    * RIP1: Print leaf table;
MPRINT(EM_DIAGRAM):    * RIP1: Print leaf table;
3082822    ;
MPRINT(EM_DIAGRAM):   ;
3082823    data leafds;
MPRINT(EM_DIAGRAM):   data leafds;
3082824    set leafds;
MPRINT(EM_DIAGRAM):   set leafds;
3082825    format P_DEPVAR0 8.4;
MPRINT(EM_DIAGRAM):   format P_DEPVAR0 8.4;
3082826    format P_DEPVAR1 8.4;
MPRINT(EM_DIAGRAM):   format P_DEPVAR1 8.4;
3082827    ;
MPRINT(EM_DIAGRAM):   ;
3082828    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.LEAFDS.
NOTE: The data set WORK.LEAFDS has 13 observations and 24 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082829    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_leaftable_title, NOQUOTE, RIP1, 100))";
MPRINT(EM_DIAGRAM):   title9 "RIP1 Leaf Table: Threshold= 100";
3082830    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_text_title, NOQUOTE, %nrbquote(No leaf
3082830  ! was ripped from the model.)))";
MPRINT(EM_DIAGRAM):   title10 "No leaf was ripped from the model.";
3082831    proc print data = leafds NOOBS LABEL;
MPRINT(EM_DIAGRAM):   proc print data = leafds NOOBS LABEL;
3082832    var NODE N
3082833    P_DEPVAR0
3082834    P_DEPVAR1
3082835    ;
MPRINT(EM_DIAGRAM):   var NODE N P_DEPVAR0 P_DEPVAR1 ;
3082836    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 13 observations read from the data set WORK.LEAFDS.
NOTE: The PROCEDURE PRINT printed page 2789.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082837    title9;
MPRINT(EM_DIAGRAM):   title9;
3082838    title10;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   * Create training data set with binary target for modeling;
MPRINT(EM_DIAGRAM):   ;
3082839    * Create training data set with binary target for modeling;
3082840    ;
3082841    data _ptrain;
MPRINT(EM_DIAGRAM):   data _ptrain;
3082842    length _bin $12;
MPRINT(EM_DIAGRAM):   length _bin $12;
3082843    set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
3082844    _tmp=putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp=putn(DepVar, 'best.');
3082845    %DMNORMIP(_tmp);
MPRINT(DMNORMIP):   call dmnorm(_tmp,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3082846    _tmpLevel = '0';
MPRINT(EM_DIAGRAM):   _tmpLevel = '0';
3082847    %DMNORMCP(_tmpLevel, _tmpLevel);
MPRINT(DMNORMCP):   _tmpLevel=dmnorm(_tmpLevel,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3082848    if _tmp eq _tmpLevel then _bin = '1';
MPRINT(EM_DIAGRAM):   if _tmp eq _tmpLevel then _bin = '1';
3082849    else _bin = '0';
MPRINT(EM_DIAGRAM):   else _bin = '0';
3082850    drop _tmp _tmpLevel
3082851    ;
MPRINT(EM_DIAGRAM):   drop _tmp _tmpLevel ;
3082852    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._PTRAIN has 2374 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082853    * Create validation data set with binary target for modeling;
MPRINT(EM_DIAGRAM):    * Create validation data set with binary target for modeling;
3082854    ;
MPRINT(EM_DIAGRAM):   ;
3082855    data _pvalid;
MPRINT(EM_DIAGRAM):   data _pvalid;
3082856    length _bin $12;
MPRINT(EM_DIAGRAM):   length _bin $12;
3082857    set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
3082858    _tmp = putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp = putn(DepVar, 'best.');
3082859    %DMNORMIP(_TMP);
MPRINT(DMNORMIP):   call dmnorm(_TMP,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3082860    _tmpLevel = '0';
MPRINT(EM_DIAGRAM):   _tmpLevel = '0';
3082861    %DMNORMCP(_tmpLevel, _tmpLevel);
MPRINT(DMNORMCP):   _tmpLevel=dmnorm(_tmpLevel,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3082862    if _tmp eq _tmpLevel then _bin = '1';
MPRINT(EM_DIAGRAM):   if _tmp eq _tmpLevel then _bin = '1';
3082863    else _bin = '0';
MPRINT(EM_DIAGRAM):   else _bin = '0';
3082864    drop _tmp
3082865    ;
MPRINT(EM_DIAGRAM):   drop _tmp ;
3082866    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._PVALID has 1018 observations and 61 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3082867    data _train;
MPRINT(EM_DIAGRAM):    data _train;
3082868    set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
3082869    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._TRAIN has 2374 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082870    data _valid;
MPRINT(EM_DIAGRAM):   data _valid;
3082871    set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
3082872    options validvarname=any;
MPRINT(EM_DIAGRAM):   options validvarname=any;
3082873    proc contents data=work._train out=_tempAdvisor noprint;
 
NOTE: There were 1018 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VALID has 1018 observations and 61 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   proc contents data=work._train out=_tempAdvisor noprint;
3082874    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._TEMPADVISOR has 60 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082875    options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
3082876    %let _dsidTable = 0;
3082877    %let _engineTable =;
3082878    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3082879    dsid = open('work._train');
MPRINT(EM_DIAGRAM):   dsid = open('work._train');
3082880    call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EM_DIAGRAM):   call symput('_dsidTable', strip(put(dsid, best.)));
3082881    if dsid then do;
MPRINT(EM_DIAGRAM):   if dsid then do;
3082882    call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
3082883    dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
3082884    end;
MPRINT(EM_DIAGRAM):   end;
3082885    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082886    options fmterr;
MPRINT(EM_DIAGRAM):    options fmterr;
3082887    data _metaTestView;
MPRINT(EM_DIAGRAM):   data _metaTestView;
3082888    set work._train;
MPRINT(EM_DIAGRAM):   set work._train;
3082889    if _N_=1 then do;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
3082890    output;
MPRINT(EM_DIAGRAM):   output;
3082891    stop;
MPRINT(EM_DIAGRAM):   stop;
3082892    end;
MPRINT(EM_DIAGRAM):   end;
3082893    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TRAIN.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 60 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082894    proc contents data=work._train
3082895    out=WORK.M2GPQRJN noprint;
MPRINT(EM_DIAGRAM):    proc contents data=work._train out=WORK.M2GPQRJN noprint;
3082896    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.M2GPQRJN has 60 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082897    data WORK.M2GPQRJN;
MPRINT(EM_DIAGRAM):    data WORK.M2GPQRJN;
3082898    length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $
3082898  !  9;
MPRINT(EM_DIAGRAM):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1
INDEXTYPE $ 9;
3082899    label NAME =;
MPRINT(EM_DIAGRAM):   label NAME =;
3082900    set WORK.M2GPQRJN(keep=name type length label format formatl formatd informat
3082900  ! informl informd idxusage rename=(type=itype));
MPRINT(EM_DIAGRAM):   set WORK.M2GPQRJN(keep=name type length label format formatl formatd
informat informl informd idxusage rename=(type=itype));
3082901    if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
3082902    else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
3082903    if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
3082904    if format ne ' ' then format = strip(format)!!strip(put(formatl,
3082904  ! best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
3082905    else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
3082906    end;
MPRINT(EM_DIAGRAM):   end;
3082907    else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
3082908    if informl > 0 then do;
MPRINT(EM_DIAGRAM):   if informl > 0 then do;
3082909    if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
3082909  ! best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
3082910    else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd,
best12.));
3082911    end;
MPRINT(EM_DIAGRAM):   end;
3082912    else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EM_DIAGRAM):   else if informat ne '' then informat = strip(informat)!!'.';
3082913    if idxusage = 'NONE' then index ="N";
MPRINT(EM_DIAGRAM):   if idxusage = 'NONE' then index ="N";
3082914    else index = "Y";
MPRINT(EM_DIAGRAM):   else index = "Y";
3082915    indextype = idxusage;
MPRINT(EM_DIAGRAM):   indextype = idxusage;
3082916    drop idxusage itype formatl formatd informl informd;
MPRINT(EM_DIAGRAM):   drop idxusage itype formatl formatd informl informd;
3082917    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set WORK.M2GPQRJN.
NOTE: The data set WORK.M2GPQRJN has 60 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3082918    data WORK.M2GPQRJN;
MPRINT(EM_DIAGRAM):    data WORK.M2GPQRJN;
3082919    length UNAME $64;
MPRINT(EM_DIAGRAM):   length UNAME $64;
3082920    set WORK.M2GPQRJN;
MPRINT(EM_DIAGRAM):   set WORK.M2GPQRJN;
3082921    UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
3082922    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set WORK.M2GPQRJN.
NOTE: The data set WORK.M2GPQRJN has 60 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M0GP867E NOTHREADS;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
3082926    data WORK.M0GP867E;
MPRINT(EM_DIAGRAM):    data WORK.M0GP867E;
3082927    drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
3082928    set WORK.M0GP867E;
MPRINT(EM_DIAGRAM):   set WORK.M0GP867E;
3082929    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set WORK.M0GP867E.
NOTE: The data set WORK.M0GP867E has 60 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK.M240YNMH(keep=NAME ATTR);
MPRINT(EM_DIAGRAM):   length ATTR $ 20;
MPRINT(EM_DIAGRAM):   set WORK.M0GP867E;
MPRINT(EM_DIAGRAM):   if level ne "INTERVAL" then do;
MPRINT(EM_DIAGRAM):   if order = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ORDER';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'FORMATTYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ROLE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'LEVEL';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if type = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'TYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if index = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'INDEX';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if report = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'REPORT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort NOTHREADS;
MPRINT(EM_DIAGRAM):   by attr;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M0GP867E;
MPRINT(EM_DIAGRAM):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $
10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EM_DIAGRAM):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EM_DIAGRAM):   set WORK.M0GP867E;
MPRINT(EM_DIAGRAM):   if formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
MPRINT(EM_DIAGRAM):   pos = indexc(format,'.1234567890');
MPRINT(EM_DIAGRAM):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EM_DIAGRAM):   else tempfmt = ' ';
MPRINT(EM_DIAGRAM):   flen = length(tempfmt);
MPRINT(EM_DIAGRAM):   select;
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype =
"TIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN"
"Z" "ZD")) formattype = "CODING";
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   formattype = "USER";
MPRINT(EM_DIAGRAM):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EM_DIAGRAM):   else if flen >= 4 then do;
MPRINT(EM_DIAGRAM):   str = substr(tempfmt,1,4);
MPRINT(EM_DIAGRAM):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EM_DIAGRAM):   else if str = "S370" then formattype = "CODING";
MPRINT(EM_DIAGRAM):   else if str = "BEST" then formattype = "NUM";
MPRINT(EM_DIAGRAM):   drop str;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop flen tempfmt pos;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   formatType = "CATEGORY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if formatType = "NUM" then do;
MPRINT(EM_DIAGRAM):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EM_DIAGRAM):   else formatType = "QUANTITY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level =
"NOMINAL";
MPRINT(EM_DIAGRAM):   else level = "INTERVAL";
MPRINT(EM_DIAGRAM):   levelAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else level = upcase(level);
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   length name_prefix $8 _uname $64;
MPRINT(EM_DIAGRAM):   drop name_prefix _uname _freqflag;
MPRINT(EM_DIAGRAM):   retain _freqflag;
MPRINT(EM_DIAGRAM):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EM_DIAGRAM):   _uname = upcase(NAME);
MPRINT(EM_DIAGRAM):   select(_uname);
MPRINT(EM_DIAGRAM):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_SEGMENT') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('_NODE_') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('URI') ROLE = 'URL';
MPRINT(EM_DIAGRAM):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'FREQ';
MPRINT(EM_DIAGRAM):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EM_DIAGRAM):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(_uname, 1, '_');
MPRINT(EM_DIAGRAM):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS',
'RAT') then ROLE = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix ='B' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI',
'IC') then ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR',
'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EM_DIAGRAM):   drop _found_ i;
MPRINT(EM_DIAGRAM):   _found_=0;
MPRINT(EM_DIAGRAM):   do i=1 to 19 until(_found_=1);
MPRINT(EM_DIAGRAM):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EM_DIAGRAM):   ROLE=_ROLE_{i};
MPRINT(EM_DIAGRAM):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   _found_=1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if length(_uname)>2 then do;
MPRINT(EM_DIAGRAM):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'ID';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EM_DIAGRAM):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EM_DIAGRAM):   else role = 'INPUT';
MPRINT(EM_DIAGRAM):   roleAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else role = upcase(role);
MPRINT(EM_DIAGRAM):   if REPORT = '' then REPORT = 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc dmdb data=work._train(obs=1000000) batch classOut=_DMDB1S3YZYJ
maxLevel=22;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Custid DepVar Dt_Customer Education Element1 Element2 Element3
Element4 Frq F_DepVar Group HigherEducation HigherEducationBinary Income I_DepVar Kidhome
Marital_Status Mnt MntFishProducts MntFruits MntGoldProds MntMeatProducts MntSweetProducts
MntWines MonthsAsCustomer NumCatalogPurchases NumDealsPurchases NumDistPurchases
NumStorePurchases NumWebPurchases NumWebVisitsMonth P_DepVar0 P_DepVar1 Q_DepVar0 Q_DepVar1
Recency RFMstat RMntFrq R_DepVar0 R_DepVar1 Teenhome U_DepVar V_DepVar0 V_DepVar1 Year_Birth
Z_CostContact Z_Revenue _bin _dataobs_ _LEAF_ _NODE_ _WARN_
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc freq data=_DMDB1S3YZYJ noprint;
MPRINT(EM_DIAGRAM):   table name / out=_DMDBCOUNT1S3YZYJ(drop=percent rename=(count=NLEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _MISS1S3YZYJ(rename=(frequency=NMISS));
MPRINT(EM_DIAGRAM):   set _DMDB1S3YZYJ(where=(NRAW=. and CRAW=''));
MPRINT(EM_DIAGRAM):   keep name frequency;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_MISS1S3YZYJ;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_DMDBCOUNT1S3YZYJ;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _COUNTS1S3YZYJ;
MPRINT(EM_DIAGRAM):   merge _DMDBCOUNT1S3YZYJ _MISS1S3YZYJ;
MPRINT(EM_DIAGRAM):   label NLEVEL= 'Number of Category';
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if NMISS > 0 then do;
MPRINT(EM_DIAGRAM):   NLEVEL= NLEVEL-1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else NMISS = 0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=_COUNTS1S3YZYJ NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M0GP867E NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.M0GP867E;
MPRINT(EM_DIAGRAM):   length NLEVEL 8 nmiss 8;
MPRINT(EM_DIAGRAM):   update WORK.M0GP867E _COUNTS1S3YZYJ;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if name='' then name='_';
MPRINT(EM_DIAGRAM):   if levelAssigned and ROLE ne 'FREQ' then do;
MPRINT(EM_DIAGRAM):   select(NLEVEL);
MPRINT(EM_DIAGRAM):   when(.) do;
MPRINT(EM_DIAGRAM):   if type eq 'C' then level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when(0) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(1) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(2) level = 'BINARY';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if roleAssigned then do;
MPRINT(EM_DIAGRAM):   if level = 'NOMINAL' and NLEVEL > 20 then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Exceeds maximum number of levels cutoff";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = 'UNARY' and ROLE ne 'FREQ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   drop NLEVEL nmiss;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EM_DIAGRAM):   drop levelAssigned roleAssigned;
MPRINT(EM_DIAGRAM):   run;
3083219    data WORK.M2QD0RVS;
MPRINT(EM_DIAGRAM):    data WORK.M2QD0RVS;
3083220    set WORK.M2QD0RVS;
MPRINT(EM_DIAGRAM):   set WORK.M2QD0RVS;
3083221    if NAME='Element1' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element1' then delete;
3083222    if NAME='Element2' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element2' then delete;
3083223    if NAME='Element3' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element3' then delete;
3083224    if NAME='Element4' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element4' then delete;
3083225    if NAME='Group' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Group' then delete;
3083226    if NAME='Z_CostContact' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_CostContact' then delete;
3083227    if NAME='Z_Revenue' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_Revenue' then delete;
3083228    if NAME='_WARN_' then delete;
MPRINT(EM_DIAGRAM):   if NAME='_WARN_' then delete;
3083229    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.M2QD0RVS.
NOTE: The data set WORK.M2QD0RVS has 27 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3083230    data WORK.M1AW7E8F;
MPRINT(EM_DIAGRAM):    data WORK.M1AW7E8F;
3083231    set WORK.M1AW7E8F;
MPRINT(EM_DIAGRAM):   set WORK.M1AW7E8F;
3083232    if role='INPUT' and use='D' then use='Y';
MPRINT(EM_DIAGRAM):   if role='INPUT' and use='D' then use='Y';
3083233    if NAME='_bin' then do;
MPRINT(EM_DIAGRAM):   if NAME='_bin' then do;
3083234    ROLE='TARGET';
MPRINT(EM_DIAGRAM):   ROLE='TARGET';
3083235    LEVEL='BINARY';
MPRINT(EM_DIAGRAM):   LEVEL='BINARY';
3083236    USE='Y';
MPRINT(EM_DIAGRAM):   USE='Y';
3083237    end;
MPRINT(EM_DIAGRAM):   end;
3083238    if NAME='DepVar' then do;
MPRINT(EM_DIAGRAM):   if NAME='DepVar' then do;
3083239    ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
3083240    end;
MPRINT(EM_DIAGRAM):   end;
3083241    if NAME='Element1' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element1' then delete;
3083242    if NAME='Element2' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element2' then delete;
3083243    if NAME='Element3' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element3' then delete;
3083244    if NAME='Element4' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element4' then delete;
3083245    if NAME='Group' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Group' then delete;
3083246    if NAME='Z_CostContact' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_CostContact' then delete;
3083247    if NAME='Z_Revenue' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_Revenue' then delete;
3083248    if NAME='_WARN_' then delete;
MPRINT(EM_DIAGRAM):   if NAME='_WARN_' then delete;
3083249    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 28 observations read from the data set WORK.M1AW7E8F.
NOTE: The data set WORK.M1AW7E8F has 28 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3083250    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3083251    * Binary Model DepVar = 0;
MPRINT(EM_DIAGRAM):   * Binary Model DepVar = 0;
3083252    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083253    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083254    * REGRESSION MODEL DepVar binary BIN1;
MPRINT(EM_DIAGRAM):   * REGRESSION MODEL DepVar binary BIN1;
3083255    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083256    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083257    * Rule4: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Rule4: Create decision matrix;
3083258    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083259    data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
3083260    set work._train(keep=
3083261    AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
3083262    AcceptedCmpTotal Age Complain DepVar Education Frq HigherEducationBinary Income
3083263    Kidhome Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts
3083264    MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency
3083265    Teenhome _bin);
MPRINT(EM_DIAGRAM):   set work._train(keep= AcceptedCmp1 AcceptedCmp2 AcceptedCmp3
AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain DepVar Education Frq
HigherEducationBinary Income Kidhome Marital_Status MntFishProducts MntFruits MntGoldProds
MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency
Teenhome _bin);
3083266    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Rule4: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3083267    *------------------------------------------------------------* ;
3083268    * Rule4: DMDBClass Macro ;
3083269    *------------------------------------------------------------* ;
3083270    %macro DMDBClass;
3083271        AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
3083272       AcceptedCmp5(ASC) Complain(ASC) DepVar(ASC) Education(ASC)
3083273       HigherEducationBinary(ASC) Marital_Status(ASC) _bin(DESC)
3083274    %mend DMDBClass;
3083275    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3083276    * Rule4: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: DMDBVar Macro ;
3083277    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3083278    %macro DMDBVar;
3083279        AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits MntGoldProds
3083280       MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
3083281       RMntFrq Recency Teenhome
3083282    %mend DMDBVar;
3083283    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083284    * Rule4: Create DMDB;
MPRINT(EM_DIAGRAM):   * Rule4: Create DMDB;
3083285    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083286    proc dmdb batch data=WORK.EM_DMREG
3083287    dmdbcat=WORK.Rule4_DMDB
3083288    maxlevel = 513
3083289    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Rule4_DMDB maxlevel =
513 ;
3083290    class %DMDBClass;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) Complain(ASC) DepVar(ASC) Education(ASC) HigherEducationBinary(ASC)
Marital_Status(ASC) _bin(DESC)
MPRINT(EM_DIAGRAM):  ;
3083291    var %DMDBVar;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits
MntGoldProds MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
3083292    target
3083293    _bin
3083294    ;
MPRINT(EM_DIAGRAM):   target _bin ;
3083295    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 2374   Memory used = 511K.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 2374 observations read from the data set WORK._TRAIN.
NOTE: There were 2374 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
3083296    quit;
3083297    *--- end code ---*;
 
3083298    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3083299    * Rule4: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Rule4: Run DMREG procedure;
3083300    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083301    proc dmreg data=EM_DMREG dmdbcat=WORK.Rule4_DMDB
3083302    validata = work._valid
3083303    outest = WORK.DMREG_04JTLRA_OUTEST
3083304    outterms = WORK.DMREG_04JTLRA_OUTTERMS
3083305    outmap= WORK.DMREG_04JTLRA_MAP namelen=200
3083306    ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Rule4_DMDB validata = work._valid
outest = WORK.DMREG_04JTLRA_OUTEST outterms = WORK.DMREG_04JTLRA_OUTTERMS outmap=
WORK.DMREG_04JTLRA_MAP namelen=200 ;
3083307    class
3083308    _bin
3083309    AcceptedCmp1
3083310    AcceptedCmp2
3083311    AcceptedCmp3
3083312    AcceptedCmp4
3083313    AcceptedCmp5
3083314    Complain
3083315    Education
3083316    HigherEducationBinary
3083317    Marital_Status
3083318    ;
MPRINT(EM_DIAGRAM):   class _bin AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4
AcceptedCmp5 Complain Education HigherEducationBinary Marital_Status ;
3083319    model _bin =
3083320    AcceptedCmp1
3083321    AcceptedCmp2
3083322    AcceptedCmp3
3083323    AcceptedCmp4
3083324    AcceptedCmp5
3083325    AcceptedCmpTotal
3083326    Age
3083327    Complain
3083328    Education
3083329    Frq
3083330    HigherEducationBinary
3083331    Income
3083332    Kidhome
3083333    Marital_Status
3083334    MntFishProducts
3083335    MntFruits
3083336    MntGoldProds
3083337    MntSweetProducts
3083338    MonthsAsCustomer
3083339    NumDealsPurchases
3083340    NumWebVisitsMonth
3083341    RFMstat
3083342    RMntFrq
3083343    Recency
3083344    Teenhome
3083345    /error=binomial link=LOGIT
3083346    coding=DEVIATION
3083347    nodesignprint
3083348    ;
MPRINT(EM_DIAGRAM):   model _bin = AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4
AcceptedCmp5 AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts MonthsAsCustomer
NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome /error=binomial
link=LOGIT coding=DEVIATION nodesignprint ;
3083349    ;
MPRINT(EM_DIAGRAM):   ;
3083350    score data=_train
3083351    out=_ptrain(label="")
3083352    ;
MPRINT(EM_DIAGRAM):   score data=_train out=_ptrain(label="") ;
3083353    score data=_valid
3083354    out=_pvalid(label="")
3083355    ;
MPRINT(EM_DIAGRAM):   score data=_valid out=_pvalid(label="") ;
3083356    code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
3083356  ! Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1.sas"
3083357    group=Rule4_1
3083358    ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1.sas" group=Rule4_1 ;
3083359    code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
3083359  ! Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1_res.sas"
3083360    group=Rule4_1
3083361    residual
3083362    ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1_res.sas" group=Rule4_1 residual ;
3083363    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _WARN_ already exists on file WORK._PTRAIN, using _WARN_2 instead.
NOTE: Variable _WARN_ already exists on file WORK._PVALID, using _WARN_2 instead.
 
NOTE: PROC DMREG is modeling the probability that _bin='1'.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1.sas opened.
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN1_res.sas opened.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.24 seconds
      cpu time            0.21 seconds
 
NOTE: There were 2374 observations read from the data set WORK._TRAIN.
NOTE: There were 2374 observations read from the data set WORK.EM_DMREG.
NOTE: There were 1018 observations read from the data set WORK._VALID.
NOTE: There were 2374 observations read from the data set WORK._TRAIN.
NOTE: There were 1018 observations read from the data set WORK._VALID.
NOTE: The data set WORK.DMREG_04JTLRA_OUTEST has 3 observations and 66 variables.
NOTE: The data set WORK.DMREG_04JTLRA_OUTTERMS has 32 observations and 6 variables.
NOTE: The data set WORK.DMREG_04JTLRA_MAP has 2 observations and 33 variables.
NOTE: The data set WORK._PTRAIN has 2374 observations and 69 variables.
NOTE: The data set WORK._PVALID has 1018 observations and 70 variables.
NOTE: The PROCEDURE DMREG printed pages 2790-2791.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           0.26 seconds
      cpu time            0.23 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
3083364    quit;
 
3083365    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
3083366    delete Rule4_DMDB;
MPRINT(EM_DIAGRAM):   delete Rule4_DMDB;
3083367    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.RULE4_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
3083368    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
3083369    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
3083370    delete Rule4_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Rule4_DMDB / memtype=catalog;
3083371    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.RULE4_DMDB (memtype=CATALOG).
3083372    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
 
3083373    * BINARY: Training Classification;
MPRINT(EM_DIAGRAM):    * BINARY: Training Classification;
3083374    ;
MPRINT(EM_DIAGRAM):   ;
3083375    proc freq data = _ptrain noprint;
MPRINT(EM_DIAGRAM):   proc freq data = _ptrain noprint;
3083376    tables F__bin * I__bin / out = _count;
MPRINT(EM_DIAGRAM):   tables F__bin * I__bin / out = _count;
3083377    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._COUNT has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3083378    data _count;
MPRINT(EM_DIAGRAM):   data _count;
3083379    set _count;
MPRINT(EM_DIAGRAM):   set _count;
3083380    label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_traincount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Train Count";
3083381    label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Train Percent";
3083382    label F__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label F__bin = "From";
3083383    label I__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label I__bin = "Into";
3083384    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 4 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   * BINARY: Validation Classification;
MPRINT(EM_DIAGRAM):   ;
3083385    * BINARY: Validation Classification;
3083386    ;
3083387    proc freq data = _pvalid noprint;
MPRINT(EM_DIAGRAM):   proc freq data = _pvalid noprint;
3083388    tables f__bin * i__bin / out=_vcount;
MPRINT(EM_DIAGRAM):   tables f__bin * i__bin / out=_vcount;
3083389    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VCOUNT has 4 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3083390    data _vcount;
MPRINT(EM_DIAGRAM):   data _vcount;
3083391    set _vcount;
MPRINT(EM_DIAGRAM):   set _vcount;
3083392    length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
3083393    label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_validcount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Valid Count";
3083394    label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_validpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Valid Percent";
3083395    label f__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label f__bin = "From";
3083396    label i__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label i__bin = "Into";
3083397    rename count = vcount;
MPRINT(EM_DIAGRAM):   rename count = vcount;
3083398    rename percent= vpercent;
MPRINT(EM_DIAGRAM):   rename percent= vpercent;
3083399    key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
3083400    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
3083401    *;
3083402    data _count;
MPRINT(EM_DIAGRAM):   data _count;
3083403    set _count;
MPRINT(EM_DIAGRAM):   set _count;
3083404    length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
3083405    key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
3083406    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 4 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   * Merge Train and Valid classification;
MPRINT(EM_DIAGRAM):   ;
3083407    * Merge Train and Valid classification;
3083408    ;
3083409    proc sort data=_count;
MPRINT(EM_DIAGRAM):   proc sort data=_count;
3083410    by key;
MPRINT(EM_DIAGRAM):   by key;
3083411    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3083412    proc sort data=_vcount;
MPRINT(EM_DIAGRAM):   proc sort data=_vcount;
3083413    by key;
MPRINT(EM_DIAGRAM):   by key;
3083414    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 4 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
3083415    *;
3083416    data _count;
MPRINT(EM_DIAGRAM):   data _count;
3083417    merge _count _vcount;
MPRINT(EM_DIAGRAM):   merge _count _vcount;
3083418    by key;
MPRINT(EM_DIAGRAM):   by key;
3083419    drop key;
MPRINT(EM_DIAGRAM):   drop key;
3083420    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: There were 4 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._COUNT has 4 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *BINARY: Print Classification;
MPRINT(EM_DIAGRAM):   ;
3083421    *BINARY: Print Classification;
3083422    ;
3083423    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_binmodel_title, NOQUOTE, DepVar,
3083423  ! %nrbquote(0)))";
MPRINT(EM_DIAGRAM):   title9 "Binary Model DepVar = 0";
3083424    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
3083425    proc print data = _count noobs label;
MPRINT(EM_DIAGRAM):   proc print data = _count noobs label;
3083426    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 4 observations read from the data set WORK._COUNT.
NOTE: The PROCEDURE PRINT printed page 2792.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3083427    title9;
MPRINT(EM_DIAGRAM):   title9;
3083428    title10;
MPRINT(EM_DIAGRAM):   title10;
3083429    * Extract misfit training values;
MPRINT(EM_DIAGRAM):    * Extract misfit training values;
3083430    ;
MPRINT(EM_DIAGRAM):   ;
3083431    data _ptrain;
MPRINT(EM_DIAGRAM):   data _ptrain;
3083432    set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
3083433    if not ( I__bin eq '1' and F__bin eq '1') then output;
MPRINT(EM_DIAGRAM):   if not ( I__bin eq '1' and F__bin eq '1') then output;
3083434    keep
3083435    AcceptedCmp1
3083436    AcceptedCmp2
3083437    AcceptedCmp3
3083438    AcceptedCmp4
3083439    AcceptedCmp5
3083440    AcceptedCmpTotal
3083441    Age
3083442    Complain
3083443    Education
3083444    Frq
3083445    HigherEducationBinary
3083446    Income
3083447    Kidhome
3083448    Marital_Status
3083449    MntFishProducts
3083450    MntFruits
3083451    MntGoldProds
3083452    MntSweetProducts
3083453    MonthsAsCustomer
3083454    NumDealsPurchases
3083455    NumWebVisitsMonth
3083456    RFMstat
3083457    RMntFrq
3083458    Recency
3083459    Teenhome
3083460    DepVar;
MPRINT(EM_DIAGRAM):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts MonthsAsCustomer
NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome DepVar;
3083461    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2374 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._PTRAIN has 417 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * Extract misfit validation values;
MPRINT(EM_DIAGRAM):   ;
3083462    * Extract misfit validation values;
3083463    ;
3083464    data _pvalid;
MPRINT(EM_DIAGRAM):   data _pvalid;
3083465    set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
3083466    if not (I__bin eq '1' and F__bin eq '1') then output;
MPRINT(EM_DIAGRAM):   if not (I__bin eq '1' and F__bin eq '1') then output;
3083467    keep
3083468    AcceptedCmp1
3083469    AcceptedCmp2
3083470    AcceptedCmp3
3083471    AcceptedCmp4
3083472    AcceptedCmp5
3083473    AcceptedCmpTotal
3083474    Age
3083475    Complain
3083476    Education
3083477    Frq
3083478    HigherEducationBinary
3083479    Income
3083480    Kidhome
3083481    Marital_Status
3083482    MntFishProducts
3083483    MntFruits
3083484    MntGoldProds
3083485    MntSweetProducts
3083486    MonthsAsCustomer
3083487    NumDealsPurchases
3083488    NumWebVisitsMonth
3083489    RFMstat
3083490    RMntFrq
3083491    Recency
3083492    Teenhome
3083493    DepVar;
MPRINT(EM_DIAGRAM):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts MonthsAsCustomer
NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome DepVar;
3083494    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1018 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._PVALID has 180 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3083495    * Create training data set with binary target for modeling;
MPRINT(EM_DIAGRAM):    * Create training data set with binary target for modeling;
3083496    ;
MPRINT(EM_DIAGRAM):   ;
3083497    data _ptrain;
MPRINT(EM_DIAGRAM):   data _ptrain;
3083498    length _bin $12;
MPRINT(EM_DIAGRAM):   length _bin $12;
3083499    set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
3083500    _tmp=putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp=putn(DepVar, 'best.');
3083501    %DMNORMIP(_tmp);
MPRINT(DMNORMIP):   call dmnorm(_tmp,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3083502    _tmpLevel = '1';
MPRINT(EM_DIAGRAM):   _tmpLevel = '1';
3083503    %DMNORMCP(_tmpLevel, _tmpLevel);
MPRINT(DMNORMCP):   _tmpLevel=dmnorm(_tmpLevel,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3083504    if _tmp eq _tmpLevel then _bin = '1';
MPRINT(EM_DIAGRAM):   if _tmp eq _tmpLevel then _bin = '1';
3083505    else _bin = '0';
MPRINT(EM_DIAGRAM):   else _bin = '0';
3083506    drop _tmp _tmpLevel
3083507    ;
MPRINT(EM_DIAGRAM):   drop _tmp _tmpLevel ;
3083508    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 417 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._PTRAIN has 417 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3083509    * Create validation data set with binary target for modeling;
MPRINT(EM_DIAGRAM):    * Create validation data set with binary target for modeling;
3083510    ;
MPRINT(EM_DIAGRAM):   ;
3083511    data _pvalid;
MPRINT(EM_DIAGRAM):   data _pvalid;
3083512    length _bin $12;
MPRINT(EM_DIAGRAM):   length _bin $12;
3083513    set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
3083514    _tmp = putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   _tmp = putn(DepVar, 'best.');
3083515    %DMNORMIP(_TMP);
MPRINT(DMNORMIP):   call dmnorm(_TMP,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3083516    _tmpLevel = '1';
MPRINT(EM_DIAGRAM):   _tmpLevel = '1';
3083517    %DMNORMCP(_tmpLevel, _tmpLevel);
MPRINT(DMNORMCP):   _tmpLevel=dmnorm(_tmpLevel,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3083518    if _tmp eq _tmpLevel then _bin = '1';
MPRINT(EM_DIAGRAM):   if _tmp eq _tmpLevel then _bin = '1';
3083519    else _bin = '0';
MPRINT(EM_DIAGRAM):   else _bin = '0';
3083520    drop _tmp
3083521    ;
MPRINT(EM_DIAGRAM):   drop _tmp ;
3083522    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 180 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._PVALID has 180 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3083523    data _train;
MPRINT(EM_DIAGRAM):    data _train;
3083524    set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
3083525    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 417 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._TRAIN has 417 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3083526    data _valid;
MPRINT(EM_DIAGRAM):   data _valid;
3083527    set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
3083528    options validvarname=any;
MPRINT(EM_DIAGRAM):   options validvarname=any;
3083529    proc contents data=work._train out=_tempAdvisor noprint;
 
NOTE: There were 180 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VALID has 180 observations and 28 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   proc contents data=work._train out=_tempAdvisor noprint;
3083530    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._TEMPADVISOR has 27 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3083531    options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
3083532    %let _dsidTable = 0;
3083533    %let _engineTable =;
3083534    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3083535    dsid = open('work._train');
MPRINT(EM_DIAGRAM):   dsid = open('work._train');
3083536    call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EM_DIAGRAM):   call symput('_dsidTable', strip(put(dsid, best.)));
3083537    if dsid then do;
MPRINT(EM_DIAGRAM):   if dsid then do;
3083538    call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
3083539    dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
3083540    end;
MPRINT(EM_DIAGRAM):   end;
3083541    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3083542    options fmterr;
MPRINT(EM_DIAGRAM):    options fmterr;
3083543    data _metaTestView;
MPRINT(EM_DIAGRAM):   data _metaTestView;
3083544    set work._train;
MPRINT(EM_DIAGRAM):   set work._train;
3083545    if _N_=1 then do;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
3083546    output;
MPRINT(EM_DIAGRAM):   output;
3083547    stop;
MPRINT(EM_DIAGRAM):   stop;
3083548    end;
MPRINT(EM_DIAGRAM):   end;
3083549    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TRAIN.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 27 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3083550    proc contents data=work._train
3083551    out=WORK.M3HJJ82Q noprint;
MPRINT(EM_DIAGRAM):    proc contents data=work._train out=WORK.M3HJJ82Q noprint;
3083552    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.M3HJJ82Q has 27 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3083553    data WORK.M3HJJ82Q;
MPRINT(EM_DIAGRAM):    data WORK.M3HJJ82Q;
3083554    length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $
3083554  !  9;
MPRINT(EM_DIAGRAM):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1
INDEXTYPE $ 9;
3083555    label NAME =;
MPRINT(EM_DIAGRAM):   label NAME =;
3083556    set WORK.M3HJJ82Q(keep=name type length label format formatl formatd informat
3083556  ! informl informd idxusage rename=(type=itype));
MPRINT(EM_DIAGRAM):   set WORK.M3HJJ82Q(keep=name type length label format formatl formatd
informat informl informd idxusage rename=(type=itype));
3083557    if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
3083558    else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
3083559    if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
3083560    if format ne ' ' then format = strip(format)!!strip(put(formatl,
3083560  ! best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
3083561    else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
3083562    end;
MPRINT(EM_DIAGRAM):   end;
3083563    else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
3083564    if informl > 0 then do;
MPRINT(EM_DIAGRAM):   if informl > 0 then do;
3083565    if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
3083565  ! best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
3083566    else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd,
best12.));
3083567    end;
MPRINT(EM_DIAGRAM):   end;
3083568    else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EM_DIAGRAM):   else if informat ne '' then informat = strip(informat)!!'.';
3083569    if idxusage = 'NONE' then index ="N";
MPRINT(EM_DIAGRAM):   if idxusage = 'NONE' then index ="N";
3083570    else index = "Y";
MPRINT(EM_DIAGRAM):   else index = "Y";
3083571    indextype = idxusage;
MPRINT(EM_DIAGRAM):   indextype = idxusage;
3083572    drop idxusage itype formatl formatd informl informd;
MPRINT(EM_DIAGRAM):   drop idxusage itype formatl formatd informl informd;
3083573    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.M3HJJ82Q.
NOTE: The data set WORK.M3HJJ82Q has 27 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3083574    data WORK.M3HJJ82Q;
MPRINT(EM_DIAGRAM):    data WORK.M3HJJ82Q;
3083575    length UNAME $64;
MPRINT(EM_DIAGRAM):   length UNAME $64;
3083576    set WORK.M3HJJ82Q;
MPRINT(EM_DIAGRAM):   set WORK.M3HJJ82Q;
3083577    UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
3083578    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.M3HJJ82Q.
NOTE: The data set WORK.M3HJJ82Q has 27 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M36U6WCM NOTHREADS;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
3083582    data WORK.M36U6WCM;
MPRINT(EM_DIAGRAM):    data WORK.M36U6WCM;
3083583    drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
3083584    set WORK.M36U6WCM;
MPRINT(EM_DIAGRAM):   set WORK.M36U6WCM;
3083585    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.M36U6WCM.
NOTE: The data set WORK.M36U6WCM has 27 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK.M3DNS37Y(keep=NAME ATTR);
MPRINT(EM_DIAGRAM):   length ATTR $ 20;
MPRINT(EM_DIAGRAM):   set WORK.M36U6WCM;
MPRINT(EM_DIAGRAM):   if level ne "INTERVAL" then do;
MPRINT(EM_DIAGRAM):   if order = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ORDER';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'FORMATTYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ROLE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'LEVEL';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if type = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'TYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if index = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'INDEX';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if report = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'REPORT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort NOTHREADS;
MPRINT(EM_DIAGRAM):   by attr;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M36U6WCM;
MPRINT(EM_DIAGRAM):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $
10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EM_DIAGRAM):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EM_DIAGRAM):   set WORK.M36U6WCM;
MPRINT(EM_DIAGRAM):   if formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
MPRINT(EM_DIAGRAM):   pos = indexc(format,'.1234567890');
MPRINT(EM_DIAGRAM):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EM_DIAGRAM):   else tempfmt = ' ';
MPRINT(EM_DIAGRAM):   flen = length(tempfmt);
MPRINT(EM_DIAGRAM):   select;
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype =
"TIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN"
"Z" "ZD")) formattype = "CODING";
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   formattype = "USER";
MPRINT(EM_DIAGRAM):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EM_DIAGRAM):   else if flen >= 4 then do;
MPRINT(EM_DIAGRAM):   str = substr(tempfmt,1,4);
MPRINT(EM_DIAGRAM):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EM_DIAGRAM):   else if str = "S370" then formattype = "CODING";
MPRINT(EM_DIAGRAM):   else if str = "BEST" then formattype = "NUM";
MPRINT(EM_DIAGRAM):   drop str;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop flen tempfmt pos;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   formatType = "CATEGORY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if formatType = "NUM" then do;
MPRINT(EM_DIAGRAM):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EM_DIAGRAM):   else formatType = "QUANTITY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level =
"NOMINAL";
MPRINT(EM_DIAGRAM):   else level = "INTERVAL";
MPRINT(EM_DIAGRAM):   levelAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else level = upcase(level);
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   length name_prefix $8 _uname $64;
MPRINT(EM_DIAGRAM):   drop name_prefix _uname _freqflag;
MPRINT(EM_DIAGRAM):   retain _freqflag;
MPRINT(EM_DIAGRAM):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EM_DIAGRAM):   _uname = upcase(NAME);
MPRINT(EM_DIAGRAM):   select(_uname);
MPRINT(EM_DIAGRAM):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_SEGMENT') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('_NODE_') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('URI') ROLE = 'URL';
MPRINT(EM_DIAGRAM):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'FREQ';
MPRINT(EM_DIAGRAM):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EM_DIAGRAM):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(_uname, 1, '_');
MPRINT(EM_DIAGRAM):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS',
'RAT') then ROLE = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix ='B' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI',
'IC') then ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR',
'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EM_DIAGRAM):   drop _found_ i;
MPRINT(EM_DIAGRAM):   _found_=0;
MPRINT(EM_DIAGRAM):   do i=1 to 19 until(_found_=1);
MPRINT(EM_DIAGRAM):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EM_DIAGRAM):   ROLE=_ROLE_{i};
MPRINT(EM_DIAGRAM):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   _found_=1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if length(_uname)>2 then do;
MPRINT(EM_DIAGRAM):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'ID';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EM_DIAGRAM):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EM_DIAGRAM):   else role = 'INPUT';
MPRINT(EM_DIAGRAM):   roleAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else role = upcase(role);
MPRINT(EM_DIAGRAM):   if REPORT = '' then REPORT = 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc dmdb data=work._train(obs=1000000) batch classOut=_DMDB2DEQFVR
maxLevel=22;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain DepVar Education Frq HigherEducationBinary Income Kidhome
Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts MonthsAsCustomer
NumDealsPurchases NumWebVisitsMonth Recency RFMstat RMntFrq Teenhome _bin
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc freq data=_DMDB2DEQFVR noprint;
MPRINT(EM_DIAGRAM):   table name / out=_DMDBCOUNT2DEQFVR(drop=percent rename=(count=NLEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _MISS2DEQFVR(rename=(frequency=NMISS));
MPRINT(EM_DIAGRAM):   set _DMDB2DEQFVR(where=(NRAW=. and CRAW=''));
MPRINT(EM_DIAGRAM):   keep name frequency;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_MISS2DEQFVR;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_DMDBCOUNT2DEQFVR;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _COUNTS2DEQFVR;
MPRINT(EM_DIAGRAM):   merge _DMDBCOUNT2DEQFVR _MISS2DEQFVR;
MPRINT(EM_DIAGRAM):   label NLEVEL= 'Number of Category';
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if NMISS > 0 then do;
MPRINT(EM_DIAGRAM):   NLEVEL= NLEVEL-1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else NMISS = 0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=_COUNTS2DEQFVR NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M36U6WCM NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.M36U6WCM;
MPRINT(EM_DIAGRAM):   length NLEVEL 8 nmiss 8;
MPRINT(EM_DIAGRAM):   update WORK.M36U6WCM _COUNTS2DEQFVR;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if name='' then name='_';
MPRINT(EM_DIAGRAM):   if levelAssigned and ROLE ne 'FREQ' then do;
MPRINT(EM_DIAGRAM):   select(NLEVEL);
MPRINT(EM_DIAGRAM):   when(.) do;
MPRINT(EM_DIAGRAM):   if type eq 'C' then level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when(0) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(1) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(2) level = 'BINARY';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if roleAssigned then do;
MPRINT(EM_DIAGRAM):   if level = 'NOMINAL' and NLEVEL > 20 then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Exceeds maximum number of levels cutoff";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = 'UNARY' and ROLE ne 'FREQ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   drop NLEVEL nmiss;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EM_DIAGRAM):   drop levelAssigned roleAssigned;
MPRINT(EM_DIAGRAM):   run;
3083870    data WORK.M2QD0RVS;
MPRINT(EM_DIAGRAM):    data WORK.M2QD0RVS;
3083871    set WORK.M2QD0RVS;
MPRINT(EM_DIAGRAM):   set WORK.M2QD0RVS;
3083872    if NAME='Element1' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element1' then delete;
3083873    if NAME='Element2' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element2' then delete;
3083874    if NAME='Element3' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element3' then delete;
3083875    if NAME='Element4' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element4' then delete;
3083876    if NAME='Group' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Group' then delete;
3083877    if NAME='Z_CostContact' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_CostContact' then delete;
3083878    if NAME='Z_Revenue' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_Revenue' then delete;
3083879    if NAME='_WARN_' then delete;
MPRINT(EM_DIAGRAM):   if NAME='_WARN_' then delete;
3083880    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.M2QD0RVS.
NOTE: The data set WORK.M2QD0RVS has 27 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3083881    data WORK.M0UFGNTO;
MPRINT(EM_DIAGRAM):    data WORK.M0UFGNTO;
3083882    set WORK.M0UFGNTO;
MPRINT(EM_DIAGRAM):   set WORK.M0UFGNTO;
3083883    if role='INPUT' and use='D' then use='Y';
MPRINT(EM_DIAGRAM):   if role='INPUT' and use='D' then use='Y';
3083884    if NAME='_bin' then do;
MPRINT(EM_DIAGRAM):   if NAME='_bin' then do;
3083885    ROLE='TARGET';
MPRINT(EM_DIAGRAM):   ROLE='TARGET';
3083886    LEVEL='BINARY';
MPRINT(EM_DIAGRAM):   LEVEL='BINARY';
3083887    USE='Y';
MPRINT(EM_DIAGRAM):   USE='Y';
3083888    end;
MPRINT(EM_DIAGRAM):   end;
3083889    if NAME='DepVar' then do;
MPRINT(EM_DIAGRAM):   if NAME='DepVar' then do;
3083890    ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   ROLE='REJECTED';
3083891    end;
MPRINT(EM_DIAGRAM):   end;
3083892    if NAME='Element1' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element1' then delete;
3083893    if NAME='Element2' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element2' then delete;
3083894    if NAME='Element3' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element3' then delete;
3083895    if NAME='Element4' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element4' then delete;
3083896    if NAME='Group' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Group' then delete;
3083897    if NAME='Z_CostContact' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_CostContact' then delete;
3083898    if NAME='Z_Revenue' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_Revenue' then delete;
3083899    if NAME='_WARN_' then delete;
MPRINT(EM_DIAGRAM):   if NAME='_WARN_' then delete;
3083900    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 28 observations read from the data set WORK.M0UFGNTO.
NOTE: The data set WORK.M0UFGNTO has 28 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3083901    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3083902    * Binary Model DepVar = 1;
MPRINT(EM_DIAGRAM):   * Binary Model DepVar = 1;
3083903    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083904    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083905    * REGRESSION MODEL DepVar binary BIN2;
MPRINT(EM_DIAGRAM):   * REGRESSION MODEL DepVar binary BIN2;
3083906    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083907    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083908    * Rule4: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Rule4: Create decision matrix;
3083909    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083910    data EM_DMREG / view=EM_DMREG;
MPRINT(EM_DIAGRAM):   data EM_DMREG / view=EM_DMREG;
3083911    set work._train(keep=
3083912    AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
3083913    AcceptedCmpTotal Age Complain DepVar Education Frq HigherEducationBinary Income
3083914    Kidhome Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts
3083915    MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency
3083916    Teenhome _bin);
MPRINT(EM_DIAGRAM):   set work._train(keep= AcceptedCmp1 AcceptedCmp2 AcceptedCmp3
AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain DepVar Education Frq
HigherEducationBinary Income Kidhome Marital_Status MntFishProducts MntFruits MntGoldProds
MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency
Teenhome _bin);
3083917    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA STEP view saved on file WORK.EM_DMREG.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Rule4: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3083918    *------------------------------------------------------------* ;
3083919    * Rule4: DMDBClass Macro ;
3083920    *------------------------------------------------------------* ;
3083921    %macro DMDBClass;
3083922        AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
3083923       AcceptedCmp5(ASC) Complain(ASC) DepVar(ASC) Education(ASC)
3083924       HigherEducationBinary(ASC) Marital_Status(ASC) _bin(DESC)
3083925    %mend DMDBClass;
3083926    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3083927    * Rule4: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: DMDBVar Macro ;
3083928    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3083929    %macro DMDBVar;
3083930        AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits MntGoldProds
3083931       MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
3083932       RMntFrq Recency Teenhome
3083933    %mend DMDBVar;
3083934    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083935    * Rule4: Create DMDB;
MPRINT(EM_DIAGRAM):   * Rule4: Create DMDB;
3083936    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083937    proc dmdb batch data=WORK.EM_DMREG
3083938    dmdbcat=WORK.Rule4_DMDB
3083939    maxlevel = 513
3083940    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_DMREG dmdbcat=WORK.Rule4_DMDB maxlevel =
513 ;
3083941    class %DMDBClass;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) Complain(ASC) DepVar(ASC) Education(ASC) HigherEducationBinary(ASC)
Marital_Status(ASC) _bin(DESC)
MPRINT(EM_DIAGRAM):  ;
3083942    var %DMDBVar;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits
MntGoldProds MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
3083943    target
3083944    _bin
3083945    ;
MPRINT(EM_DIAGRAM):   target _bin ;
3083946    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 417   Memory used = 511K.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.02 seconds
      cpu time            0.03 seconds
 
NOTE: There were 417 observations read from the data set WORK._TRAIN.
NOTE: There were 417 observations read from the data set WORK.EM_DMREG.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
3083947    quit;
3083948    *--- end code ---*;
 
3083949    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3083950    * Rule4: Run DMREG procedure;
MPRINT(EM_DIAGRAM):   * Rule4: Run DMREG procedure;
3083951    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3083952    proc dmreg data=EM_DMREG dmdbcat=WORK.Rule4_DMDB
3083953    validata = work._valid
3083954    outest = WORK.DMREG_2IRCTEX_OUTEST
3083955    outterms = WORK.DMREG_2IRCTEX_OUTTERMS
3083956    outmap= WORK.DMREG_2IRCTEX_MAP namelen=200
3083957    ;
MPRINT(EM_DIAGRAM):   proc dmreg data=EM_DMREG dmdbcat=WORK.Rule4_DMDB validata = work._valid
outest = WORK.DMREG_2IRCTEX_OUTEST outterms = WORK.DMREG_2IRCTEX_OUTTERMS outmap=
WORK.DMREG_2IRCTEX_MAP namelen=200 ;
3083958    class
3083959    _bin
3083960    AcceptedCmp1
3083961    AcceptedCmp2
3083962    AcceptedCmp3
3083963    AcceptedCmp4
3083964    AcceptedCmp5
3083965    Complain
3083966    Education
3083967    HigherEducationBinary
3083968    Marital_Status
3083969    ;
MPRINT(EM_DIAGRAM):   class _bin AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4
AcceptedCmp5 Complain Education HigherEducationBinary Marital_Status ;
3083970    model _bin =
3083971    AcceptedCmp1
3083972    AcceptedCmp2
3083973    AcceptedCmp3
3083974    AcceptedCmp4
3083975    AcceptedCmp5
3083976    AcceptedCmpTotal
3083977    Age
3083978    Complain
3083979    Education
3083980    Frq
3083981    HigherEducationBinary
3083982    Income
3083983    Kidhome
3083984    Marital_Status
3083985    MntFishProducts
3083986    MntFruits
3083987    MntGoldProds
3083988    MntSweetProducts
3083989    MonthsAsCustomer
3083990    NumDealsPurchases
3083991    NumWebVisitsMonth
3083992    RFMstat
3083993    RMntFrq
3083994    Recency
3083995    Teenhome
3083996    /error=binomial link=LOGIT
3083997    coding=DEVIATION
3083998    nodesignprint
3083999    ;
MPRINT(EM_DIAGRAM):   model _bin = AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4
AcceptedCmp5 AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts MonthsAsCustomer
NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome /error=binomial
link=LOGIT coding=DEVIATION nodesignprint ;
3084000    ;
MPRINT(EM_DIAGRAM):   ;
3084001    score data=_train
3084002    out=_ptrain(label="")
3084003    ;
MPRINT(EM_DIAGRAM):   score data=_train out=_ptrain(label="") ;
3084004    score data=_valid
3084005    out=_pvalid(label="")
3084006    ;
MPRINT(EM_DIAGRAM):   score data=_valid out=_pvalid(label="") ;
3084007    code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
3084007  ! Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2.sas"
3084008    group=Rule4_2
3084009    ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2.sas" group=Rule4_2 ;
3084010    code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
3084010  ! Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2_res.sas"
3084011    group=Rule4_2
3084012    residual
3084013    ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2_res.sas" group=Rule4_2 residual ;
3084014    run;
MPRINT(EM_DIAGRAM):   run;
 
 
NOTE: PROC DMREG is modeling the probability that _bin='1'.
NOTE: Convergence criterion (GCONV=1E-6) satisfied.
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2.sas opened.
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\BIN2_res.sas opened.
NOTE: View WORK.EM_DMREG.VIEW used (Total process time):
      real time           0.19 seconds
      cpu time            0.18 seconds
 
NOTE: There were 417 observations read from the data set WORK._TRAIN.
NOTE: There were 417 observations read from the data set WORK.EM_DMREG.
NOTE: There were 180 observations read from the data set WORK._VALID.
NOTE: There were 417 observations read from the data set WORK._TRAIN.
NOTE: There were 180 observations read from the data set WORK._VALID.
NOTE: The data set WORK.DMREG_2IRCTEX_OUTEST has 3 observations and 66 variables.
NOTE: The data set WORK.DMREG_2IRCTEX_OUTTERMS has 32 observations and 6 variables.
NOTE: The data set WORK.DMREG_2IRCTEX_MAP has 2 observations and 33 variables.
NOTE: The data set WORK._PTRAIN has 417 observations and 36 variables.
NOTE: The data set WORK._PVALID has 180 observations and 37 variables.
NOTE: The PROCEDURE DMREG printed pages 2793-2794.
NOTE: PROCEDURE DMREG used (Total process time):
      real time           0.21 seconds
      cpu time            0.21 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
3084015    quit;
 
3084016    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
3084017    delete Rule4_DMDB;
MPRINT(EM_DIAGRAM):   delete Rule4_DMDB;
3084018    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The file WORK.RULE4_DMDB (memtype=DATA) was not found, but appears on a DELETE statement.
3084019    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
3084020    proc datasets lib=WORK nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=WORK nolist;
3084021    delete Rule4_DMDB / memtype=catalog;
MPRINT(EM_DIAGRAM):   delete Rule4_DMDB / memtype=catalog;
3084022    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.RULE4_DMDB (memtype=CATALOG).
3084023    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
3084024    * BINARY: Training Classification;
MPRINT(EM_DIAGRAM):    * BINARY: Training Classification;
3084025    ;
MPRINT(EM_DIAGRAM):   ;
3084026    proc freq data = _ptrain noprint;
MPRINT(EM_DIAGRAM):   proc freq data = _ptrain noprint;
3084027    tables F__bin * I__bin / out = _count;
MPRINT(EM_DIAGRAM):   tables F__bin * I__bin / out = _count;
3084028    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 417 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._COUNT has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3084029    data _count;
MPRINT(EM_DIAGRAM):   data _count;
3084030    set _count;
MPRINT(EM_DIAGRAM):   set _count;
3084031    label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_traincount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Train Count";
3084032    label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Train Percent";
3084033    label F__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label F__bin = "From";
3084034    label I__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label I__bin = "Into";
3084035    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 3 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   * BINARY: Validation Classification;
MPRINT(EM_DIAGRAM):   ;
3084036    * BINARY: Validation Classification;
3084037    ;
3084038    proc freq data = _pvalid noprint;
MPRINT(EM_DIAGRAM):   proc freq data = _pvalid noprint;
3084039    tables f__bin * i__bin / out=_vcount;
MPRINT(EM_DIAGRAM):   tables f__bin * i__bin / out=_vcount;
3084040    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 180 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VCOUNT has 3 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3084041    data _vcount;
MPRINT(EM_DIAGRAM):   data _vcount;
3084042    set _vcount;
MPRINT(EM_DIAGRAM):   set _vcount;
3084043    length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
3084044    label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_validcount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Valid Count";
3084045    label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_validpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Valid Percent";
3084046    label f__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_from_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label f__bin = "From";
3084047    label i__bin = "%sysfunc(sasmsg(sashelp.dmine, rpt_into_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label i__bin = "Into";
3084048    rename count = vcount;
MPRINT(EM_DIAGRAM):   rename count = vcount;
3084049    rename percent= vpercent;
MPRINT(EM_DIAGRAM):   rename percent= vpercent;
3084050    key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
3084051    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 3 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
3084052    *;
3084053    data _count;
MPRINT(EM_DIAGRAM):   data _count;
3084054    set _count;
MPRINT(EM_DIAGRAM):   set _count;
3084055    length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
3084056    key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(f__bin) !! '_' !! ktrim(kleft(i__bin)));
3084057    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 3 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * Merge Train and Valid classification;
MPRINT(EM_DIAGRAM):   ;
3084058    * Merge Train and Valid classification;
3084059    ;
3084060    proc sort data=_count;
MPRINT(EM_DIAGRAM):   proc sort data=_count;
3084061    by key;
MPRINT(EM_DIAGRAM):   by key;
3084062    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3084063    proc sort data=_vcount;
MPRINT(EM_DIAGRAM):   proc sort data=_vcount;
3084064    by key;
MPRINT(EM_DIAGRAM):   by key;
3084065    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 3 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
3084066    *;
3084067    data _count;
MPRINT(EM_DIAGRAM):   data _count;
3084068    merge _count _vcount;
MPRINT(EM_DIAGRAM):   merge _count _vcount;
3084069    by key;
MPRINT(EM_DIAGRAM):   by key;
3084070    drop key;
MPRINT(EM_DIAGRAM):   drop key;
3084071    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: There were 3 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._COUNT has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *BINARY: Print Classification;
MPRINT(EM_DIAGRAM):   ;
3084072    *BINARY: Print Classification;
3084073    ;
3084074    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_binmodel_title, NOQUOTE, DepVar,
3084074  ! %nrbquote(1)))";
MPRINT(EM_DIAGRAM):   title9 "Binary Model DepVar = 1";
3084075    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
3084076    proc print data = _count noobs label;
MPRINT(EM_DIAGRAM):   proc print data = _count noobs label;
3084077    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: The PROCEDURE PRINT printed page 2795.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3084078    title9;
MPRINT(EM_DIAGRAM):   title9;
3084079    title10;
MPRINT(EM_DIAGRAM):   title10;
3084080    * Extract misfit training values;
MPRINT(EM_DIAGRAM):    * Extract misfit training values;
3084081    ;
MPRINT(EM_DIAGRAM):   ;
3084082    data _ptrain;
MPRINT(EM_DIAGRAM):   data _ptrain;
3084083    set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
3084084    if not ( I__bin eq '1' and F__bin eq '1') then output;
MPRINT(EM_DIAGRAM):   if not ( I__bin eq '1' and F__bin eq '1') then output;
3084085    keep
3084086    AcceptedCmp1
3084087    AcceptedCmp2
3084088    AcceptedCmp3
3084089    AcceptedCmp4
3084090    AcceptedCmp5
3084091    AcceptedCmpTotal
3084092    Age
3084093    Complain
3084094    Education
3084095    Frq
3084096    HigherEducationBinary
3084097    Income
3084098    Kidhome
3084099    Marital_Status
3084100    MntFishProducts
3084101    MntFruits
3084102    MntGoldProds
3084103    MntSweetProducts
3084104    MonthsAsCustomer
3084105    NumDealsPurchases
3084106    NumWebVisitsMonth
3084107    RFMstat
3084108    RMntFrq
3084109    Recency
3084110    Teenhome
3084111    DepVar;
MPRINT(EM_DIAGRAM):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts MonthsAsCustomer
NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome DepVar;
3084112    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 417 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._PTRAIN has 60 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   * Extract misfit validation values;
MPRINT(EM_DIAGRAM):   ;
3084113    * Extract misfit validation values;
3084114    ;
3084115    data _pvalid;
MPRINT(EM_DIAGRAM):   data _pvalid;
3084116    set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
3084117    if not (I__bin eq '1' and F__bin eq '1') then output;
MPRINT(EM_DIAGRAM):   if not (I__bin eq '1' and F__bin eq '1') then output;
3084118    keep
3084119    AcceptedCmp1
3084120    AcceptedCmp2
3084121    AcceptedCmp3
3084122    AcceptedCmp4
3084123    AcceptedCmp5
3084124    AcceptedCmpTotal
3084125    Age
3084126    Complain
3084127    Education
3084128    Frq
3084129    HigherEducationBinary
3084130    Income
3084131    Kidhome
3084132    Marital_Status
3084133    MntFishProducts
3084134    MntFruits
3084135    MntGoldProds
3084136    MntSweetProducts
3084137    MonthsAsCustomer
3084138    NumDealsPurchases
3084139    NumWebVisitsMonth
3084140    RFMstat
3084141    RMntFrq
3084142    Recency
3084143    Teenhome
3084144    DepVar;
MPRINT(EM_DIAGRAM):   keep AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain Education Frq HigherEducationBinary Income Kidhome
Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts MonthsAsCustomer
NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency Teenhome DepVar;
3084145    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 180 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._PVALID has 26 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3084146    data _train;
MPRINT(EM_DIAGRAM):    data _train;
3084147    set _ptrain;
MPRINT(EM_DIAGRAM):   set _ptrain;
3084148    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._TRAIN has 60 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3084149    data _valid;
MPRINT(EM_DIAGRAM):   data _valid;
3084150    set _pvalid;
MPRINT(EM_DIAGRAM):   set _pvalid;
3084151    options validvarname=any;
MPRINT(EM_DIAGRAM):   options validvarname=any;
3084152    proc contents data=work._train out=_tempAdvisor noprint;
 
NOTE: There were 26 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VALID has 26 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   proc contents data=work._train out=_tempAdvisor noprint;
3084153    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK._TEMPADVISOR has 26 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3084154    options validvarname=V7;
MPRINT(EM_DIAGRAM):   options validvarname=V7;
3084155    %let _dsidTable = 0;
3084156    %let _engineTable =;
3084157    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3084158    dsid = open('work._train');
MPRINT(EM_DIAGRAM):   dsid = open('work._train');
3084159    call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EM_DIAGRAM):   call symput('_dsidTable', strip(put(dsid, best.)));
3084160    if dsid then do;
MPRINT(EM_DIAGRAM):   if dsid then do;
3084161    call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EM_DIAGRAM):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
3084162    dsid = close(dsid);
MPRINT(EM_DIAGRAM):   dsid = close(dsid);
3084163    end;
MPRINT(EM_DIAGRAM):   end;
3084164    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3084165    options fmterr;
MPRINT(EM_DIAGRAM):    options fmterr;
3084166    data _metaTestView;
MPRINT(EM_DIAGRAM):   data _metaTestView;
3084167    set work._train;
MPRINT(EM_DIAGRAM):   set work._train;
3084168    if _N_=1 then do;
MPRINT(EM_DIAGRAM):   if _N_=1 then do;
3084169    output;
MPRINT(EM_DIAGRAM):   output;
3084170    stop;
MPRINT(EM_DIAGRAM):   stop;
3084171    end;
MPRINT(EM_DIAGRAM):   end;
3084172    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK._TRAIN.
NOTE: The data set WORK._METATESTVIEW has 1 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3084173    proc contents data=work._train
3084174    out=WORK.M38C4P91 noprint;
MPRINT(EM_DIAGRAM):    proc contents data=work._train out=WORK.M38C4P91 noprint;
3084175    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.M38C4P91 has 26 observations and 40 variables.
NOTE: PROCEDURE CONTENTS used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3084176    data WORK.M38C4P91;
MPRINT(EM_DIAGRAM):    data WORK.M38C4P91;
3084177    length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1 INDEXTYPE $
3084177  !  9;
MPRINT(EM_DIAGRAM):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 INDEX $ 1
INDEXTYPE $ 9;
3084178    label NAME =;
MPRINT(EM_DIAGRAM):   label NAME =;
3084179    set WORK.M38C4P91(keep=name type length label format formatl formatd informat
3084179  ! informl informd idxusage rename=(type=itype));
MPRINT(EM_DIAGRAM):   set WORK.M38C4P91(keep=name type length label format formatl formatd
informat informl informd idxusage rename=(type=itype));
3084180    if itype = 1 then type = 'N';
MPRINT(EM_DIAGRAM):   if itype = 1 then type = 'N';
3084181    else type = 'C';
MPRINT(EM_DIAGRAM):   else type = 'C';
3084182    if formatl > 0 then do;
MPRINT(EM_DIAGRAM):   if formatl > 0 then do;
3084183    if format ne ' ' then format = strip(format)!!strip(put(formatl,
3084183  ! best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
3084184    else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EM_DIAGRAM):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
3084185    end;
MPRINT(EM_DIAGRAM):   end;
3084186    else if format ne '' then format = strip(format)!!'.';
MPRINT(EM_DIAGRAM):   else if format ne '' then format = strip(format)!!'.';
3084187    if informl > 0 then do;
MPRINT(EM_DIAGRAM):   if informl > 0 then do;
3084188    if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
3084188  ! best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   if informat ne ' ' then informat = strip(informat)!!strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
3084189    else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EM_DIAGRAM):   else informat = strip(put(informl, best12.))!!'.'!!strip(put(informd,
best12.));
3084190    end;
MPRINT(EM_DIAGRAM):   end;
3084191    else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EM_DIAGRAM):   else if informat ne '' then informat = strip(informat)!!'.';
3084192    if idxusage = 'NONE' then index ="N";
MPRINT(EM_DIAGRAM):   if idxusage = 'NONE' then index ="N";
3084193    else index = "Y";
MPRINT(EM_DIAGRAM):   else index = "Y";
3084194    indextype = idxusage;
MPRINT(EM_DIAGRAM):   indextype = idxusage;
3084195    drop idxusage itype formatl formatd informl informd;
MPRINT(EM_DIAGRAM):   drop idxusage itype formatl formatd informl informd;
3084196    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK.M38C4P91.
NOTE: The data set WORK.M38C4P91 has 26 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3084197    data WORK.M38C4P91;
MPRINT(EM_DIAGRAM):    data WORK.M38C4P91;
3084198    length UNAME $64;
MPRINT(EM_DIAGRAM):   length UNAME $64;
3084199    set WORK.M38C4P91;
MPRINT(EM_DIAGRAM):   set WORK.M38C4P91;
3084200    UNAME = upcase(NAME);
MPRINT(EM_DIAGRAM):   UNAME = upcase(NAME);
3084201    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK.M38C4P91.
NOTE: The data set WORK.M38C4P91 has 26 observations and 9 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):    proc sort data=WORK.M2KIY45B NOTHREADS;
MPRINT(EM_DIAGRAM):   by UNAME;
MPRINT(EM_DIAGRAM):   run;
3084205    data WORK.M2KIY45B;
MPRINT(EM_DIAGRAM):    data WORK.M2KIY45B;
3084206    drop UNAME;
MPRINT(EM_DIAGRAM):   drop UNAME;
3084207    set WORK.M2KIY45B;
MPRINT(EM_DIAGRAM):   set WORK.M2KIY45B;
3084208    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK.M2KIY45B.
NOTE: The data set WORK.M2KIY45B has 26 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):    data WORK.M3CWHQQN(keep=NAME ATTR);
MPRINT(EM_DIAGRAM):   length ATTR $ 20;
MPRINT(EM_DIAGRAM):   set WORK.M2KIY45B;
MPRINT(EM_DIAGRAM):   if level ne "INTERVAL" then do;
MPRINT(EM_DIAGRAM):   if order = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ORDER';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'FORMATTYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'ROLE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'LEVEL';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if type = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'TYPE';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if index = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'INDEX';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if report = ' ' then do;
MPRINT(EM_DIAGRAM):   attr = 'REPORT';
MPRINT(EM_DIAGRAM):   output;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort NOTHREADS;
MPRINT(EM_DIAGRAM):   by attr;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.M2KIY45B;
MPRINT(EM_DIAGRAM):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 FORMATTYPE $
10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EM_DIAGRAM):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EM_DIAGRAM):   set WORK.M2KIY45B;
MPRINT(EM_DIAGRAM):   if formattype = ' ' then do;
MPRINT(EM_DIAGRAM):   if format ne ' ' then do;
MPRINT(EM_DIAGRAM):   if type = 'N' then do;
MPRINT(EM_DIAGRAM):   pos = indexc(format,'.1234567890');
MPRINT(EM_DIAGRAM):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EM_DIAGRAM):   else tempfmt = ' ';
MPRINT(EM_DIAGRAM):   flen = length(tempfmt);
MPRINT(EM_DIAGRAM):   select;
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EM_DIAGRAM):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) formattype =
"TIME";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EM_DIAGRAM):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" "SSN"
"Z" "ZD")) formattype = "CODING";
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   formattype = "USER";
MPRINT(EM_DIAGRAM):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EM_DIAGRAM):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EM_DIAGRAM):   else if flen >= 4 then do;
MPRINT(EM_DIAGRAM):   str = substr(tempfmt,1,4);
MPRINT(EM_DIAGRAM):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EM_DIAGRAM):   else if str = "S370" then formattype = "CODING";
MPRINT(EM_DIAGRAM):   else if str = "BEST" then formattype = "NUM";
MPRINT(EM_DIAGRAM):   drop str;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   drop flen tempfmt pos;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   formatType = "CATEGORY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if formatType = "NUM" then do;
MPRINT(EM_DIAGRAM):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EM_DIAGRAM):   else formatType = "QUANTITY";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = ' ' then do;
MPRINT(EM_DIAGRAM):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then level =
"NOMINAL";
MPRINT(EM_DIAGRAM):   else level = "INTERVAL";
MPRINT(EM_DIAGRAM):   levelAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else level = upcase(level);
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   length name_prefix $8 _uname $64;
MPRINT(EM_DIAGRAM):   drop name_prefix _uname _freqflag;
MPRINT(EM_DIAGRAM):   retain _freqflag;
MPRINT(EM_DIAGRAM):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EM_DIAGRAM):   _uname = upcase(NAME);
MPRINT(EM_DIAGRAM):   select(_uname);
MPRINT(EM_DIAGRAM):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_SEGMENT') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('_NODE_') do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   when('URI') ROLE = 'URL';
MPRINT(EM_DIAGRAM):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'REJECTED';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'FREQ';
MPRINT(EM_DIAGRAM):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EM_DIAGRAM):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   name_prefix = scan(_uname, 1, '_');
MPRINT(EM_DIAGRAM):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EM_DIAGRAM):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EM_DIAGRAM):   ROLE = 'CLASSIFICATION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EM_DIAGRAM):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 'RAS',
'RAT') then ROLE = 'RESIDUAL';
MPRINT(EM_DIAGRAM):   else if name_prefix ='D' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'DECISION';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix ='B' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'SEGMENT';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 'ROI',
'IC') then ROLE = 'ASSESS';
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   array _ROLE_ (19) $32 _TEMPORARY_ ('ASSESS','CLASSIFICATION','CENSOR',
'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EM_DIAGRAM):   drop _found_ i;
MPRINT(EM_DIAGRAM):   _found_=0;
MPRINT(EM_DIAGRAM):   do i=1 to 19 until(_found_=1);
MPRINT(EM_DIAGRAM):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EM_DIAGRAM):   ROLE=_ROLE_{i};
MPRINT(EM_DIAGRAM):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EM_DIAGRAM):   _found_=1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if length(_uname)>2 then do;
MPRINT(EM_DIAGRAM):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EM_DIAGRAM):   ROLE = 'ID';
MPRINT(EM_DIAGRAM):   LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EM_DIAGRAM):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if role = ' ' then do;
MPRINT(EM_DIAGRAM):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EM_DIAGRAM):   else role = 'INPUT';
MPRINT(EM_DIAGRAM):   roleAssigned = 1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else role = upcase(role);
MPRINT(EM_DIAGRAM):   if REPORT = '' then REPORT = 'N';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(HPDM_PERFORMANCE):  ;
PERFORMANCE  DETAILS
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    proc dmdb data=work._train(obs=1000000) batch classOut=_DMDB3CFSHB5
maxLevel=22;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
AcceptedCmpTotal Age Complain DepVar Education Frq HigherEducationBinary Income Kidhome
Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts MonthsAsCustomer
NumDealsPurchases NumWebVisitsMonth Recency RFMstat RMntFrq Teenhome
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc freq data=_DMDB3CFSHB5 noprint;
MPRINT(EM_DIAGRAM):   table name / out=_DMDBCOUNT3CFSHB5(drop=percent rename=(count=NLEVEL));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _MISS3CFSHB5(rename=(frequency=NMISS));
MPRINT(EM_DIAGRAM):   set _DMDB3CFSHB5(where=(NRAW=. and CRAW=''));
MPRINT(EM_DIAGRAM):   keep name frequency;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_MISS3CFSHB5;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_DMDBCOUNT3CFSHB5;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _COUNTS3CFSHB5;
MPRINT(EM_DIAGRAM):   merge _DMDBCOUNT3CFSHB5 _MISS3CFSHB5;
MPRINT(EM_DIAGRAM):   label NLEVEL= 'Number of Category';
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if NMISS > 0 then do;
MPRINT(EM_DIAGRAM):   NLEVEL= NLEVEL-1;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else NMISS = 0;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    proc sort data=_COUNTS3CFSHB5 NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.M2KIY45B NOTHREADS;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data WORK.M2KIY45B;
MPRINT(EM_DIAGRAM):   length NLEVEL 8 nmiss 8;
MPRINT(EM_DIAGRAM):   update WORK.M2KIY45B _COUNTS3CFSHB5;
MPRINT(EM_DIAGRAM):   by name;
MPRINT(EM_DIAGRAM):   if name='' then name='_';
MPRINT(EM_DIAGRAM):   if levelAssigned and ROLE ne 'FREQ' then do;
MPRINT(EM_DIAGRAM):   select(NLEVEL);
MPRINT(EM_DIAGRAM):   when(.) do;
MPRINT(EM_DIAGRAM):   if type eq 'C' then level = 'NOMINAL';
MPRINT(EM_DIAGRAM):   else level = 'INTERVAL';
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   when(0) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(1) level = 'UNARY';
MPRINT(EM_DIAGRAM):   when(2) level = 'BINARY';
MPRINT(EM_DIAGRAM):   otherwise do;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if roleAssigned then do;
MPRINT(EM_DIAGRAM):   if level = 'NOMINAL' and NLEVEL > 20 then do;
MPRINT(EM_DIAGRAM):   role = 'REJECTED';
MPRINT(EM_DIAGRAM):   comment = "Exceeds maximum number of levels cutoff";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   if level = 'UNARY' and ROLE ne 'FREQ' then role='REJECTED';
MPRINT(EM_DIAGRAM):   drop NLEVEL nmiss;
MPRINT(EM_DIAGRAM):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EM_DIAGRAM):   drop levelAssigned roleAssigned;
MPRINT(EM_DIAGRAM):   run;
3084493    title8 "%sysfunc(sasmsg(sashelp.dmine, rpt_clean_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):    title8 "Cleanup Model";
3084494    data WORK.M2QD0RVS;
MPRINT(EM_DIAGRAM):   data WORK.M2QD0RVS;
3084495    set WORK.M2QD0RVS;
MPRINT(EM_DIAGRAM):   set WORK.M2QD0RVS;
3084496    if NAME='Element1' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element1' then delete;
3084497    if NAME='Element2' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element2' then delete;
3084498    if NAME='Element3' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element3' then delete;
3084499    if NAME='Element4' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Element4' then delete;
3084500    if NAME='Group' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Group' then delete;
3084501    if NAME='Z_CostContact' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_CostContact' then delete;
3084502    if NAME='Z_Revenue' then delete;
MPRINT(EM_DIAGRAM):   if NAME='Z_Revenue' then delete;
3084503    if NAME='_WARN_' then delete;
MPRINT(EM_DIAGRAM):   if NAME='_WARN_' then delete;
3084504    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 27 observations read from the data set WORK.M2QD0RVS.
NOTE: The data set WORK.M2QD0RVS has 27 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3084505    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3084506    * Cleanup Model;
MPRINT(EM_DIAGRAM):   * Cleanup Model;
3084507    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084508    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084509    * NEURAL MODEL DepVar BINARY CM;
MPRINT(EM_DIAGRAM):   * NEURAL MODEL DepVar BINARY CM;
3084510    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084511    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084512    * Rule4: Create decision matrix;
MPRINT(EM_DIAGRAM):   * Rule4: Create decision matrix;
3084513    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084514    data EM_Rule4;
MPRINT(EM_DIAGRAM):   data EM_Rule4;
3084515    set work._train(keep=
3084516    AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5
3084517    AcceptedCmpTotal Age Complain DepVar Education Frq HigherEducationBinary Income
3084518    Kidhome Marital_Status MntFishProducts MntFruits MntGoldProds MntSweetProducts
3084519    MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency
3084520    Teenhome );
MPRINT(EM_DIAGRAM):   set work._train(keep= AcceptedCmp1 AcceptedCmp2 AcceptedCmp3
AcceptedCmp4 AcceptedCmp5 AcceptedCmpTotal Age Complain DepVar Education Frq
HigherEducationBinary Income Kidhome Marital_Status MntFishProducts MntFruits MntGoldProds
MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat RMntFrq Recency
Teenhome );
3084521    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set WORK._TRAIN.
NOTE: The data set WORK.EM_RULE4 has 60 observations and 26 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   * Rule4: DMDBClass Macro ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3084522    *------------------------------------------------------------* ;
3084523    * Rule4: DMDBClass Macro ;
3084524    *------------------------------------------------------------* ;
3084525    %macro DMDBClass;
3084526        AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
3084527       AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC)
3084528       HigherEducationBinary(ASC) Marital_Status(ASC)
3084529    %mend DMDBClass;
3084530    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3084531    * Rule4: DMDBVar Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: DMDBVar Macro ;
3084532    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3084533    %macro DMDBVar;
3084534        AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits MntGoldProds
3084535       MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
3084536       RMntFrq Recency Teenhome
3084537    %mend DMDBVar;
3084538    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084539    * Rule4: Create DMDB;
MPRINT(EM_DIAGRAM):   * Rule4: Create DMDB;
3084540    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084541    proc dmdb batch data=WORK.EM_Rule4
3084542    dmdbcat=WORK.Rule4_DMDB
3084543    maxlevel = 513
3084544    ;
MPRINT(EM_DIAGRAM):   proc dmdb batch data=WORK.EM_Rule4 dmdbcat=WORK.Rule4_DMDB maxlevel =
513 ;
3084545    class %DMDBClass;
MPRINT(EM_DIAGRAM):   class
MPRINT(DMDBCLASS):   AcceptedCmp1(ASC) AcceptedCmp2(ASC) AcceptedCmp3(ASC) AcceptedCmp4(ASC)
AcceptedCmp5(ASC) Complain(ASC) DepVar(DESC) Education(ASC) HigherEducationBinary(ASC)
Marital_Status(ASC)
MPRINT(EM_DIAGRAM):  ;
3084546    var %DMDBVar;
MPRINT(EM_DIAGRAM):   var
MPRINT(DMDBVAR):   AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits
MntGoldProds MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
MPRINT(EM_DIAGRAM):  ;
3084547    target
3084548    DepVar
3084549    ;
MPRINT(EM_DIAGRAM):   target DepVar ;
3084550    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Records processed = 60   Memory used = 511K.
NOTE: There were 60 observations read from the data set WORK.EM_RULE4.
NOTE: PROCEDURE DMDB used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
MPRINT(EM_DIAGRAM):   *--- end code ---*;
3084551    quit;
3084552    *--- end code ---*;
 
3084553    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------* ;
3084554    * Rule4: Interval Input Variables Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: Interval Input Variables Macro ;
3084555    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3084556    %macro INTINPUTS;
3084557        AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits MntGoldProds
3084558       MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
3084559       RMntFrq Recency Teenhome
3084560    %mend INTINPUTS;
3084561    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3084562    * Rule4: Binary Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: Binary Inputs Macro ;
3084563    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3084564    %macro BININPUTS;
3084565        AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
3084566       HigherEducationBinary
3084567    %mend BININPUTS;
3084568    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3084569    * Rule4: Nominal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: Nominal Inputs Macro ;
3084570    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3084571    %macro NOMINPUTS;
3084572        Education Marital_Status
3084573    %mend NOMINPUTS;
3084574    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3084575    * Rule4: Ordinal Inputs Macro ;
MPRINT(EM_DIAGRAM):   * Rule4: Ordinal Inputs Macro ;
3084576    *------------------------------------------------------------* ;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------* ;
3084577    %macro ORDINPUTS;
3084578
3084579    %mend ORDINPUTS;
3084580    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084581    * Neural Network Training;
MPRINT(EM_DIAGRAM):   * Neural Network Training;
3084582    ;
MPRINT(EM_DIAGRAM):   ;
3084583    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084584    proc neural data=EM_Rule4 dmdbcat=WORK.Rule4_DMDB
3084585    validdata = work._valid
3084586    random=12345
3084587    ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Rule4 dmdbcat=WORK.Rule4_DMDB validdata =
work._valid random=12345 ;
3084588    nloptions
3084589    noprint
3084590    ;
MPRINT(EM_DIAGRAM):   nloptions noprint ;
3084591    performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
3084592    netopts
3084593    decay=0;
MPRINT(EM_DIAGRAM):   netopts decay=0;
3084594    input %INTINPUTS / level=interval id=intvl
MPRINT(EM_DIAGRAM):   input
MPRINT(INTINPUTS):   AcceptedCmpTotal Age Frq Income Kidhome MntFishProducts MntFruits
MntGoldProds MntSweetProducts MonthsAsCustomer NumDealsPurchases NumWebVisitsMonth RFMstat
RMntFrq Recency Teenhome
3084595    ;
MPRINT(EM_DIAGRAM):   / level=interval id=intvl ;
3084596    input %BININPUTS / level=nominal id=bin
MPRINT(EM_DIAGRAM):   input
MPRINT(BININPUTS):   AcceptedCmp1 AcceptedCmp2 AcceptedCmp3 AcceptedCmp4 AcceptedCmp5 Complain
HigherEducationBinary
3084597    ;
MPRINT(EM_DIAGRAM):   / level=nominal id=bin ;
3084598    input %NOMINPUTS / level=nominal id=nom
MPRINT(EM_DIAGRAM):   input
MPRINT(NOMINPUTS):   Education Marital_Status
3084599    ;
MPRINT(EM_DIAGRAM):   / level=nominal id=nom ;
3084600    target DepVar / level=NOMINAL id=DepVar
3084601    bias
3084602    ;
MPRINT(EM_DIAGRAM):   target DepVar / level=NOMINAL id=DepVar bias ;
3084603    arch NRBFEQ
3084604    Hidden=3
3084605    ;
MPRINT(EM_DIAGRAM):   arch NRBFEQ Hidden=3 ;
3084606    Prelim 8 preiter=10
3084607    pretime=3600
3084608    Outest=WORK.PRELIMOUTEST_EMNEURAL_2AH2XVH
3084609    ;
MPRINT(EM_DIAGRAM):   Prelim 8 preiter=10 pretime=3600
Outest=WORK.PRELIMOUTEST_EMNEURAL_2AH2XVH ;
NOTE:  Synchronizing the objectives and the Solution.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: Convergence criterion (ABSCONV=0.0034350989) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: Convergence criterion (ABSCONV=0.0034350989) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: LEVMAR Optimization cannot be completed.
NOTE: LEVMAR needs more than 10 iterations or 2147483647 function calls.
NOTE: The data set WORK.PRELIMOUTEST_EMNEURAL_2AH2XVH has 17 observations and 109 variables.
3084610    save network=WORK.NETWORK.dm_neural;
MPRINT(EM_DIAGRAM):   save network=WORK.NETWORK.dm_neural;
NOTE: Entry WORK.NETWORK.DM_NEURAL has been opened.
NOTE: Entry WORK.NETWORK.DM_NEURAL has been closed.
3084611    train Maxiter=20
3084612    maxtime=14400
3084613    Outest=WORK.Rule4_outest estiter=1
3084614    Outfit=_rnfit
3084615    ;
MPRINT(EM_DIAGRAM):   train Maxiter=20 maxtime=14400 Outest=WORK.Rule4_outest estiter=1
Outfit=_rnfit ;
NOTE: Convergence criterion (ABSCONV=0.0034350989) satisfied.
NOTE: At least one element of the gradient is greater than 1e-3.
NOTE: The data set WORK.RULE4_OUTEST has 97 observations and 109 variables.
NOTE: The data set WORK._RNFIT has 4 observations and 36 variables.
3084616    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_RULE4 has 60 observations and 26 variables.
NOTE: The data set WORK._VALID has 26 observations and 26 variables.
NOTE: Closing the Neural Application.
NOTE: The PROCEDURE NEURAL printed page 2796.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.26 seconds
      cpu time            0.26 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
3084617    quit;
 
3084618    proc sort data=_rnfit(where=(_iter_ ne . and _NAME_="OVERALL")) out=fit_Rule4;
MPRINT(EM_DIAGRAM):    proc sort data=_rnfit(where=(_iter_ ne . and _NAME_="OVERALL"))
out=fit_Rule4;
3084619    by _VAVERR_;
MPRINT(EM_DIAGRAM):   by _VAVERR_;
3084620    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._RNFIT.
      WHERE (_iter_ not = .) and (_NAME_='OVERALL');
NOTE: The data set WORK.FIT_RULE4 has 2 observations and 36 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3084621    %GLOBAL ITER;
3084622    data _null_;
MPRINT(EM_DIAGRAM):   data _null_;
3084623    set fit_Rule4(obs=1);
MPRINT(EM_DIAGRAM):   set fit_Rule4(obs=1);
3084624    call symput('ITER',put(_ITER_, 6.));
MPRINT(EM_DIAGRAM):   call symput('ITER',put(_ITER_, 6.));
3084625    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.FIT_RULE4.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3084626    data WORK.INITIAL_EMNEURAL_2AH2XVH;
MPRINT(EM_DIAGRAM):   data WORK.INITIAL_EMNEURAL_2AH2XVH;
3084627    set WORK.Rule4_outest(where=(_ITER_ eq &ITER and _OBJ_ ne .));
MPRINT(EM_DIAGRAM):   set WORK.Rule4_outest(where=(_ITER_ eq 0 and _OBJ_ ne .));
3084628    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK.RULE4_OUTEST.
      WHERE (_ITER_=0) and (_OBJ_ not = .);
NOTE: The data set WORK.INITIAL_EMNEURAL_2AH2XVH has 2 observations and 109 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3084629    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3084630    * Neural Network Model Selection;
MPRINT(EM_DIAGRAM):   * Neural Network Model Selection;
3084631    ;
MPRINT(EM_DIAGRAM):   ;
3084632    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084633    proc neural data=EM_Rule4 dmdbcat=WORK.Rule4_DMDB
3084634    validdata = work._valid
3084635    network = WORK.NETWORK.dm_neural
3084636    random=12345
3084637    ;
MPRINT(EM_DIAGRAM):   proc neural data=EM_Rule4 dmdbcat=WORK.Rule4_DMDB validdata =
work._valid network = WORK.NETWORK.dm_neural random=12345 ;
NOTE: Entry WORK.NETWORK.DM_NEURAL has been opened.
NOTE: Entry WORK.NETWORK.DM_NEURAL has been closed.
3084638    nloptions noprint;
MPRINT(EM_DIAGRAM):   nloptions noprint;
3084639    performance alldetails noutilfile;
MPRINT(EM_DIAGRAM):   performance alldetails noutilfile;
3084640    initial inest=WORK.INITIAL_EMNEURAL_2AH2XVH;
MPRINT(EM_DIAGRAM):   initial inest=WORK.INITIAL_EMNEURAL_2AH2XVH;
NOTE: The data set WORK.INITIAL_EMNEURAL_2AH2XVH has 2 observations and 109 variables.
3084641    train tech=NONE;
MPRINT(EM_DIAGRAM):   train tech=NONE;
NOTE: No optimization performed.
3084642    code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
3084642  ! Files\_TD9752_WN7LF-LEAVE_\Prc2\CM.sas"
3084643    group=Rule4
3084644    ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\CM.sas" group=Rule4 ;
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\CM.sas opened.
3084645    ;
MPRINT(EM_DIAGRAM):   ;
3084646    code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
3084646  ! Files\_TD9752_WN7LF-LEAVE_\Prc2\CM_res.sas"
3084647    group=Rule4
3084648    residual
3084649    ;
MPRINT(EM_DIAGRAM):   code file="C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
Files\_TD9752_WN7LF-LEAVE_\Prc2\CM_res.sas" group=Rule4 residual ;
NOTE: External file C:\Users\LUKASF~1\AppData\Local\Temp\SAS Temporary
      Files\_TD9752_WN7LF-LEAVE_\Prc2\CM_res.sas opened.
3084650    ;
MPRINT(EM_DIAGRAM):   ;
3084651    score data=_train out=_ptrain
3084652    outkey=WORK.OUTKEY_EMNEURAL_2AH2XVH;
MPRINT(EM_DIAGRAM):   score data=_train out=_ptrain outkey=WORK.OUTKEY_EMNEURAL_2AH2XVH;
NOTE: The data set WORK.OUTKEY_EMNEURAL_2AH2XVH has 29 observations and 8 variables.
NOTE: The data set WORK._TRAIN has 60 observations and 26 variables.
NOTE: The data set WORK._PTRAIN has 60 observations and 55 variables.
3084653    score data=_valid out=_pvalid
3084654    outkey=WORK.OUTKEY_EMNEURAL_2AH2XVH;
MPRINT(EM_DIAGRAM):   score data=_valid out=_pvalid outkey=WORK.OUTKEY_EMNEURAL_2AH2XVH;
NOTE: The data set WORK.OUTKEY_EMNEURAL_2AH2XVH has 29 observations and 8 variables.
NOTE: The data set WORK._VALID has 26 observations and 26 variables.
NOTE: The data set WORK._PVALID has 26 observations and 55 variables.
3084655    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: The data set WORK.EM_RULE4 has 60 observations and 26 variables.
NOTE: The data set WORK._VALID has 26 observations and 26 variables.
NOTE: Closing the Neural Application.
NOTE: PROCEDURE NEURAL used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
3084656    quit;
3084657    data _rnest;
MPRINT(EM_DIAGRAM):   data _rnest;
3084658    set WORK.Rule4_outest;
MPRINT(EM_DIAGRAM):   set WORK.Rule4_outest;
3084659    if _type_ ^in('HESSIAN' 'GRAD');
MPRINT(EM_DIAGRAM):   if _type_ ^in('HESSIAN' 'GRAD');
3084660    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 97 observations read from the data set WORK.RULE4_OUTEST.
NOTE: The data set WORK._RNEST has 2 observations and 109 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3084661    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3084662    delete EM_Rule4;
MPRINT(EM_DIAGRAM):   delete EM_Rule4;
3084663    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.EM_RULE4 (memtype=DATA).
3084664    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
3084665    * CLEANUP: Training Classification;
MPRINT(EM_DIAGRAM):    * CLEANUP: Training Classification;
3084666    ;
MPRINT(EM_DIAGRAM):   ;
3084667    proc freq data= _ptrain noprint;
MPRINT(EM_DIAGRAM):   proc freq data= _ptrain noprint;
3084668    tables F_DepVar * I_DepVar / out = _count;
MPRINT(EM_DIAGRAM):   tables F_DepVar * I_DepVar / out = _count;
3084669    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 60 observations read from the data set WORK._PTRAIN.
NOTE: The data set WORK._COUNT has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.00 seconds
 
 
3084670    data _count;
MPRINT(EM_DIAGRAM):   data _count;
3084671    set _count;
MPRINT(EM_DIAGRAM):   set _count;
3084672    label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_traincount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Train Count";
3084673    label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_trainpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Train Percent";
3084674    label F_DepVar = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label F_DepVar = "Target";
3084675    label I_DepVar = "%sysfunc(sasmsg(sashelp.dmine, rpt_predict_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label I_DepVar = "Predict";
3084676    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 4 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * CLEANUP: Validation Classification;
MPRINT(EM_DIAGRAM):   ;
3084677    * CLEANUP: Validation Classification;
3084678    ;
3084679    proc freq data= _pvalid noprint;
MPRINT(EM_DIAGRAM):   proc freq data= _pvalid noprint;
3084680    tables F_DepVar * I_DepVar / out = _vcount;
MPRINT(EM_DIAGRAM):   tables F_DepVar * I_DepVar / out = _vcount;
3084681    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 26 observations read from the data set WORK._PVALID.
NOTE: The data set WORK._VCOUNT has 2 observations and 4 variables.
NOTE: PROCEDURE FREQ used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3084682    data _vcount;
MPRINT(EM_DIAGRAM):   data _vcount;
3084683    set _vcount;
MPRINT(EM_DIAGRAM):   set _vcount;
3084684    length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
3084685    label count = "%sysfunc(sasmsg(sashelp.dmine, rpt_validcount_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label count = "Valid Count";
3084686    label percent = "%sysfunc(sasmsg(sashelp.dmine, rpt_validpercent_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label percent = "Valid Percent";
3084687    label F_DepVar = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label F_DepVar = "Target";
3084688    label I_DepVar = "%sysfunc(sasmsg(sashelp.dmine, rpt_predict_vlabel, NOQUOTE))";
MPRINT(EM_DIAGRAM):   label I_DepVar = "Predict";
3084689    rename count = vcount;
MPRINT(EM_DIAGRAM):   rename count = vcount;
3084690    rename percent= vpercent;
MPRINT(EM_DIAGRAM):   rename percent= vpercent;
3084691    key = ktrim(kleft(F_DepVar) !! '_' !! ktrim(kleft(I_DepVar)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(F_DepVar) !! '_' !! ktrim(kleft(I_DepVar)));
3084692    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
3084693    *;
3084694    data _count;
MPRINT(EM_DIAGRAM):   data _count;
3084695    set _count;
MPRINT(EM_DIAGRAM):   set _count;
3084696    length key $64;
MPRINT(EM_DIAGRAM):   length key $64;
3084697    key = ktrim(kleft(F_DepVar) !!'_' !!ktrim(kleft(I_DepVar)));
MPRINT(EM_DIAGRAM):   key = ktrim(kleft(F_DepVar) !!'_' !!ktrim(kleft(I_DepVar)));
3084698    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 5 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * Merge Train and Valid classification;
MPRINT(EM_DIAGRAM):   ;
3084699    * Merge Train and Valid classification;
3084700    ;
3084701    proc sort data=_count;
MPRINT(EM_DIAGRAM):   proc sort data=_count;
3084702    by key;
MPRINT(EM_DIAGRAM):   by key;
3084703    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: The data set WORK._COUNT has 2 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3084704    proc sort data=_vcount;
MPRINT(EM_DIAGRAM):   proc sort data=_vcount;
3084705    by key;
MPRINT(EM_DIAGRAM):   by key;
3084706    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._VCOUNT has 2 observations and 5 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   *;
3084707    *;
3084708    data _count;
MPRINT(EM_DIAGRAM):   data _count;
3084709    merge _count _vcount;
MPRINT(EM_DIAGRAM):   merge _count _vcount;
3084710    by key;
MPRINT(EM_DIAGRAM):   by key;
3084711    drop key;
MPRINT(EM_DIAGRAM):   drop key;
3084712    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set WORK._COUNT.
NOTE: There were 2 observations read from the data set WORK._VCOUNT.
NOTE: The data set WORK._COUNT has 3 observations and 6 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   * CLEANUP: Print Classification;
MPRINT(EM_DIAGRAM):   ;
3084713    * CLEANUP: Print Classification;
3084714    ;
3084715    title9 "%sysfunc(sasmsg(sashelp.dmine, rpt_cleanup_title, NOQUOTE, DepVar))";
MPRINT(EM_DIAGRAM):   title9 "TARGET=DepVar : Cleanup Model";
3084716    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title, NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
3084717    proc print data = _count noobs label;
MPRINT(EM_DIAGRAM):   proc print data = _count noobs label;
3084718    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set WORK._COUNT.
NOTE: The PROCEDURE PRINT printed page 2797.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3084719    title9;
MPRINT(EM_DIAGRAM):   title9;
3084720    title10;
MPRINT(EM_DIAGRAM):   title10;
3084721    title8;
MPRINT(EM_DIAGRAM):    title8;
3084722    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):    proc datasets lib=work nolist;
3084723    delete _train;
MPRINT(EM_DIAGRAM):   delete _train;
3084724    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK._TRAIN (memtype=DATA).
3084725    proc datasets lib=work nolist;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3084726    delete _ptrain;
MPRINT(EM_DIAGRAM):   delete _ptrain;
3084727    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK._PTRAIN (memtype=DATA).
3084728    proc datasets lib=work nolist;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.07 seconds
 
 
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3084729    delete _valid;
MPRINT(EM_DIAGRAM):   delete _valid;
3084730    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK._VALID (memtype=DATA).
3084731    proc datasets lib=work nolist;
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3084732    delete _pvalid;
MPRINT(EM_DIAGRAM):   delete _pvalid;
3084733    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK._PVALID (memtype=DATA).
3084734    %makeResidualVars(target=DepVar, decmeta=EMWS8.Rule4_DepVar_DM , fref=#LN23426);
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.14 seconds
      cpu time            0.14 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.Rule4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ in('TARGET', 'FROM');
MPRINT(MAKERESIDUALVARS):   if _TYPE_='TARGET' then call symput('target_level', strip(LEVEL));
MPRINT(MAKERESIDUALVARS):   else call symput('from_var', strip(VARIABLE));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.RULE4_DEPVAR_DM.
      WHERE _TYPE_ in ('FROM', 'TARGET');
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.Rule4_DepVar_DM;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='PREDICTED';
MPRINT(MAKERESIDUALVARS):   call symput('pred_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.RULE4_DEPVAR_DM.
      WHERE _TYPE_='PREDICTED';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   set EMWS8.Rule4_DepVar_DM end=eof;
MPRINT(MAKERESIDUALVARS):   where _TYPE_ ='RESIDUAL';
MPRINT(MAKERESIDUALVARS):   call symput('res_vars'!!strip(put(_N_,BEST.)), strip(Variable));
MPRINT(MAKERESIDUALVARS):   call symput('res_labels'!!strip(put(_N_,BEST.)),
strip(tranwrd(LABEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   call symput('res_levels'!!strip(put(_N_,BEST.)),
strip(tranwrd(LEVEL,"'","''")));
MPRINT(MAKERESIDUALVARS):   if eof then call symput('numLevels', strip(put(_N_,BEST.)));
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.RULE4_DEPVAR_DM.
      WHERE _TYPE_='RESIDUAL';
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(MAKERESIDUALVARS):   data _null_;
MPRINT(MAKERESIDUALVARS):   file #LN23426;
MPRINT(MAKERESIDUALVARS):   put
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "*Computing Residual Vars: DepVar;";
MPRINT(MAKERESIDUALVARS):   put
"*------------------------------------------------------------*;";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar1='Residual: DepVar=1';";
MPRINT(MAKERESIDUALVARS):   put "Label R_DepVar0='Residual: DepVar=0';";
MPRINT(MAKERESIDUALVARS):   put "if ";
MPRINT(MAKERESIDUALVARS):   put " F_DepVar ne '1'";
MPRINT(MAKERESIDUALVARS):   put "and F_DepVar ne '0'";
MPRINT(MAKERESIDUALVARS):   put " then do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1=.;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0=.;";
MPRINT(MAKERESIDUALVARS):   put "end;";
MPRINT(MAKERESIDUALVARS):   put "else do;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar1= - P_DepVar1;";
MPRINT(MAKERESIDUALVARS):   put "R_DepVar0= - P_DepVar0;";
MPRINT(MAKERESIDUALVARS):   put "select(F_DepVar);";
MPRINT(MAKERESIDUALVARS):   put "when('1')R_DepVar1= R_DepVar1+1;";
MPRINT(MAKERESIDUALVARS):   put "when('0')R_DepVar0= R_DepVar0+1;";
MPRINT(MAKERESIDUALVARS):   put 'otherwise;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   put 'end;';
MPRINT(MAKERESIDUALVARS):   run;
 
NOTE: The file #LN23426 is:
      Filename=C:\\predictive-models-project\Workspaces\EMWS8\Rule4\RESIDUALCODE.sas,
      RECFM=V,LRECL=256,File Size (bytes)=0,
      Last Modified=28. April 2016 11.02 Uhr,
      Create Time=27. April 2016 21.27 Uhr
 
NOTE: 21 records were written to the file #LN23426.
      The minimum record length was 3.
      The maximum record length was 63.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):  ;
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.02 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                11.02 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O26U_69G
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMSCORE.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O26U_69G new;
MPRINT(EM_DIAGRAM):   run;
3084836    filename emflow
3084836  ! "C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rule4: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084837    *------------------------------------------------------------*;
3084838    * Rule4: Scoring DATA data;
3084839    *------------------------------------------------------------*;
3084840    data EMWS8.Rule4_TRAIN
3084841    / view=EMWS8.Rule4_TRAIN
3084842    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_TRAIN / view=EMWS8.Rule4_TRAIN ;
3084843    set EMWS8.Meta3_TRAIN
3084844    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_TRAIN ;
3084845    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMFLOWSCORE.sas.
3084846   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084847   +* Rule Induction Scoring Code;
MPRINT(EM_DIAGRAM):   * Rule Induction Scoring Code;
3084848   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084849   +length _bin $12 I__bin $12 I_DepVar $32;
MPRINT(EM_DIAGRAM):   length _bin $12 I__bin $12 I_DepVar $32;
3084850   +label I_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar';
3084851   +label F_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label F_DepVar = 'Into: DepVar';
3084852   +*;
MPRINT(EM_DIAGRAM):   *;
3084853   +drop I__bin;
MPRINT(EM_DIAGRAM):   drop I__bin;
3084854   +*;
MPRINT(EM_DIAGRAM):   *;
3084855   +F_DepVar=putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   F_DepVar=putn(DepVar, 'best.');
3084856   +%DMNORMIP(F_DepVar);
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3084857   +I_DepVar = '';
MPRINT(EM_DIAGRAM):   I_DepVar = '';
3084858   +I__bin= '0';
MPRINT(EM_DIAGRAM):   I__bin= '0';
3084859   +*;
MPRINT(EM_DIAGRAM):   *;
3084860   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084861   +* Null Model;
MPRINT(EM_DIAGRAM):   * Null Model;
3084862   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084863   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084864   +*Binary model for DepVar = 0;
MPRINT(EM_DIAGRAM):   *Binary model for DepVar = 0;
3084865   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3084866   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3084867   +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
3084868   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3084869   +
3084870   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
3084871   +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
3084872   +
3084873   +length I__bin $ 12;
MPRINT(EM_DIAGRAM):   length I__bin $ 12;
3084874   +label I__bin = 'Into: _bin' ;
MPRINT(EM_DIAGRAM):   label I__bin = 'Into: _bin' ;
3084875   +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
3084876   +array RULE4_1DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array RULE4_1DRF [2] $12 _temporary_ ('1' '0' );
3084877   +label U__bin = 'Unnormalized Into: _bin' ;
MPRINT(EM_DIAGRAM):   label U__bin = 'Unnormalized Into: _bin' ;
3084878   +length U__bin $ 12;
MPRINT(EM_DIAGRAM):   length U__bin $ 12;
3084879   +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
3084880   +array RULE4_1DRU[2] $ 12 _temporary_ ('1           '  '0           ' );
MPRINT(EM_DIAGRAM):   array RULE4_1DRU[2] $ 12 _temporary_ ('1           ' '0           ' );
3084881   +
3084882   +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
3084883   +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
3084884   +
3084885   +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
3084886   +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
3084887   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084888   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084889   +end;
MPRINT(EM_DIAGRAM):   end;
3084890   +
3084891   +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
3084892   +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
3084893   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084894   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084895   +end;
MPRINT(EM_DIAGRAM):   end;
3084896   +
3084897   +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
3084898   +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
3084899   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084900   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084901   +end;
MPRINT(EM_DIAGRAM):   end;
3084902   +
3084903   +*** Check Kidhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Kidhome for missing values ;
3084904   +if missing( Kidhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Kidhome ) then do;
3084905   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084906   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084907   +end;
MPRINT(EM_DIAGRAM):   end;
3084908   +
3084909   +*** Check MntFishProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFishProducts for missing values ;
3084910   +if missing( MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFishProducts ) then do;
3084911   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084912   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084913   +end;
MPRINT(EM_DIAGRAM):   end;
3084914   +
3084915   +*** Check MntFruits for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFruits for missing values ;
3084916   +if missing( MntFruits ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFruits ) then do;
3084917   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084918   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084919   +end;
MPRINT(EM_DIAGRAM):   end;
3084920   +
3084921   +*** Check MntGoldProds for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntGoldProds for missing values ;
3084922   +if missing( MntGoldProds ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntGoldProds ) then do;
3084923   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084924   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084925   +end;
MPRINT(EM_DIAGRAM):   end;
3084926   +
3084927   +*** Check MntSweetProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntSweetProducts for missing values ;
3084928   +if missing( MntSweetProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntSweetProducts ) then do;
3084929   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084930   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084931   +end;
MPRINT(EM_DIAGRAM):   end;
3084932   +
3084933   +*** Check MonthsAsCustomer for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MonthsAsCustomer for missing values ;
3084934   +if missing( MonthsAsCustomer ) then do;
MPRINT(EM_DIAGRAM):   if missing( MonthsAsCustomer ) then do;
3084935   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084936   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084937   +end;
MPRINT(EM_DIAGRAM):   end;
3084938   +
3084939   +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
3084940   +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
3084941   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084942   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084943   +end;
MPRINT(EM_DIAGRAM):   end;
3084944   +
3084945   +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
3084946   +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
3084947   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084948   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084949   +end;
MPRINT(EM_DIAGRAM):   end;
3084950   +
3084951   +*** Check RFMstat for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RFMstat for missing values ;
3084952   +if missing( RFMstat ) then do;
MPRINT(EM_DIAGRAM):   if missing( RFMstat ) then do;
3084953   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084954   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084955   +end;
MPRINT(EM_DIAGRAM):   end;
3084956   +
3084957   +*** Check RMntFrq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RMntFrq for missing values ;
3084958   +if missing( RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( RMntFrq ) then do;
3084959   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084960   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084961   +end;
MPRINT(EM_DIAGRAM):   end;
3084962   +
3084963   +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
3084964   +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
3084965   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084966   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084967   +end;
MPRINT(EM_DIAGRAM):   end;
3084968   +
3084969   +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
3084970   +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
3084971   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084972   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084973   +end;
MPRINT(EM_DIAGRAM):   end;
3084974   +
3084975   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
3084976   +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
3084977   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
3084978   +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
3084979   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3084980   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084981   +end;
MPRINT(EM_DIAGRAM):   end;
3084982   +else do;
MPRINT(EM_DIAGRAM):   else do;
3084983   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3084984   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
3084985   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3084986   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3084987   +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
3084988   +   end;
MPRINT(EM_DIAGRAM):   end;
3084989   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3084990   +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
3084991   +   end;
MPRINT(EM_DIAGRAM):   end;
3084992   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3084993   +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
3084994   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3084995   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3084996   +   end;
MPRINT(EM_DIAGRAM):   end;
3084997   +end;
MPRINT(EM_DIAGRAM):   end;
3084998   +
3084999   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
3085000   +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
3085001   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
3085002   +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
3085003   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085004   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085005   +end;
MPRINT(EM_DIAGRAM):   end;
3085006   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085007   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085008   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
3085009   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085010   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085011   +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
3085012   +   end;
MPRINT(EM_DIAGRAM):   end;
3085013   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085014   +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
3085015   +   end;
MPRINT(EM_DIAGRAM):   end;
3085016   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085017   +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
3085018   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085019   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085020   +   end;
MPRINT(EM_DIAGRAM):   end;
3085021   +end;
MPRINT(EM_DIAGRAM):   end;
3085022   +
3085023   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
3085024   +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
3085025   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
3085026   +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
3085027   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085028   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085029   +end;
MPRINT(EM_DIAGRAM):   end;
3085030   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085031   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085032   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
3085033   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085034   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085035   +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
3085036   +   end;
MPRINT(EM_DIAGRAM):   end;
3085037   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085038   +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
3085039   +   end;
MPRINT(EM_DIAGRAM):   end;
3085040   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085041   +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
3085042   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085043   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085044   +   end;
MPRINT(EM_DIAGRAM):   end;
3085045   +end;
MPRINT(EM_DIAGRAM):   end;
3085046   +
3085047   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
3085048   +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
3085049   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
3085050   +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
3085051   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085052   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085053   +end;
MPRINT(EM_DIAGRAM):   end;
3085054   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085055   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085056   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
3085057   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085058   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085059   +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
3085060   +   end;
MPRINT(EM_DIAGRAM):   end;
3085061   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085062   +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
3085063   +   end;
MPRINT(EM_DIAGRAM):   end;
3085064   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085065   +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
3085066   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085067   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085068   +   end;
MPRINT(EM_DIAGRAM):   end;
3085069   +end;
MPRINT(EM_DIAGRAM):   end;
3085070   +
3085071   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
3085072   +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
3085073   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
3085074   +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
3085075   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085076   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085077   +end;
MPRINT(EM_DIAGRAM):   end;
3085078   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085079   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085080   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
3085081   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085082   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085083   +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
3085084   +   end;
MPRINT(EM_DIAGRAM):   end;
3085085   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085086   +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
3085087   +   end;
MPRINT(EM_DIAGRAM):   end;
3085088   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085089   +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
3085090   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085091   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085092   +   end;
MPRINT(EM_DIAGRAM):   end;
3085093   +end;
MPRINT(EM_DIAGRAM):   end;
3085094   +
3085095   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
3085096   +drop _6_0 ;
MPRINT(EM_DIAGRAM):   drop _6_0 ;
3085097   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
3085098   +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
3085099   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085100   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085101   +end;
MPRINT(EM_DIAGRAM):   end;
3085102   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085103   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085104   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
3085105   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085106   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085107   +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
3085108   +   end;
MPRINT(EM_DIAGRAM):   end;
3085109   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085110   +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
3085111   +   end;
MPRINT(EM_DIAGRAM):   end;
3085112   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085113   +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
3085114   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085115   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085116   +   end;
MPRINT(EM_DIAGRAM):   end;
3085117   +end;
MPRINT(EM_DIAGRAM):   end;
3085118   +
3085119   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
3085120   +drop _7_0 _7_1 _7_2 _7_3 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 _7_2 _7_3 ;
3085121   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
3085122   +_7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
3085123   +_7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
3085124   +_7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
3085125   +_7_3 = 0;
MPRINT(EM_DIAGRAM):   _7_3 = 0;
3085126   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
3085127   +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
3085128   +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
3085129   +   _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
3085130   +   _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
3085131   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085132   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085133   +end;
MPRINT(EM_DIAGRAM):   end;
3085134   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085135   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
3085136   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
3085137   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085138   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
3085139   +      _7_2 = 1;
MPRINT(EM_DIAGRAM):   _7_2 = 1;
3085140   +   end;
MPRINT(EM_DIAGRAM):   end;
3085141   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
3085142   +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
3085143   +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
3085144   +      _7_2 = -1;
MPRINT(EM_DIAGRAM):   _7_2 = -1;
3085145   +      _7_3 = -1;
MPRINT(EM_DIAGRAM):   _7_3 = -1;
3085146   +   end;
MPRINT(EM_DIAGRAM):   end;
3085147   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
3085148   +      _7_3 = 1;
MPRINT(EM_DIAGRAM):   _7_3 = 1;
3085149   +   end;
MPRINT(EM_DIAGRAM):   end;
3085150   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
3085151   +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
3085152   +   end;
MPRINT(EM_DIAGRAM):   end;
3085153   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
3085154   +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
3085155   +   end;
MPRINT(EM_DIAGRAM):   end;
3085156   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085157   +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
3085158   +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
3085159   +      _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
3085160   +      _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
3085161   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085162   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085163   +   end;
MPRINT(EM_DIAGRAM):   end;
3085164   +end;
MPRINT(EM_DIAGRAM):   end;
3085165   +
3085166   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
3085167   +drop _9_0 _9_1 _9_2 _9_3 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 ;
3085168   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
3085169   +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
3085170   +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
3085171   +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
3085172   +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
3085173   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
3085174   +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
3085175   +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
3085176   +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
3085177   +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
3085178   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085179   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085180   +end;
MPRINT(EM_DIAGRAM):   end;
3085181   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085182   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
3085183   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
3085184   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085185   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
3085186   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
3085187   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
3085188   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
3085189   +            _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
3085190   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3085191   +         end;
MPRINT(EM_DIAGRAM):   end;
3085192   +         else do;
MPRINT(EM_DIAGRAM):   else do;
3085193   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
3085194   +               _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
3085195   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3085196   +            end;
MPRINT(EM_DIAGRAM):   end;
3085197   +         end;
MPRINT(EM_DIAGRAM):   end;
3085198   +      end;
MPRINT(EM_DIAGRAM):   end;
3085199   +      else do;
MPRINT(EM_DIAGRAM):   else do;
3085200   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
3085201   +            _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
3085202   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3085203   +         end;
MPRINT(EM_DIAGRAM):   end;
3085204   +      end;
MPRINT(EM_DIAGRAM):   end;
3085205   +   end;
MPRINT(EM_DIAGRAM):   end;
3085206   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085207   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
3085208   +         _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
3085209   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3085210   +      end;
MPRINT(EM_DIAGRAM):   end;
3085211   +      else do;
MPRINT(EM_DIAGRAM):   else do;
3085212   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
3085213   +            _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
3085214   +            _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
3085215   +            _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
3085216   +            _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
3085217   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3085218   +         end;
MPRINT(EM_DIAGRAM):   end;
3085219   +      end;
MPRINT(EM_DIAGRAM):   end;
3085220   +   end;
MPRINT(EM_DIAGRAM):   end;
3085221   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
3085222   +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
3085223   +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
3085224   +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
3085225   +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
3085226   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085227   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085228   +   end;
MPRINT(EM_DIAGRAM):   end;
3085229   +end;
MPRINT(EM_DIAGRAM):   end;
3085230   +
3085231   +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
3085232   +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
3085233   +   _P0 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P0 = 0.848778433;
3085234   +   _P1 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P1 = 0.151221567;
3085235   +   goto RULE4_1DR1;
MPRINT(EM_DIAGRAM):   goto RULE4_1DR1;
3085236   +end;
MPRINT(EM_DIAGRAM):   end;
3085237   +
3085238   +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
3085239   +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
3085240   +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
3085241   +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
3085242   +
3085243   +***  Effect: AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp1 ;
3085244   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085245   +_LP0 = _LP0 + (    0.97418552471108) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.97418552471108) * _TEMP * _1_0;
3085246   +
3085247   +***  Effect: AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp2 ;
3085248   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085249   +_LP0 = _LP0 + (    0.68156741676811) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.68156741676811) * _TEMP * _2_0;
3085250   +
3085251   +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
3085252   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085253   +_LP0 = _LP0 + (    1.32848439989106) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.32848439989106) * _TEMP * _3_0;
3085254   +
3085255   +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
3085256   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085257   +_LP0 = _LP0 + (    0.53311779107273) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53311779107273) * _TEMP * _4_0;
3085258   +
3085259   +***  Effect: AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp5 ;
3085260   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085261   +_LP0 = _LP0 + (    0.95118474053675) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.95118474053675) * _TEMP * _5_0;
3085262   +
3085263   +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
3085264   +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
3085265   +_LP0 = _LP0 + (    0.01979462562675 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01979462562675 * _TEMP);
3085266   +
3085267   +***  Effect: Complain ;
MPRINT(EM_DIAGRAM):   *** Effect: Complain ;
3085268   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085269   +_LP0 = _LP0 + (   -0.54041637411203) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.54041637411203) * _TEMP * _6_0;
3085270   +
3085271   +***  Effect: Education ;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
3085272   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085273   +_LP0 = _LP0 + (   -0.09757703065208) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09757703065208) * _TEMP * _7_0;
3085274   +_LP0 = _LP0 + (    0.10550056008301) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.10550056008301) * _TEMP * _7_1;
3085275   +_LP0 = _LP0 + (   -0.31683916083951) * _TEMP * _7_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31683916083951) * _TEMP * _7_2;
3085276   +_LP0 = _LP0 + (    0.23324682796678) * _TEMP * _7_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.23324682796678) * _TEMP * _7_3;
3085277   +
3085278   +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
3085279   +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
3085280   +_LP0 = _LP0 + (    0.06627503591699 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06627503591699 * _TEMP);
3085281   +
3085282   +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
3085283   +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
3085284   +_LP0 = _LP0 + (   -0.00004901079751 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00004901079751 * _TEMP);
3085285   +
3085286   +***  Effect: Kidhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Kidhome ;
3085287   +_TEMP = Kidhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Kidhome ;
3085288   +_LP0 = _LP0 + (    0.19312294408187 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19312294408187 * _TEMP);
3085289   +
3085290   +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
3085291   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085292   +_LP0 = _LP0 + (   -0.24578027352194) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.24578027352194) * _TEMP * _9_0;
3085293   +_LP0 = _LP0 + (    0.70193582579037) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.70193582579037) * _TEMP * _9_1;
3085294   +_LP0 = _LP0 + (    -0.4511231588711) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4511231588711) * _TEMP * _9_2;
3085295   +_LP0 = _LP0 + (    0.77973690767148) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.77973690767148) * _TEMP * _9_3;
3085296   +
3085297   +***  Effect: MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFishProducts ;
3085298   +_TEMP = MntFishProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFishProducts ;
3085299   +_LP0 = _LP0 + (    0.00049956522901 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00049956522901 * _TEMP);
3085300   +
3085301   +***  Effect: MntFruits ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFruits ;
3085302   +_TEMP = MntFruits ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFruits ;
3085303   +_LP0 = _LP0 + (    0.00396176260942 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00396176260942 * _TEMP);
3085304   +
3085305   +***  Effect: MntGoldProds ;
MPRINT(EM_DIAGRAM):   *** Effect: MntGoldProds ;
3085306   +_TEMP = MntGoldProds ;
MPRINT(EM_DIAGRAM):   _TEMP = MntGoldProds ;
3085307   +_LP0 = _LP0 + (   -0.00056979316437 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00056979316437 * _TEMP);
3085308   +
3085309   +***  Effect: MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntSweetProducts ;
3085310   +_TEMP = MntSweetProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntSweetProducts ;
3085311   +_LP0 = _LP0 + (    0.00409766321973 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00409766321973 * _TEMP);
3085312   +
3085313   +***  Effect: MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   *** Effect: MonthsAsCustomer ;
3085314   +_TEMP = MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   _TEMP = MonthsAsCustomer ;
3085315   +_LP0 = _LP0 + (    -0.0065808574528 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0065808574528 * _TEMP);
3085316   +
3085317   +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
3085318   +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
3085319   +_LP0 = _LP0 + (   -0.41504533192296 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.41504533192296 * _TEMP);
3085320   +
3085321   +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
3085322   +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
3085323   +_LP0 = _LP0 + (   -0.27734369181934 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27734369181934 * _TEMP);
3085324   +
3085325   +***  Effect: RFMstat ;
MPRINT(EM_DIAGRAM):   *** Effect: RFMstat ;
3085326   +_TEMP = RFMstat ;
MPRINT(EM_DIAGRAM):   _TEMP = RFMstat ;
3085327   +_LP0 = _LP0 + (   -0.00011005920443 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00011005920443 * _TEMP);
3085328   +
3085329   +***  Effect: RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: RMntFrq ;
3085330   +_TEMP = RMntFrq ;
MPRINT(EM_DIAGRAM):   _TEMP = RMntFrq ;
3085331   +_LP0 = _LP0 + (   -0.01158011947691 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01158011947691 * _TEMP);
3085332   +
3085333   +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
3085334   +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
3085335   +_LP0 = _LP0 + (    0.06167776080023 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06167776080023 * _TEMP);
3085336   +
3085337   +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
3085338   +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
3085339   +_LP0 = _LP0 + (    1.44620738686244 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.44620738686244 * _TEMP);
3085340   +
3085341   +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
3085342   +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
3085343   +_TEMP =    -0.03523097804062 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.03523097804062 + _LP0;
3085344   +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
3085345   +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
3085346   +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
3085347   +end;
MPRINT(EM_DIAGRAM):   end;
3085348   +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
3085349   +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
3085350   +
3085351   +RULE4_1DR1:
3085352   +
3085353   +
3085354   +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   RULE4_1DR1: *** Posterior Probabilities and Predicted Level;
3085355   +label P__bin1 = 'Predicted: _bin=1' ;
MPRINT(EM_DIAGRAM):   label P__bin1 = 'Predicted: _bin=1' ;
3085356   +label P__bin0 = 'Predicted: _bin=0' ;
MPRINT(EM_DIAGRAM):   label P__bin0 = 'Predicted: _bin=0' ;
3085357   +P__bin1 = _P0;
MPRINT(EM_DIAGRAM):   P__bin1 = _P0;
3085358   +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
3085359   +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
3085360   +P__bin0 = _P1;
MPRINT(EM_DIAGRAM):   P__bin0 = _P1;
3085361   +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
3085362   +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
3085363   +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
3085364   +end;
MPRINT(EM_DIAGRAM):   end;
3085365   +I__bin = RULE4_1DRF[_IY];
MPRINT(EM_DIAGRAM):   I__bin = RULE4_1DRF[_IY];
3085366   +U__bin = RULE4_1DRU[_IY];
MPRINT(EM_DIAGRAM):   U__bin = RULE4_1DRU[_IY];
3085367   +
3085368   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3085369   +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
3085370   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3085371   +*;
MPRINT(EM_DIAGRAM):   *;
3085372   +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3085373   +if I__bin eq '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin eq '1' then do;
3085374   +I_DepVar = ("0");
MPRINT(EM_DIAGRAM):   I_DepVar = ("0");
3085375   +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3085376   +P_DepVar0=P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar0=P__bin1;
3085377   +P_DepVar1 = 1-P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1-P__bin1;
3085378   +end;
MPRINT(EM_DIAGRAM):   end;
3085379   +*;
MPRINT(EM_DIAGRAM):   *;
3085380   +*;
MPRINT(EM_DIAGRAM):   *;
3085381   +* END Binary Model for DepVar = 0;
MPRINT(EM_DIAGRAM):   * END Binary Model for DepVar = 0;
3085382   +;
MPRINT(EM_DIAGRAM):   ;
3085383   +*;
MPRINT(EM_DIAGRAM):   *;
3085384   +DROP P__bin1 P__bin0;
MPRINT(EM_DIAGRAM):   DROP P__bin1 P__bin0;
3085385   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085386   +*Binary model for DepVar = 1;
MPRINT(EM_DIAGRAM):   *Binary model for DepVar = 1;
3085387   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085388   +*;
MPRINT(EM_DIAGRAM):   *;
3085389   +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3085390   +if I__bin ne '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin ne '1' then do;
3085391   +*;
MPRINT(EM_DIAGRAM):   *;
3085392   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3085393   +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
3085394   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3085395   +
3085396   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
3085397   +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
3085398   +
3085399   +length I__bin $ 12;
MPRINT(EM_DIAGRAM):   length I__bin $ 12;
3085400   +label I__bin = 'Into: _bin' ;
MPRINT(EM_DIAGRAM):   label I__bin = 'Into: _bin' ;
3085401   +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
3085402   +array RULE4_2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array RULE4_2DRF [2] $12 _temporary_ ('1' '0' );
3085403   +label U__bin = 'Unnormalized Into: _bin' ;
MPRINT(EM_DIAGRAM):   label U__bin = 'Unnormalized Into: _bin' ;
3085404   +length U__bin $ 12;
MPRINT(EM_DIAGRAM):   length U__bin $ 12;
3085405   +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
3085406   +array RULE4_2DRU[2] $ 12 _temporary_ ('1           '  '0           ' );
MPRINT(EM_DIAGRAM):   array RULE4_2DRU[2] $ 12 _temporary_ ('1           ' '0           ' );
3085407   +
3085408   +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
3085409   +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
3085410   +
3085411   +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
3085412   +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
3085413   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085414   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085415   +end;
MPRINT(EM_DIAGRAM):   end;
3085416   +
3085417   +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
3085418   +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
3085419   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085420   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085421   +end;
MPRINT(EM_DIAGRAM):   end;
3085422   +
3085423   +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
3085424   +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
3085425   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085426   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085427   +end;
MPRINT(EM_DIAGRAM):   end;
3085428   +
3085429   +*** Check Kidhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Kidhome for missing values ;
3085430   +if missing( Kidhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Kidhome ) then do;
3085431   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085432   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085433   +end;
MPRINT(EM_DIAGRAM):   end;
3085434   +
3085435   +*** Check MntFishProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFishProducts for missing values ;
3085436   +if missing( MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFishProducts ) then do;
3085437   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085438   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085439   +end;
MPRINT(EM_DIAGRAM):   end;
3085440   +
3085441   +*** Check MntFruits for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFruits for missing values ;
3085442   +if missing( MntFruits ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFruits ) then do;
3085443   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085444   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085445   +end;
MPRINT(EM_DIAGRAM):   end;
3085446   +
3085447   +*** Check MntGoldProds for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntGoldProds for missing values ;
3085448   +if missing( MntGoldProds ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntGoldProds ) then do;
3085449   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085450   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085451   +end;
MPRINT(EM_DIAGRAM):   end;
3085452   +
3085453   +*** Check MntSweetProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntSweetProducts for missing values ;
3085454   +if missing( MntSweetProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntSweetProducts ) then do;
3085455   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085456   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085457   +end;
MPRINT(EM_DIAGRAM):   end;
3085458   +
3085459   +*** Check MonthsAsCustomer for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MonthsAsCustomer for missing values ;
3085460   +if missing( MonthsAsCustomer ) then do;
MPRINT(EM_DIAGRAM):   if missing( MonthsAsCustomer ) then do;
3085461   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085462   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085463   +end;
MPRINT(EM_DIAGRAM):   end;
3085464   +
3085465   +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
3085466   +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
3085467   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085468   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085469   +end;
MPRINT(EM_DIAGRAM):   end;
3085470   +
3085471   +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
3085472   +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
3085473   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085474   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085475   +end;
MPRINT(EM_DIAGRAM):   end;
3085476   +
3085477   +*** Check RFMstat for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RFMstat for missing values ;
3085478   +if missing( RFMstat ) then do;
MPRINT(EM_DIAGRAM):   if missing( RFMstat ) then do;
3085479   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085480   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085481   +end;
MPRINT(EM_DIAGRAM):   end;
3085482   +
3085483   +*** Check RMntFrq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RMntFrq for missing values ;
3085484   +if missing( RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( RMntFrq ) then do;
3085485   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085486   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085487   +end;
MPRINT(EM_DIAGRAM):   end;
3085488   +
3085489   +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
3085490   +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
3085491   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085492   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085493   +end;
MPRINT(EM_DIAGRAM):   end;
3085494   +
3085495   +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
3085496   +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
3085497   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085498   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085499   +end;
MPRINT(EM_DIAGRAM):   end;
3085500   +
3085501   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
3085502   +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
3085503   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
3085504   +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
3085505   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085506   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085507   +end;
MPRINT(EM_DIAGRAM):   end;
3085508   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085509   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085510   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
3085511   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085512   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085513   +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
3085514   +   end;
MPRINT(EM_DIAGRAM):   end;
3085515   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085516   +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
3085517   +   end;
MPRINT(EM_DIAGRAM):   end;
3085518   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085519   +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
3085520   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085521   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085522   +   end;
MPRINT(EM_DIAGRAM):   end;
3085523   +end;
MPRINT(EM_DIAGRAM):   end;
3085524   +
3085525   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
3085526   +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
3085527   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
3085528   +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
3085529   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085530   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085531   +end;
MPRINT(EM_DIAGRAM):   end;
3085532   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085533   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085534   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
3085535   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085536   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085537   +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
3085538   +   end;
MPRINT(EM_DIAGRAM):   end;
3085539   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085540   +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
3085541   +   end;
MPRINT(EM_DIAGRAM):   end;
3085542   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085543   +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
3085544   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085545   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085546   +   end;
MPRINT(EM_DIAGRAM):   end;
3085547   +end;
MPRINT(EM_DIAGRAM):   end;
3085548   +
3085549   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
3085550   +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
3085551   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
3085552   +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
3085553   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085554   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085555   +end;
MPRINT(EM_DIAGRAM):   end;
3085556   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085557   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085558   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
3085559   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085560   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085561   +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
3085562   +   end;
MPRINT(EM_DIAGRAM):   end;
3085563   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085564   +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
3085565   +   end;
MPRINT(EM_DIAGRAM):   end;
3085566   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085567   +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
3085568   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085569   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085570   +   end;
MPRINT(EM_DIAGRAM):   end;
3085571   +end;
MPRINT(EM_DIAGRAM):   end;
3085572   +
3085573   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
3085574   +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
3085575   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
3085576   +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
3085577   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085578   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085579   +end;
MPRINT(EM_DIAGRAM):   end;
3085580   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085581   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085582   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
3085583   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085584   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085585   +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
3085586   +   end;
MPRINT(EM_DIAGRAM):   end;
3085587   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085588   +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
3085589   +   end;
MPRINT(EM_DIAGRAM):   end;
3085590   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085591   +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
3085592   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085593   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085594   +   end;
MPRINT(EM_DIAGRAM):   end;
3085595   +end;
MPRINT(EM_DIAGRAM):   end;
3085596   +
3085597   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
3085598   +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
3085599   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
3085600   +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
3085601   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085602   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085603   +end;
MPRINT(EM_DIAGRAM):   end;
3085604   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085605   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085606   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
3085607   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085608   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085609   +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
3085610   +   end;
MPRINT(EM_DIAGRAM):   end;
3085611   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085612   +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
3085613   +   end;
MPRINT(EM_DIAGRAM):   end;
3085614   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085615   +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
3085616   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085617   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085618   +   end;
MPRINT(EM_DIAGRAM):   end;
3085619   +end;
MPRINT(EM_DIAGRAM):   end;
3085620   +
3085621   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
3085622   +drop _6_0 ;
MPRINT(EM_DIAGRAM):   drop _6_0 ;
3085623   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
3085624   +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
3085625   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085626   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085627   +end;
MPRINT(EM_DIAGRAM):   end;
3085628   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085629   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3085630   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
3085631   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085632   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3085633   +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
3085634   +   end;
MPRINT(EM_DIAGRAM):   end;
3085635   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3085636   +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
3085637   +   end;
MPRINT(EM_DIAGRAM):   end;
3085638   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085639   +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
3085640   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085641   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085642   +   end;
MPRINT(EM_DIAGRAM):   end;
3085643   +end;
MPRINT(EM_DIAGRAM):   end;
3085644   +
3085645   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
3085646   +drop _7_0 _7_1 _7_2 _7_3 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 _7_2 _7_3 ;
3085647   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
3085648   +_7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
3085649   +_7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
3085650   +_7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
3085651   +_7_3 = 0;
MPRINT(EM_DIAGRAM):   _7_3 = 0;
3085652   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
3085653   +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
3085654   +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
3085655   +   _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
3085656   +   _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
3085657   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085658   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085659   +end;
MPRINT(EM_DIAGRAM):   end;
3085660   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085661   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
3085662   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
3085663   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085664   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
3085665   +      _7_2 = 1;
MPRINT(EM_DIAGRAM):   _7_2 = 1;
3085666   +   end;
MPRINT(EM_DIAGRAM):   end;
3085667   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
3085668   +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
3085669   +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
3085670   +      _7_2 = -1;
MPRINT(EM_DIAGRAM):   _7_2 = -1;
3085671   +      _7_3 = -1;
MPRINT(EM_DIAGRAM):   _7_3 = -1;
3085672   +   end;
MPRINT(EM_DIAGRAM):   end;
3085673   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
3085674   +      _7_3 = 1;
MPRINT(EM_DIAGRAM):   _7_3 = 1;
3085675   +   end;
MPRINT(EM_DIAGRAM):   end;
3085676   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
3085677   +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
3085678   +   end;
MPRINT(EM_DIAGRAM):   end;
3085679   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
3085680   +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
3085681   +   end;
MPRINT(EM_DIAGRAM):   end;
3085682   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085683   +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
3085684   +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
3085685   +      _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
3085686   +      _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
3085687   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085688   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085689   +   end;
MPRINT(EM_DIAGRAM):   end;
3085690   +end;
MPRINT(EM_DIAGRAM):   end;
3085691   +
3085692   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
3085693   +drop _9_0 _9_1 _9_2 _9_3 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 ;
3085694   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
3085695   +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
3085696   +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
3085697   +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
3085698   +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
3085699   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
3085700   +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
3085701   +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
3085702   +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
3085703   +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
3085704   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3085705   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085706   +end;
MPRINT(EM_DIAGRAM):   end;
3085707   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085708   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
3085709   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
3085710   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3085711   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
3085712   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
3085713   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
3085714   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
3085715   +            _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
3085716   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3085717   +         end;
MPRINT(EM_DIAGRAM):   end;
3085718   +         else do;
MPRINT(EM_DIAGRAM):   else do;
3085719   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
3085720   +               _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
3085721   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3085722   +            end;
MPRINT(EM_DIAGRAM):   end;
3085723   +         end;
MPRINT(EM_DIAGRAM):   end;
3085724   +      end;
MPRINT(EM_DIAGRAM):   end;
3085725   +      else do;
MPRINT(EM_DIAGRAM):   else do;
3085726   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
3085727   +            _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
3085728   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3085729   +         end;
MPRINT(EM_DIAGRAM):   end;
3085730   +      end;
MPRINT(EM_DIAGRAM):   end;
3085731   +   end;
MPRINT(EM_DIAGRAM):   end;
3085732   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3085733   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
3085734   +         _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
3085735   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3085736   +      end;
MPRINT(EM_DIAGRAM):   end;
3085737   +      else do;
MPRINT(EM_DIAGRAM):   else do;
3085738   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
3085739   +            _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
3085740   +            _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
3085741   +            _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
3085742   +            _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
3085743   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3085744   +         end;
MPRINT(EM_DIAGRAM):   end;
3085745   +      end;
MPRINT(EM_DIAGRAM):   end;
3085746   +   end;
MPRINT(EM_DIAGRAM):   end;
3085747   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
3085748   +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
3085749   +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
3085750   +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
3085751   +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
3085752   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3085753   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3085754   +   end;
MPRINT(EM_DIAGRAM):   end;
3085755   +end;
MPRINT(EM_DIAGRAM):   end;
3085756   +
3085757   +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
3085758   +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
3085759   +   _P0 = 0.860911271;
MPRINT(EM_DIAGRAM):   _P0 = 0.860911271;
3085760   +   _P1 = 0.139088729;
MPRINT(EM_DIAGRAM):   _P1 = 0.139088729;
3085761   +   goto RULE4_2DR1;
MPRINT(EM_DIAGRAM):   goto RULE4_2DR1;
3085762   +end;
MPRINT(EM_DIAGRAM):   end;
3085763   +
3085764   +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
3085765   +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
3085766   +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
3085767   +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
3085768   +
3085769   +***  Effect: AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp1 ;
3085770   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085771   +_LP0 = _LP0 + (   -0.16890678844078) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16890678844078) * _TEMP * _1_0;
3085772   +
3085773   +***  Effect: AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp2 ;
3085774   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085775   +_LP0 = _LP0 + (   -0.03354787759567) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03354787759567) * _TEMP * _2_0;
3085776   +
3085777   +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
3085778   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085779   +_LP0 = _LP0 + (    0.05226834720161) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.05226834720161) * _TEMP * _3_0;
3085780   +
3085781   +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
3085782   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085783   +_LP0 = _LP0 + (   -0.05614277968589) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05614277968589) * _TEMP * _4_0;
3085784   +
3085785   +***  Effect: AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp5 ;
3085786   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085787   +_LP0 = _LP0 + (    0.28035826890341) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28035826890341) * _TEMP * _5_0;
3085788   +
3085789   +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
3085790   +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
3085791   +_LP0 = _LP0 + (   -0.00331888161595 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00331888161595 * _TEMP);
3085792   +
3085793   +***  Effect: Complain ;
MPRINT(EM_DIAGRAM):   *** Effect: Complain ;
3085794   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085795   +_LP0 = _LP0 + (    0.41932661341097) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.41932661341097) * _TEMP * _6_0;
3085796   +
3085797   +***  Effect: Education ;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
3085798   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085799   +_LP0 = _LP0 + (   -1.94148642567409) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.94148642567409) * _TEMP * _7_0;
3085800   +_LP0 = _LP0 + (    7.04331964927999) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 7.04331964927999) * _TEMP * _7_1;
3085801   +_LP0 = _LP0 + (   -1.84653459246083) * _TEMP * _7_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.84653459246083) * _TEMP * _7_2;
3085802   +_LP0 = _LP0 + (   -1.72829661845225) * _TEMP * _7_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.72829661845225) * _TEMP * _7_3;
3085803   +
3085804   +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
3085805   +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
3085806   +_LP0 = _LP0 + (    0.00727087817719 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00727087817719 * _TEMP);
3085807   +
3085808   +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
3085809   +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
3085810   +_LP0 = _LP0 + (   -0.00003549313241 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00003549313241 * _TEMP);
3085811   +
3085812   +***  Effect: Kidhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Kidhome ;
3085813   +_TEMP = Kidhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Kidhome ;
3085814   +_LP0 = _LP0 + (   -0.71347762563628 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.71347762563628 * _TEMP);
3085815   +
3085816   +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
3085817   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3085818   +_LP0 = _LP0 + (    0.62230545564027) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.62230545564027) * _TEMP * _9_0;
3085819   +_LP0 = _LP0 + (     0.0812166675529) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0812166675529) * _TEMP * _9_1;
3085820   +_LP0 = _LP0 + (   -0.22016205695017) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.22016205695017) * _TEMP * _9_2;
3085821   +_LP0 = _LP0 + (   -0.27129885515911) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27129885515911) * _TEMP * _9_3;
3085822   +
3085823   +***  Effect: MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFishProducts ;
3085824   +_TEMP = MntFishProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFishProducts ;
3085825   +_LP0 = _LP0 + (    0.00043874339286 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00043874339286 * _TEMP);
3085826   +
3085827   +***  Effect: MntFruits ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFruits ;
3085828   +_TEMP = MntFruits ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFruits ;
3085829   +_LP0 = _LP0 + (   -0.00080533081632 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00080533081632 * _TEMP);
3085830   +
3085831   +***  Effect: MntGoldProds ;
MPRINT(EM_DIAGRAM):   *** Effect: MntGoldProds ;
3085832   +_TEMP = MntGoldProds ;
MPRINT(EM_DIAGRAM):   _TEMP = MntGoldProds ;
3085833   +_LP0 = _LP0 + (   -0.00010944243681 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00010944243681 * _TEMP);
3085834   +
3085835   +***  Effect: MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntSweetProducts ;
3085836   +_TEMP = MntSweetProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntSweetProducts ;
3085837   +_LP0 = _LP0 + (   -0.00082832116638 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00082832116638 * _TEMP);
3085838   +
3085839   +***  Effect: MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   *** Effect: MonthsAsCustomer ;
3085840   +_TEMP = MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   _TEMP = MonthsAsCustomer ;
3085841   +_LP0 = _LP0 + (    0.01256221882265 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01256221882265 * _TEMP);
3085842   +
3085843   +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
3085844   +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
3085845   +_LP0 = _LP0 + (   -0.11670159812232 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.11670159812232 * _TEMP);
3085846   +
3085847   +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
3085848   +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
3085849   +_LP0 = _LP0 + (   -0.23476706905643 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.23476706905643 * _TEMP);
3085850   +
3085851   +***  Effect: RFMstat ;
MPRINT(EM_DIAGRAM):   *** Effect: RFMstat ;
3085852   +_TEMP = RFMstat ;
MPRINT(EM_DIAGRAM):   _TEMP = RFMstat ;
3085853   +_LP0 = _LP0 + (  4.6096891616041E-6 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.6096891616041E-6 * _TEMP);
3085854   +
3085855   +***  Effect: RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: RMntFrq ;
3085856   +_TEMP = RMntFrq ;
MPRINT(EM_DIAGRAM):   _TEMP = RMntFrq ;
3085857   +_LP0 = _LP0 + (    0.00306634890495 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00306634890495 * _TEMP);
3085858   +
3085859   +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
3085860   +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
3085861   +_LP0 = _LP0 + (    0.00940933569599 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00940933569599 * _TEMP);
3085862   +
3085863   +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
3085864   +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
3085865   +_LP0 = _LP0 + (    0.44425327545555 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.44425327545555 * _TEMP);
3085866   +
3085867   +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
3085868   +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
3085869   +_TEMP =     5.81096403466168 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 5.81096403466168 + _LP0;
3085870   +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
3085871   +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
3085872   +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
3085873   +end;
MPRINT(EM_DIAGRAM):   end;
3085874   +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
3085875   +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
3085876   +
3085877   +RULE4_2DR1:
3085878   +
3085879   +
3085880   +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   RULE4_2DR1: *** Posterior Probabilities and Predicted Level;
3085881   +label P__bin1 = 'Predicted: _bin=1' ;
MPRINT(EM_DIAGRAM):   label P__bin1 = 'Predicted: _bin=1' ;
3085882   +label P__bin0 = 'Predicted: _bin=0' ;
MPRINT(EM_DIAGRAM):   label P__bin0 = 'Predicted: _bin=0' ;
3085883   +P__bin1 = _P0;
MPRINT(EM_DIAGRAM):   P__bin1 = _P0;
3085884   +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
3085885   +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
3085886   +P__bin0 = _P1;
MPRINT(EM_DIAGRAM):   P__bin0 = _P1;
3085887   +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
3085888   +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
3085889   +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
3085890   +end;
MPRINT(EM_DIAGRAM):   end;
3085891   +I__bin = RULE4_2DRF[_IY];
MPRINT(EM_DIAGRAM):   I__bin = RULE4_2DRF[_IY];
3085892   +U__bin = RULE4_2DRU[_IY];
MPRINT(EM_DIAGRAM):   U__bin = RULE4_2DRU[_IY];
3085893   +
3085894   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3085895   +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
3085896   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3085897   +*;
MPRINT(EM_DIAGRAM):   *;
3085898   +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3085899   +if I__bin eq '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin eq '1' then do;
3085900   +I_DepVar = ("1");
MPRINT(EM_DIAGRAM):   I_DepVar = ("1");
3085901   +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3085902   +P_DepVar1=P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar1=P__bin1;
3085903   +P_DepVar0 = 1-P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 1-P__bin1;
3085904   +end;
MPRINT(EM_DIAGRAM):   end;
3085905   +*;
MPRINT(EM_DIAGRAM):   *;
3085906   +*;
MPRINT(EM_DIAGRAM):   *;
3085907   +end;
MPRINT(EM_DIAGRAM):   end;
3085908   +*;
MPRINT(EM_DIAGRAM):   *;
3085909   +DROP P__bin1 P__bin0;
MPRINT(EM_DIAGRAM):   DROP P__bin1 P__bin0;
3085910   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085911   +* Cleanup Model for DepVar;
MPRINT(EM_DIAGRAM):   * Cleanup Model for DepVar;
3085912   +* Null Model based on training frequencies;
MPRINT(EM_DIAGRAM):   * Null Model based on training frequencies;
3085913   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085914   +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3085915   +if I__bin ne '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin ne '1' then do;
3085916   +I_DepVar = ("1");
MPRINT(EM_DIAGRAM):   I_DepVar = ("1");
3085917   +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3085918   +P_DepVar1 = 0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
3085919   +P_DepVar0 = 0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
3085920   +*;
MPRINT(EM_DIAGRAM):   *;
3085921   +end;
MPRINT(EM_DIAGRAM):   end;
3085922   +*;
MPRINT(EM_DIAGRAM):   *;
3085923   +*;
MPRINT(EM_DIAGRAM):   *;
3085924   +drop U__bin _bin;
MPRINT(EM_DIAGRAM):   drop U__bin _bin;
3085925   +*;
MPRINT(EM_DIAGRAM):   *;
3085926   +_FORMAT = PUT(DepVar, BEST.);
MPRINT(EM_DIAGRAM):   _FORMAT = PUT(DepVar, BEST.);
3085927   +%DMNORMCP(_FORMAT, F_DepVar);
MPRINT(DMNORMCP):   F_DepVar=dmnorm(_FORMAT,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3085928   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085929   +*Computing Residual Vars: DepVar;
MPRINT(EM_DIAGRAM):   *Computing Residual Vars: DepVar;
3085930   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085931   +Label R_DepVar1='Residual: DepVar=1';
MPRINT(EM_DIAGRAM):   Label R_DepVar1= 'Residual: DepVar=1';
3085932   +Label R_DepVar0='Residual: DepVar=0';
MPRINT(EM_DIAGRAM):   Label R_DepVar0= 'Residual: DepVar=0';
3085933   +if
3085934   + F_DepVar ne '1'
3085935   +and F_DepVar ne '0'
3085936   + then do;
MPRINT(EM_DIAGRAM):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
3085937   +R_DepVar1=.;
MPRINT(EM_DIAGRAM):   R_DepVar1=.;
3085938   +R_DepVar0=.;
MPRINT(EM_DIAGRAM):   R_DepVar0=.;
3085939   +end;
MPRINT(EM_DIAGRAM):   end;
3085940   +else do;
MPRINT(EM_DIAGRAM):   else do;
3085941   +R_DepVar1= - P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1= - P_DepVar1;
3085942   +R_DepVar0= - P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0= - P_DepVar0;
3085943   +select(F_DepVar);
MPRINT(EM_DIAGRAM):   select(F_DepVar);
3085944   +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(EM_DIAGRAM):   when('1')R_DepVar1= R_DepVar1+1;
3085945   +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(EM_DIAGRAM):   when('0')R_DepVar0= R_DepVar0+1;
3085946   +otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
3085947   +end;
MPRINT(EM_DIAGRAM):   end;
3085948   +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
3085949    run;
 
NOTE: DATA STEP view saved on file EMWS8.RULE4_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
3085950    quit;
3085951    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
3085952    filename emflow
3085952  ! "C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rule4: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085953    *------------------------------------------------------------*;
3085954    * Rule4: Scoring VALIDATE data;
3085955    *------------------------------------------------------------*;
3085956    data EMWS8.Rule4_VALIDATE
3085957    / view=EMWS8.Rule4_VALIDATE
3085958    ;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_VALIDATE / view=EMWS8.Rule4_VALIDATE ;
3085959    set EMWS8.Meta3_VALIDATE
3085960    ;
MPRINT(EM_DIAGRAM):   set EMWS8.Meta3_VALIDATE ;
3085961    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file
      C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMFLOWSCORE.sas.
3085962   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085963   +* Rule Induction Scoring Code;
MPRINT(EM_DIAGRAM):   * Rule Induction Scoring Code;
3085964   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085965   +length _bin $12 I__bin $12 I_DepVar $32;
MPRINT(EM_DIAGRAM):   length _bin $12 I__bin $12 I_DepVar $32;
3085966   +label I_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar';
3085967   +label F_DepVar = 'Into: DepVar';
MPRINT(EM_DIAGRAM):   label F_DepVar = 'Into: DepVar';
3085968   +*;
MPRINT(EM_DIAGRAM):   *;
3085969   +drop I__bin;
MPRINT(EM_DIAGRAM):   drop I__bin;
3085970   +*;
MPRINT(EM_DIAGRAM):   *;
3085971   +F_DepVar=putn(DepVar, 'best.');
MPRINT(EM_DIAGRAM):   F_DepVar=putn(DepVar, 'best.');
3085972   +%DMNORMIP(F_DepVar);
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3085973   +I_DepVar = '';
MPRINT(EM_DIAGRAM):   I_DepVar = '';
3085974   +I__bin= '0';
MPRINT(EM_DIAGRAM):   I__bin= '0';
3085975   +*;
MPRINT(EM_DIAGRAM):   *;
3085976   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085977   +* Null Model;
MPRINT(EM_DIAGRAM):   * Null Model;
3085978   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085979   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085980   +*Binary model for DepVar = 0;
MPRINT(EM_DIAGRAM):   *Binary model for DepVar = 0;
3085981   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3085982   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3085983   +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
3085984   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3085985   +
3085986   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
3085987   +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
3085988   +
3085989   +length I__bin $ 12;
MPRINT(EM_DIAGRAM):   length I__bin $ 12;
3085990   +label I__bin = 'Into: _bin' ;
MPRINT(EM_DIAGRAM):   label I__bin = 'Into: _bin' ;
3085991   +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
3085992   +array RULE4_1DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array RULE4_1DRF [2] $12 _temporary_ ('1' '0' );
3085993   +label U__bin = 'Unnormalized Into: _bin' ;
MPRINT(EM_DIAGRAM):   label U__bin = 'Unnormalized Into: _bin' ;
3085994   +length U__bin $ 12;
MPRINT(EM_DIAGRAM):   length U__bin $ 12;
3085995   +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
3085996   +array RULE4_1DRU[2] $ 12 _temporary_ ('1           '  '0           ' );
MPRINT(EM_DIAGRAM):   array RULE4_1DRU[2] $ 12 _temporary_ ('1           ' '0           ' );
3085997   +
3085998   +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
3085999   +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
3086000   +
3086001   +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
3086002   +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
3086003   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086004   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086005   +end;
MPRINT(EM_DIAGRAM):   end;
3086006   +
3086007   +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
3086008   +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
3086009   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086010   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086011   +end;
MPRINT(EM_DIAGRAM):   end;
3086012   +
3086013   +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
3086014   +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
3086015   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086016   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086017   +end;
MPRINT(EM_DIAGRAM):   end;
3086018   +
3086019   +*** Check Kidhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Kidhome for missing values ;
3086020   +if missing( Kidhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Kidhome ) then do;
3086021   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086022   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086023   +end;
MPRINT(EM_DIAGRAM):   end;
3086024   +
3086025   +*** Check MntFishProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFishProducts for missing values ;
3086026   +if missing( MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFishProducts ) then do;
3086027   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086028   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086029   +end;
MPRINT(EM_DIAGRAM):   end;
3086030   +
3086031   +*** Check MntFruits for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFruits for missing values ;
3086032   +if missing( MntFruits ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFruits ) then do;
3086033   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086034   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086035   +end;
MPRINT(EM_DIAGRAM):   end;
3086036   +
3086037   +*** Check MntGoldProds for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntGoldProds for missing values ;
3086038   +if missing( MntGoldProds ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntGoldProds ) then do;
3086039   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086040   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086041   +end;
MPRINT(EM_DIAGRAM):   end;
3086042   +
3086043   +*** Check MntSweetProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntSweetProducts for missing values ;
3086044   +if missing( MntSweetProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntSweetProducts ) then do;
3086045   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086046   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086047   +end;
MPRINT(EM_DIAGRAM):   end;
3086048   +
3086049   +*** Check MonthsAsCustomer for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MonthsAsCustomer for missing values ;
3086050   +if missing( MonthsAsCustomer ) then do;
MPRINT(EM_DIAGRAM):   if missing( MonthsAsCustomer ) then do;
3086051   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086052   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086053   +end;
MPRINT(EM_DIAGRAM):   end;
3086054   +
3086055   +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
3086056   +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
3086057   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086058   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086059   +end;
MPRINT(EM_DIAGRAM):   end;
3086060   +
3086061   +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
3086062   +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
3086063   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086064   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086065   +end;
MPRINT(EM_DIAGRAM):   end;
3086066   +
3086067   +*** Check RFMstat for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RFMstat for missing values ;
3086068   +if missing( RFMstat ) then do;
MPRINT(EM_DIAGRAM):   if missing( RFMstat ) then do;
3086069   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086070   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086071   +end;
MPRINT(EM_DIAGRAM):   end;
3086072   +
3086073   +*** Check RMntFrq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RMntFrq for missing values ;
3086074   +if missing( RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( RMntFrq ) then do;
3086075   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086076   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086077   +end;
MPRINT(EM_DIAGRAM):   end;
3086078   +
3086079   +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
3086080   +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
3086081   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086082   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086083   +end;
MPRINT(EM_DIAGRAM):   end;
3086084   +
3086085   +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
3086086   +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
3086087   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086088   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086089   +end;
MPRINT(EM_DIAGRAM):   end;
3086090   +
3086091   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
3086092   +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
3086093   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
3086094   +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
3086095   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086096   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086097   +end;
MPRINT(EM_DIAGRAM):   end;
3086098   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086099   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086100   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
3086101   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086102   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086103   +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
3086104   +   end;
MPRINT(EM_DIAGRAM):   end;
3086105   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086106   +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
3086107   +   end;
MPRINT(EM_DIAGRAM):   end;
3086108   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086109   +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
3086110   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086111   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086112   +   end;
MPRINT(EM_DIAGRAM):   end;
3086113   +end;
MPRINT(EM_DIAGRAM):   end;
3086114   +
3086115   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
3086116   +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
3086117   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
3086118   +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
3086119   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086120   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086121   +end;
MPRINT(EM_DIAGRAM):   end;
3086122   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086123   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086124   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
3086125   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086126   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086127   +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
3086128   +   end;
MPRINT(EM_DIAGRAM):   end;
3086129   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086130   +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
3086131   +   end;
MPRINT(EM_DIAGRAM):   end;
3086132   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086133   +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
3086134   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086135   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086136   +   end;
MPRINT(EM_DIAGRAM):   end;
3086137   +end;
MPRINT(EM_DIAGRAM):   end;
3086138   +
3086139   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
3086140   +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
3086141   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
3086142   +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
3086143   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086144   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086145   +end;
MPRINT(EM_DIAGRAM):   end;
3086146   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086147   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086148   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
3086149   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086150   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086151   +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
3086152   +   end;
MPRINT(EM_DIAGRAM):   end;
3086153   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086154   +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
3086155   +   end;
MPRINT(EM_DIAGRAM):   end;
3086156   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086157   +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
3086158   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086159   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086160   +   end;
MPRINT(EM_DIAGRAM):   end;
3086161   +end;
MPRINT(EM_DIAGRAM):   end;
3086162   +
3086163   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
3086164   +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
3086165   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
3086166   +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
3086167   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086168   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086169   +end;
MPRINT(EM_DIAGRAM):   end;
3086170   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086171   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086172   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
3086173   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086174   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086175   +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
3086176   +   end;
MPRINT(EM_DIAGRAM):   end;
3086177   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086178   +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
3086179   +   end;
MPRINT(EM_DIAGRAM):   end;
3086180   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086181   +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
3086182   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086183   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086184   +   end;
MPRINT(EM_DIAGRAM):   end;
3086185   +end;
MPRINT(EM_DIAGRAM):   end;
3086186   +
3086187   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
3086188   +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
3086189   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
3086190   +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
3086191   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086192   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086193   +end;
MPRINT(EM_DIAGRAM):   end;
3086194   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086195   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086196   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
3086197   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086198   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086199   +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
3086200   +   end;
MPRINT(EM_DIAGRAM):   end;
3086201   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086202   +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
3086203   +   end;
MPRINT(EM_DIAGRAM):   end;
3086204   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086205   +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
3086206   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086207   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086208   +   end;
MPRINT(EM_DIAGRAM):   end;
3086209   +end;
MPRINT(EM_DIAGRAM):   end;
3086210   +
3086211   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
3086212   +drop _6_0 ;
MPRINT(EM_DIAGRAM):   drop _6_0 ;
3086213   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
3086214   +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
3086215   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086216   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086217   +end;
MPRINT(EM_DIAGRAM):   end;
3086218   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086219   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086220   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
3086221   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086222   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086223   +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
3086224   +   end;
MPRINT(EM_DIAGRAM):   end;
3086225   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086226   +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
3086227   +   end;
MPRINT(EM_DIAGRAM):   end;
3086228   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086229   +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
3086230   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086231   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086232   +   end;
MPRINT(EM_DIAGRAM):   end;
3086233   +end;
MPRINT(EM_DIAGRAM):   end;
3086234   +
3086235   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
3086236   +drop _7_0 _7_1 _7_2 _7_3 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 _7_2 _7_3 ;
3086237   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
3086238   +_7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
3086239   +_7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
3086240   +_7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
3086241   +_7_3 = 0;
MPRINT(EM_DIAGRAM):   _7_3 = 0;
3086242   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
3086243   +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
3086244   +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
3086245   +   _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
3086246   +   _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
3086247   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086248   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086249   +end;
MPRINT(EM_DIAGRAM):   end;
3086250   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086251   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
3086252   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
3086253   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086254   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
3086255   +      _7_2 = 1;
MPRINT(EM_DIAGRAM):   _7_2 = 1;
3086256   +   end;
MPRINT(EM_DIAGRAM):   end;
3086257   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
3086258   +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
3086259   +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
3086260   +      _7_2 = -1;
MPRINT(EM_DIAGRAM):   _7_2 = -1;
3086261   +      _7_3 = -1;
MPRINT(EM_DIAGRAM):   _7_3 = -1;
3086262   +   end;
MPRINT(EM_DIAGRAM):   end;
3086263   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
3086264   +      _7_3 = 1;
MPRINT(EM_DIAGRAM):   _7_3 = 1;
3086265   +   end;
MPRINT(EM_DIAGRAM):   end;
3086266   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
3086267   +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
3086268   +   end;
MPRINT(EM_DIAGRAM):   end;
3086269   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
3086270   +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
3086271   +   end;
MPRINT(EM_DIAGRAM):   end;
3086272   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086273   +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
3086274   +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
3086275   +      _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
3086276   +      _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
3086277   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086278   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086279   +   end;
MPRINT(EM_DIAGRAM):   end;
3086280   +end;
MPRINT(EM_DIAGRAM):   end;
3086281   +
3086282   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
3086283   +drop _9_0 _9_1 _9_2 _9_3 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 ;
3086284   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
3086285   +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
3086286   +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
3086287   +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
3086288   +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
3086289   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
3086290   +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
3086291   +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
3086292   +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
3086293   +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
3086294   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086295   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086296   +end;
MPRINT(EM_DIAGRAM):   end;
3086297   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086298   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
3086299   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
3086300   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086301   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
3086302   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
3086303   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
3086304   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
3086305   +            _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
3086306   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3086307   +         end;
MPRINT(EM_DIAGRAM):   end;
3086308   +         else do;
MPRINT(EM_DIAGRAM):   else do;
3086309   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
3086310   +               _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
3086311   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3086312   +            end;
MPRINT(EM_DIAGRAM):   end;
3086313   +         end;
MPRINT(EM_DIAGRAM):   end;
3086314   +      end;
MPRINT(EM_DIAGRAM):   end;
3086315   +      else do;
MPRINT(EM_DIAGRAM):   else do;
3086316   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
3086317   +            _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
3086318   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3086319   +         end;
MPRINT(EM_DIAGRAM):   end;
3086320   +      end;
MPRINT(EM_DIAGRAM):   end;
3086321   +   end;
MPRINT(EM_DIAGRAM):   end;
3086322   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086323   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
3086324   +         _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
3086325   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3086326   +      end;
MPRINT(EM_DIAGRAM):   end;
3086327   +      else do;
MPRINT(EM_DIAGRAM):   else do;
3086328   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
3086329   +            _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
3086330   +            _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
3086331   +            _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
3086332   +            _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
3086333   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3086334   +         end;
MPRINT(EM_DIAGRAM):   end;
3086335   +      end;
MPRINT(EM_DIAGRAM):   end;
3086336   +   end;
MPRINT(EM_DIAGRAM):   end;
3086337   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
3086338   +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
3086339   +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
3086340   +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
3086341   +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
3086342   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086343   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086344   +   end;
MPRINT(EM_DIAGRAM):   end;
3086345   +end;
MPRINT(EM_DIAGRAM):   end;
3086346   +
3086347   +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
3086348   +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
3086349   +   _P0 = 0.848778433;
MPRINT(EM_DIAGRAM):   _P0 = 0.848778433;
3086350   +   _P1 = 0.151221567;
MPRINT(EM_DIAGRAM):   _P1 = 0.151221567;
3086351   +   goto RULE4_1DR1;
MPRINT(EM_DIAGRAM):   goto RULE4_1DR1;
3086352   +end;
MPRINT(EM_DIAGRAM):   end;
3086353   +
3086354   +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
3086355   +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
3086356   +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
3086357   +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
3086358   +
3086359   +***  Effect: AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp1 ;
3086360   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086361   +_LP0 = _LP0 + (    0.97418552471108) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.97418552471108) * _TEMP * _1_0;
3086362   +
3086363   +***  Effect: AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp2 ;
3086364   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086365   +_LP0 = _LP0 + (    0.68156741676811) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.68156741676811) * _TEMP * _2_0;
3086366   +
3086367   +***  Effect: AcceptedCmp3 ;
The SAS System
 
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
3086368   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086369   +_LP0 = _LP0 + (    1.32848439989106) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.32848439989106) * _TEMP * _3_0;
3086370   +
3086371   +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
3086372   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086373   +_LP0 = _LP0 + (    0.53311779107273) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.53311779107273) * _TEMP * _4_0;
3086374   +
3086375   +***  Effect: AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp5 ;
3086376   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086377   +_LP0 = _LP0 + (    0.95118474053675) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.95118474053675) * _TEMP * _5_0;
3086378   +
3086379   +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
3086380   +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
3086381   +_LP0 = _LP0 + (    0.01979462562675 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01979462562675 * _TEMP);
3086382   +
3086383   +***  Effect: Complain ;
MPRINT(EM_DIAGRAM):   *** Effect: Complain ;
3086384   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086385   +_LP0 = _LP0 + (   -0.54041637411203) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.54041637411203) * _TEMP * _6_0;
3086386   +
3086387   +***  Effect: Education ;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
3086388   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086389   +_LP0 = _LP0 + (   -0.09757703065208) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.09757703065208) * _TEMP * _7_0;
3086390   +_LP0 = _LP0 + (    0.10550056008301) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.10550056008301) * _TEMP * _7_1;
3086391   +_LP0 = _LP0 + (   -0.31683916083951) * _TEMP * _7_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.31683916083951) * _TEMP * _7_2;
3086392   +_LP0 = _LP0 + (    0.23324682796678) * _TEMP * _7_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.23324682796678) * _TEMP * _7_3;
3086393   +
3086394   +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
3086395   +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
3086396   +_LP0 = _LP0 + (    0.06627503591699 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06627503591699 * _TEMP);
3086397   +
3086398   +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
3086399   +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
3086400   +_LP0 = _LP0 + (   -0.00004901079751 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00004901079751 * _TEMP);
3086401   +
3086402   +***  Effect: Kidhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Kidhome ;
3086403   +_TEMP = Kidhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Kidhome ;
3086404   +_LP0 = _LP0 + (    0.19312294408187 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.19312294408187 * _TEMP);
3086405   +
3086406   +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
3086407   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086408   +_LP0 = _LP0 + (   -0.24578027352194) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.24578027352194) * _TEMP * _9_0;
3086409   +_LP0 = _LP0 + (    0.70193582579037) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.70193582579037) * _TEMP * _9_1;
3086410   +_LP0 = _LP0 + (    -0.4511231588711) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.4511231588711) * _TEMP * _9_2;
3086411   +_LP0 = _LP0 + (    0.77973690767148) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.77973690767148) * _TEMP * _9_3;
3086412   +
3086413   +***  Effect: MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFishProducts ;
3086414   +_TEMP = MntFishProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFishProducts ;
3086415   +_LP0 = _LP0 + (    0.00049956522901 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00049956522901 * _TEMP);
3086416   +
3086417   +***  Effect: MntFruits ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFruits ;
3086418   +_TEMP = MntFruits ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFruits ;
3086419   +_LP0 = _LP0 + (    0.00396176260942 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00396176260942 * _TEMP);
3086420   +
3086421   +***  Effect: MntGoldProds ;
MPRINT(EM_DIAGRAM):   *** Effect: MntGoldProds ;
3086422   +_TEMP = MntGoldProds ;
MPRINT(EM_DIAGRAM):   _TEMP = MntGoldProds ;
3086423   +_LP0 = _LP0 + (   -0.00056979316437 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00056979316437 * _TEMP);
3086424   +
3086425   +***  Effect: MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntSweetProducts ;
3086426   +_TEMP = MntSweetProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntSweetProducts ;
3086427   +_LP0 = _LP0 + (    0.00409766321973 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00409766321973 * _TEMP);
3086428   +
3086429   +***  Effect: MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   *** Effect: MonthsAsCustomer ;
3086430   +_TEMP = MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   _TEMP = MonthsAsCustomer ;
3086431   +_LP0 = _LP0 + (    -0.0065808574528 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.0065808574528 * _TEMP);
3086432   +
3086433   +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
3086434   +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
3086435   +_LP0 = _LP0 + (   -0.41504533192296 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.41504533192296 * _TEMP);
3086436   +
3086437   +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
3086438   +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
3086439   +_LP0 = _LP0 + (   -0.27734369181934 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27734369181934 * _TEMP);
3086440   +
3086441   +***  Effect: RFMstat ;
MPRINT(EM_DIAGRAM):   *** Effect: RFMstat ;
3086442   +_TEMP = RFMstat ;
MPRINT(EM_DIAGRAM):   _TEMP = RFMstat ;
3086443   +_LP0 = _LP0 + (   -0.00011005920443 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00011005920443 * _TEMP);
3086444   +
3086445   +***  Effect: RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: RMntFrq ;
3086446   +_TEMP = RMntFrq ;
MPRINT(EM_DIAGRAM):   _TEMP = RMntFrq ;
3086447   +_LP0 = _LP0 + (   -0.01158011947691 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.01158011947691 * _TEMP);
3086448   +
3086449   +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
3086450   +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
3086451   +_LP0 = _LP0 + (    0.06167776080023 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.06167776080023 * _TEMP);
3086452   +
3086453   +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
3086454   +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
3086455   +_LP0 = _LP0 + (    1.44620738686244 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 1.44620738686244 * _TEMP);
3086456   +
3086457   +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
3086458   +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
3086459   +_TEMP =    -0.03523097804062 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = -0.03523097804062 + _LP0;
3086460   +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
3086461   +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
3086462   +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
3086463   +end;
MPRINT(EM_DIAGRAM):   end;
3086464   +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
3086465   +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
3086466   +
3086467   +RULE4_1DR1:
3086468   +
3086469   +
3086470   +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   RULE4_1DR1: *** Posterior Probabilities and Predicted Level;
3086471   +label P__bin1 = 'Predicted: _bin=1' ;
MPRINT(EM_DIAGRAM):   label P__bin1 = 'Predicted: _bin=1' ;
3086472   +label P__bin0 = 'Predicted: _bin=0' ;
MPRINT(EM_DIAGRAM):   label P__bin0 = 'Predicted: _bin=0' ;
3086473   +P__bin1 = _P0;
MPRINT(EM_DIAGRAM):   P__bin1 = _P0;
3086474   +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
3086475   +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
3086476   +P__bin0 = _P1;
MPRINT(EM_DIAGRAM):   P__bin0 = _P1;
3086477   +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
3086478   +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
3086479   +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
3086480   +end;
MPRINT(EM_DIAGRAM):   end;
3086481   +I__bin = RULE4_1DRF[_IY];
MPRINT(EM_DIAGRAM):   I__bin = RULE4_1DRF[_IY];
3086482   +U__bin = RULE4_1DRU[_IY];
MPRINT(EM_DIAGRAM):   U__bin = RULE4_1DRU[_IY];
3086483   +
3086484   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3086485   +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
3086486   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3086487   +*;
MPRINT(EM_DIAGRAM):   *;
3086488   +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3086489   +if I__bin eq '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin eq '1' then do;
3086490   +I_DepVar = ("0");
MPRINT(EM_DIAGRAM):   I_DepVar = ("0");
3086491   +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3086492   +P_DepVar0=P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar0=P__bin1;
3086493   +P_DepVar1 = 1-P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 1-P__bin1;
3086494   +end;
MPRINT(EM_DIAGRAM):   end;
3086495   +*;
MPRINT(EM_DIAGRAM):   *;
3086496   +*;
MPRINT(EM_DIAGRAM):   *;
3086497   +* END Binary Model for DepVar = 0;
MPRINT(EM_DIAGRAM):   * END Binary Model for DepVar = 0;
3086498   +;
MPRINT(EM_DIAGRAM):   ;
3086499   +*;
MPRINT(EM_DIAGRAM):   *;
3086500   +DROP P__bin1 P__bin0;
MPRINT(EM_DIAGRAM):   DROP P__bin1 P__bin0;
3086501   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3086502   +*Binary model for DepVar = 1;
MPRINT(EM_DIAGRAM):   *Binary model for DepVar = 1;
3086503   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3086504   +*;
MPRINT(EM_DIAGRAM):   *;
3086505   +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3086506   +if I__bin ne '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin ne '1' then do;
3086507   +*;
MPRINT(EM_DIAGRAM):   *;
3086508   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3086509   +*** begin scoring code for regression;
MPRINT(EM_DIAGRAM):   *** begin scoring code for regression;
3086510   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3086511   +
3086512   +length _WARN_ $4;
MPRINT(EM_DIAGRAM):   length _WARN_ $4;
3086513   +label _WARN_ = 'Warnings' ;
MPRINT(EM_DIAGRAM):   label _WARN_ = 'Warnings' ;
3086514   +
3086515   +length I__bin $ 12;
MPRINT(EM_DIAGRAM):   length I__bin $ 12;
3086516   +label I__bin = 'Into: _bin' ;
MPRINT(EM_DIAGRAM):   label I__bin = 'Into: _bin' ;
3086517   +*** Target Values;
MPRINT(EM_DIAGRAM):   *** Target Values;
3086518   +array RULE4_2DRF [2] $12 _temporary_ ('1' '0' );
MPRINT(EM_DIAGRAM):   array RULE4_2DRF [2] $12 _temporary_ ('1' '0' );
3086519   +label U__bin = 'Unnormalized Into: _bin' ;
MPRINT(EM_DIAGRAM):   label U__bin = 'Unnormalized Into: _bin' ;
3086520   +length U__bin $ 12;
MPRINT(EM_DIAGRAM):   length U__bin $ 12;
3086521   +*** Unnormalized target values;
MPRINT(EM_DIAGRAM):   *** Unnormalized target values;
3086522   +array RULE4_2DRU[2] $ 12 _temporary_ ('1           '  '0           ' );
MPRINT(EM_DIAGRAM):   array RULE4_2DRU[2] $ 12 _temporary_ ('1           ' '0           ' );
3086523   +
3086524   +drop _DM_BAD;
MPRINT(EM_DIAGRAM):   drop _DM_BAD;
3086525   +_DM_BAD=0;
MPRINT(EM_DIAGRAM):   _DM_BAD=0;
3086526   +
3086527   +*** Check Age for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Age for missing values ;
3086528   +if missing( Age ) then do;
MPRINT(EM_DIAGRAM):   if missing( Age ) then do;
3086529   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086530   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086531   +end;
MPRINT(EM_DIAGRAM):   end;
3086532   +
3086533   +*** Check Frq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Frq for missing values ;
3086534   +if missing( Frq ) then do;
MPRINT(EM_DIAGRAM):   if missing( Frq ) then do;
3086535   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086536   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086537   +end;
MPRINT(EM_DIAGRAM):   end;
3086538   +
3086539   +*** Check Income for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Income for missing values ;
3086540   +if missing( Income ) then do;
MPRINT(EM_DIAGRAM):   if missing( Income ) then do;
3086541   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086542   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086543   +end;
MPRINT(EM_DIAGRAM):   end;
3086544   +
3086545   +*** Check Kidhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Kidhome for missing values ;
3086546   +if missing( Kidhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Kidhome ) then do;
3086547   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086548   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086549   +end;
MPRINT(EM_DIAGRAM):   end;
3086550   +
3086551   +*** Check MntFishProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFishProducts for missing values ;
3086552   +if missing( MntFishProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFishProducts ) then do;
3086553   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086554   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086555   +end;
MPRINT(EM_DIAGRAM):   end;
3086556   +
3086557   +*** Check MntFruits for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntFruits for missing values ;
3086558   +if missing( MntFruits ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntFruits ) then do;
3086559   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086560   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086561   +end;
MPRINT(EM_DIAGRAM):   end;
3086562   +
3086563   +*** Check MntGoldProds for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntGoldProds for missing values ;
3086564   +if missing( MntGoldProds ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntGoldProds ) then do;
3086565   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086566   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086567   +end;
MPRINT(EM_DIAGRAM):   end;
3086568   +
3086569   +*** Check MntSweetProducts for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MntSweetProducts for missing values ;
3086570   +if missing( MntSweetProducts ) then do;
MPRINT(EM_DIAGRAM):   if missing( MntSweetProducts ) then do;
3086571   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086572   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086573   +end;
MPRINT(EM_DIAGRAM):   end;
3086574   +
3086575   +*** Check MonthsAsCustomer for missing values ;
MPRINT(EM_DIAGRAM):   *** Check MonthsAsCustomer for missing values ;
3086576   +if missing( MonthsAsCustomer ) then do;
MPRINT(EM_DIAGRAM):   if missing( MonthsAsCustomer ) then do;
3086577   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086578   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086579   +end;
MPRINT(EM_DIAGRAM):   end;
3086580   +
3086581   +*** Check NumDealsPurchases for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumDealsPurchases for missing values ;
3086582   +if missing( NumDealsPurchases ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumDealsPurchases ) then do;
3086583   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086584   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086585   +end;
MPRINT(EM_DIAGRAM):   end;
3086586   +
3086587   +*** Check NumWebVisitsMonth for missing values ;
MPRINT(EM_DIAGRAM):   *** Check NumWebVisitsMonth for missing values ;
3086588   +if missing( NumWebVisitsMonth ) then do;
MPRINT(EM_DIAGRAM):   if missing( NumWebVisitsMonth ) then do;
3086589   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086590   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086591   +end;
MPRINT(EM_DIAGRAM):   end;
3086592   +
3086593   +*** Check RFMstat for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RFMstat for missing values ;
3086594   +if missing( RFMstat ) then do;
MPRINT(EM_DIAGRAM):   if missing( RFMstat ) then do;
3086595   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086596   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086597   +end;
MPRINT(EM_DIAGRAM):   end;
3086598   +
3086599   +*** Check RMntFrq for missing values ;
MPRINT(EM_DIAGRAM):   *** Check RMntFrq for missing values ;
3086600   +if missing( RMntFrq ) then do;
MPRINT(EM_DIAGRAM):   if missing( RMntFrq ) then do;
3086601   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086602   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086603   +end;
MPRINT(EM_DIAGRAM):   end;
3086604   +
3086605   +*** Check Recency for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Recency for missing values ;
3086606   +if missing( Recency ) then do;
MPRINT(EM_DIAGRAM):   if missing( Recency ) then do;
3086607   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086608   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086609   +end;
MPRINT(EM_DIAGRAM):   end;
3086610   +
3086611   +*** Check Teenhome for missing values ;
MPRINT(EM_DIAGRAM):   *** Check Teenhome for missing values ;
3086612   +if missing( Teenhome ) then do;
MPRINT(EM_DIAGRAM):   if missing( Teenhome ) then do;
3086613   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086614   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086615   +end;
MPRINT(EM_DIAGRAM):   end;
3086616   +
3086617   +*** Generate dummy variables for AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp1 ;
3086618   +drop _1_0 ;
MPRINT(EM_DIAGRAM):   drop _1_0 ;
3086619   +if missing( AcceptedCmp1 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp1 ) then do;
3086620   +   _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
3086621   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086622   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086623   +end;
MPRINT(EM_DIAGRAM):   end;
3086624   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086625   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086626   +   _dm12 = put( AcceptedCmp1 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp1 , BEST. );
3086627   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086628   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086629   +      _1_0 = 1;
MPRINT(EM_DIAGRAM):   _1_0 = 1;
3086630   +   end;
MPRINT(EM_DIAGRAM):   end;
3086631   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086632   +      _1_0 = -1;
MPRINT(EM_DIAGRAM):   _1_0 = -1;
3086633   +   end;
MPRINT(EM_DIAGRAM):   end;
3086634   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086635   +      _1_0 = .;
MPRINT(EM_DIAGRAM):   _1_0 = .;
3086636   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086637   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086638   +   end;
MPRINT(EM_DIAGRAM):   end;
3086639   +end;
MPRINT(EM_DIAGRAM):   end;
3086640   +
3086641   +*** Generate dummy variables for AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp2 ;
3086642   +drop _2_0 ;
MPRINT(EM_DIAGRAM):   drop _2_0 ;
3086643   +if missing( AcceptedCmp2 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp2 ) then do;
3086644   +   _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
3086645   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086646   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086647   +end;
MPRINT(EM_DIAGRAM):   end;
3086648   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086649   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086650   +   _dm12 = put( AcceptedCmp2 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp2 , BEST. );
3086651   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086652   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086653   +      _2_0 = 1;
MPRINT(EM_DIAGRAM):   _2_0 = 1;
3086654   +   end;
MPRINT(EM_DIAGRAM):   end;
3086655   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086656   +      _2_0 = -1;
MPRINT(EM_DIAGRAM):   _2_0 = -1;
3086657   +   end;
MPRINT(EM_DIAGRAM):   end;
3086658   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086659   +      _2_0 = .;
MPRINT(EM_DIAGRAM):   _2_0 = .;
3086660   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086661   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086662   +   end;
MPRINT(EM_DIAGRAM):   end;
3086663   +end;
MPRINT(EM_DIAGRAM):   end;
3086664   +
3086665   +*** Generate dummy variables for AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp3 ;
3086666   +drop _3_0 ;
MPRINT(EM_DIAGRAM):   drop _3_0 ;
3086667   +if missing( AcceptedCmp3 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp3 ) then do;
3086668   +   _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
3086669   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086670   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086671   +end;
MPRINT(EM_DIAGRAM):   end;
3086672   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086673   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086674   +   _dm12 = put( AcceptedCmp3 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp3 , BEST. );
3086675   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086676   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086677   +      _3_0 = 1;
MPRINT(EM_DIAGRAM):   _3_0 = 1;
3086678   +   end;
MPRINT(EM_DIAGRAM):   end;
3086679   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086680   +      _3_0 = -1;
MPRINT(EM_DIAGRAM):   _3_0 = -1;
3086681   +   end;
MPRINT(EM_DIAGRAM):   end;
3086682   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086683   +      _3_0 = .;
MPRINT(EM_DIAGRAM):   _3_0 = .;
3086684   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086685   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086686   +   end;
MPRINT(EM_DIAGRAM):   end;
3086687   +end;
MPRINT(EM_DIAGRAM):   end;
3086688   +
3086689   +*** Generate dummy variables for AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp4 ;
3086690   +drop _4_0 ;
MPRINT(EM_DIAGRAM):   drop _4_0 ;
3086691   +if missing( AcceptedCmp4 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp4 ) then do;
3086692   +   _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
3086693   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086694   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086695   +end;
MPRINT(EM_DIAGRAM):   end;
3086696   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086697   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086698   +   _dm12 = put( AcceptedCmp4 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp4 , BEST. );
3086699   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086700   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086701   +      _4_0 = 1;
MPRINT(EM_DIAGRAM):   _4_0 = 1;
3086702   +   end;
MPRINT(EM_DIAGRAM):   end;
3086703   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086704   +      _4_0 = -1;
MPRINT(EM_DIAGRAM):   _4_0 = -1;
3086705   +   end;
MPRINT(EM_DIAGRAM):   end;
3086706   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086707   +      _4_0 = .;
MPRINT(EM_DIAGRAM):   _4_0 = .;
3086708   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086709   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086710   +   end;
MPRINT(EM_DIAGRAM):   end;
3086711   +end;
MPRINT(EM_DIAGRAM):   end;
3086712   +
3086713   +*** Generate dummy variables for AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for AcceptedCmp5 ;
3086714   +drop _5_0 ;
MPRINT(EM_DIAGRAM):   drop _5_0 ;
3086715   +if missing( AcceptedCmp5 ) then do;
MPRINT(EM_DIAGRAM):   if missing( AcceptedCmp5 ) then do;
3086716   +   _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
3086717   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086718   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086719   +end;
MPRINT(EM_DIAGRAM):   end;
3086720   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086721   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086722   +   _dm12 = put( AcceptedCmp5 , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( AcceptedCmp5 , BEST. );
3086723   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086724   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086725   +      _5_0 = 1;
MPRINT(EM_DIAGRAM):   _5_0 = 1;
3086726   +   end;
MPRINT(EM_DIAGRAM):   end;
3086727   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086728   +      _5_0 = -1;
MPRINT(EM_DIAGRAM):   _5_0 = -1;
3086729   +   end;
MPRINT(EM_DIAGRAM):   end;
3086730   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086731   +      _5_0 = .;
MPRINT(EM_DIAGRAM):   _5_0 = .;
3086732   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086733   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086734   +   end;
MPRINT(EM_DIAGRAM):   end;
3086735   +end;
MPRINT(EM_DIAGRAM):   end;
3086736   +
3086737   +*** Generate dummy variables for Complain ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Complain ;
3086738   +drop _6_0 ;
MPRINT(EM_DIAGRAM):   drop _6_0 ;
3086739   +if missing( Complain ) then do;
MPRINT(EM_DIAGRAM):   if missing( Complain ) then do;
3086740   +   _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
3086741   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086742   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086743   +end;
MPRINT(EM_DIAGRAM):   end;
3086744   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086745   +   length _dm12 $ 12; drop _dm12 ;
MPRINT(EM_DIAGRAM):   length _dm12 $ 12;
MPRINT(EM_DIAGRAM):   drop _dm12 ;
3086746   +   _dm12 = put( Complain , BEST. );
MPRINT(EM_DIAGRAM):   _dm12 = put( Complain , BEST. );
3086747   +   %DMNORMIP( _dm12 )
MPRINT(DMNORMIP):   call dmnorm(_dm12,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086748   +   if _dm12 = '0'  then do;
MPRINT(EM_DIAGRAM):   if _dm12 = '0' then do;
3086749   +      _6_0 = 1;
MPRINT(EM_DIAGRAM):   _6_0 = 1;
3086750   +   end;
MPRINT(EM_DIAGRAM):   end;
3086751   +   else if _dm12 = '1'  then do;
MPRINT(EM_DIAGRAM):   else if _dm12 = '1' then do;
3086752   +      _6_0 = -1;
MPRINT(EM_DIAGRAM):   _6_0 = -1;
3086753   +   end;
MPRINT(EM_DIAGRAM):   end;
3086754   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086755   +      _6_0 = .;
MPRINT(EM_DIAGRAM):   _6_0 = .;
3086756   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086757   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086758   +   end;
MPRINT(EM_DIAGRAM):   end;
3086759   +end;
MPRINT(EM_DIAGRAM):   end;
3086760   +
3086761   +*** Generate dummy variables for Education ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Education ;
3086762   +drop _7_0 _7_1 _7_2 _7_3 ;
MPRINT(EM_DIAGRAM):   drop _7_0 _7_1 _7_2 _7_3 ;
3086763   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
3086764   +_7_0 = 0;
MPRINT(EM_DIAGRAM):   _7_0 = 0;
3086765   +_7_1 = 0;
MPRINT(EM_DIAGRAM):   _7_1 = 0;
3086766   +_7_2 = 0;
MPRINT(EM_DIAGRAM):   _7_2 = 0;
3086767   +_7_3 = 0;
MPRINT(EM_DIAGRAM):   _7_3 = 0;
3086768   +if missing( Education ) then do;
MPRINT(EM_DIAGRAM):   if missing( Education ) then do;
3086769   +   _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
3086770   +   _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
3086771   +   _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
3086772   +   _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
3086773   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086774   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086775   +end;
MPRINT(EM_DIAGRAM):   end;
3086776   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086777   +   length _dm10 $ 10; drop _dm10 ;
MPRINT(EM_DIAGRAM):   length _dm10 $ 10;
MPRINT(EM_DIAGRAM):   drop _dm10 ;
3086778   +   _dm10 = put( Education , $10. );
MPRINT(EM_DIAGRAM):   _dm10 = put( Education , $10. );
3086779   +   %DMNORMIP( _dm10 )
MPRINT(DMNORMIP):   call dmnorm(_dm10,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086780   +   if _dm10 = 'GRADUATION'  then do;
MPRINT(EM_DIAGRAM):   if _dm10 = 'GRADUATION' then do;
3086781   +      _7_2 = 1;
MPRINT(EM_DIAGRAM):   _7_2 = 1;
3086782   +   end;
MPRINT(EM_DIAGRAM):   end;
3086783   +   else if _dm10 = 'PHD'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'PHD' then do;
3086784   +      _7_0 = -1;
MPRINT(EM_DIAGRAM):   _7_0 = -1;
3086785   +      _7_1 = -1;
MPRINT(EM_DIAGRAM):   _7_1 = -1;
3086786   +      _7_2 = -1;
MPRINT(EM_DIAGRAM):   _7_2 = -1;
3086787   +      _7_3 = -1;
MPRINT(EM_DIAGRAM):   _7_3 = -1;
3086788   +   end;
MPRINT(EM_DIAGRAM):   end;
3086789   +   else if _dm10 = 'MASTER'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'MASTER' then do;
3086790   +      _7_3 = 1;
MPRINT(EM_DIAGRAM):   _7_3 = 1;
3086791   +   end;
MPRINT(EM_DIAGRAM):   end;
3086792   +   else if _dm10 = '2N CYCLE'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = '2N CYCLE' then do;
3086793   +      _7_0 = 1;
MPRINT(EM_DIAGRAM):   _7_0 = 1;
3086794   +   end;
MPRINT(EM_DIAGRAM):   end;
3086795   +   else if _dm10 = 'BASIC'  then do;
MPRINT(EM_DIAGRAM):   else if _dm10 = 'BASIC' then do;
3086796   +      _7_1 = 1;
MPRINT(EM_DIAGRAM):   _7_1 = 1;
3086797   +   end;
MPRINT(EM_DIAGRAM):   end;
3086798   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086799   +      _7_0 = .;
MPRINT(EM_DIAGRAM):   _7_0 = .;
3086800   +      _7_1 = .;
MPRINT(EM_DIAGRAM):   _7_1 = .;
3086801   +      _7_2 = .;
MPRINT(EM_DIAGRAM):   _7_2 = .;
3086802   +      _7_3 = .;
MPRINT(EM_DIAGRAM):   _7_3 = .;
3086803   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086804   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086805   +   end;
MPRINT(EM_DIAGRAM):   end;
3086806   +end;
MPRINT(EM_DIAGRAM):   end;
3086807   +
3086808   +*** Generate dummy variables for Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for Marital_Status ;
3086809   +drop _9_0 _9_1 _9_2 _9_3 ;
MPRINT(EM_DIAGRAM):   drop _9_0 _9_1 _9_2 _9_3 ;
3086810   +*** encoding is sparse, initialize to zero;
MPRINT(EM_DIAGRAM):   *** encoding is sparse, initialize to zero;
3086811   +_9_0 = 0;
MPRINT(EM_DIAGRAM):   _9_0 = 0;
3086812   +_9_1 = 0;
MPRINT(EM_DIAGRAM):   _9_1 = 0;
3086813   +_9_2 = 0;
MPRINT(EM_DIAGRAM):   _9_2 = 0;
3086814   +_9_3 = 0;
MPRINT(EM_DIAGRAM):   _9_3 = 0;
3086815   +if missing( Marital_Status ) then do;
MPRINT(EM_DIAGRAM):   if missing( Marital_Status ) then do;
3086816   +   _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
3086817   +   _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
3086818   +   _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
3086819   +   _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
3086820   +   substr(_warn_,1,1) = 'M';
MPRINT(EM_DIAGRAM):   substr(_warn_,1,1) = 'M';
3086821   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086822   +end;
MPRINT(EM_DIAGRAM):   end;
3086823   +else do;
MPRINT(EM_DIAGRAM):   else do;
3086824   +   length _dm8 $ 8; drop _dm8 ;
MPRINT(EM_DIAGRAM):   length _dm8 $ 8;
MPRINT(EM_DIAGRAM):   drop _dm8 ;
3086825   +   _dm8 = put( Marital_Status , $8. );
MPRINT(EM_DIAGRAM):   _dm8 = put( Marital_Status , $8. );
3086826   +   %DMNORMIP( _dm8 )
MPRINT(DMNORMIP):   call dmnorm(_dm8,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
3086827   +   _dm_find = 0; drop _dm_find;
MPRINT(EM_DIAGRAM):   _dm_find = 0;
MPRINT(EM_DIAGRAM):   drop _dm_find;
3086828   +   if _dm8 <= 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'SINGLE' then do;
3086829   +      if _dm8 <= 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 <= 'MARRIED' then do;
3086830   +         if _dm8 = 'DIVORCED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'DIVORCED' then do;
3086831   +            _9_0 = 1;
MPRINT(EM_DIAGRAM):   _9_0 = 1;
3086832   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3086833   +         end;
MPRINT(EM_DIAGRAM):   end;
3086834   +         else do;
MPRINT(EM_DIAGRAM):   else do;
3086835   +            if _dm8 = 'MARRIED'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'MARRIED' then do;
3086836   +               _9_1 = 1;
MPRINT(EM_DIAGRAM):   _9_1 = 1;
3086837   +               _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3086838   +            end;
MPRINT(EM_DIAGRAM):   end;
3086839   +         end;
MPRINT(EM_DIAGRAM):   end;
3086840   +      end;
MPRINT(EM_DIAGRAM):   end;
3086841   +      else do;
MPRINT(EM_DIAGRAM):   else do;
3086842   +         if _dm8 = 'SINGLE'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'SINGLE' then do;
3086843   +            _9_2 = 1;
MPRINT(EM_DIAGRAM):   _9_2 = 1;
3086844   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3086845   +         end;
MPRINT(EM_DIAGRAM):   end;
3086846   +      end;
MPRINT(EM_DIAGRAM):   end;
3086847   +   end;
MPRINT(EM_DIAGRAM):   end;
3086848   +   else do;
MPRINT(EM_DIAGRAM):   else do;
3086849   +      if _dm8 = 'TOGETHER'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'TOGETHER' then do;
3086850   +         _9_3 = 1;
MPRINT(EM_DIAGRAM):   _9_3 = 1;
3086851   +         _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3086852   +      end;
MPRINT(EM_DIAGRAM):   end;
3086853   +      else do;
MPRINT(EM_DIAGRAM):   else do;
3086854   +         if _dm8 = 'WIDOW'  then do;
MPRINT(EM_DIAGRAM):   if _dm8 = 'WIDOW' then do;
3086855   +            _9_0 = -1;
MPRINT(EM_DIAGRAM):   _9_0 = -1;
3086856   +            _9_1 = -1;
MPRINT(EM_DIAGRAM):   _9_1 = -1;
3086857   +            _9_2 = -1;
MPRINT(EM_DIAGRAM):   _9_2 = -1;
3086858   +            _9_3 = -1;
MPRINT(EM_DIAGRAM):   _9_3 = -1;
3086859   +            _dm_find = 1;
MPRINT(EM_DIAGRAM):   _dm_find = 1;
3086860   +         end;
MPRINT(EM_DIAGRAM):   end;
3086861   +      end;
MPRINT(EM_DIAGRAM):   end;
3086862   +   end;
MPRINT(EM_DIAGRAM):   end;
3086863   +   if not _dm_find then do;
MPRINT(EM_DIAGRAM):   if not _dm_find then do;
3086864   +      _9_0 = .;
MPRINT(EM_DIAGRAM):   _9_0 = .;
3086865   +      _9_1 = .;
MPRINT(EM_DIAGRAM):   _9_1 = .;
3086866   +      _9_2 = .;
MPRINT(EM_DIAGRAM):   _9_2 = .;
3086867   +      _9_3 = .;
MPRINT(EM_DIAGRAM):   _9_3 = .;
3086868   +      substr(_warn_,2,1) = 'U';
MPRINT(EM_DIAGRAM):   substr(_warn_,2,1) = 'U';
3086869   +      _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
3086870   +   end;
MPRINT(EM_DIAGRAM):   end;
3086871   +end;
MPRINT(EM_DIAGRAM):   end;
3086872   +
3086873   +*** If missing inputs, use averages;
MPRINT(EM_DIAGRAM):   *** If missing inputs, use averages;
3086874   +if _DM_BAD > 0 then do;
MPRINT(EM_DIAGRAM):   if _DM_BAD > 0 then do;
3086875   +   _P0 = 0.860911271;
MPRINT(EM_DIAGRAM):   _P0 = 0.860911271;
3086876   +   _P1 = 0.139088729;
MPRINT(EM_DIAGRAM):   _P1 = 0.139088729;
3086877   +   goto RULE4_2DR1;
MPRINT(EM_DIAGRAM):   goto RULE4_2DR1;
3086878   +end;
MPRINT(EM_DIAGRAM):   end;
3086879   +
3086880   +*** Compute Linear Predictor;
MPRINT(EM_DIAGRAM):   *** Compute Linear Predictor;
3086881   +drop _TEMP;
MPRINT(EM_DIAGRAM):   drop _TEMP;
3086882   +drop _LP0;
MPRINT(EM_DIAGRAM):   drop _LP0;
3086883   +_LP0 = 0;
MPRINT(EM_DIAGRAM):   _LP0 = 0;
3086884   +
3086885   +***  Effect: AcceptedCmp1 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp1 ;
3086886   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086887   +_LP0 = _LP0 + (   -0.16890678844078) * _TEMP * _1_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.16890678844078) * _TEMP * _1_0;
3086888   +
3086889   +***  Effect: AcceptedCmp2 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp2 ;
3086890   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086891   +_LP0 = _LP0 + (   -0.03354787759567) * _TEMP * _2_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.03354787759567) * _TEMP * _2_0;
3086892   +
3086893   +***  Effect: AcceptedCmp3 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp3 ;
3086894   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086895   +_LP0 = _LP0 + (    0.05226834720161) * _TEMP * _3_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.05226834720161) * _TEMP * _3_0;
3086896   +
3086897   +***  Effect: AcceptedCmp4 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp4 ;
3086898   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086899   +_LP0 = _LP0 + (   -0.05614277968589) * _TEMP * _4_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.05614277968589) * _TEMP * _4_0;
3086900   +
3086901   +***  Effect: AcceptedCmp5 ;
MPRINT(EM_DIAGRAM):   *** Effect: AcceptedCmp5 ;
3086902   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086903   +_LP0 = _LP0 + (    0.28035826890341) * _TEMP * _5_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.28035826890341) * _TEMP * _5_0;
3086904   +
3086905   +***  Effect: Age ;
MPRINT(EM_DIAGRAM):   *** Effect: Age ;
3086906   +_TEMP = Age ;
MPRINT(EM_DIAGRAM):   _TEMP = Age ;
3086907   +_LP0 = _LP0 + (   -0.00331888161595 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00331888161595 * _TEMP);
3086908   +
3086909   +***  Effect: Complain ;
MPRINT(EM_DIAGRAM):   *** Effect: Complain ;
3086910   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086911   +_LP0 = _LP0 + (    0.41932661341097) * _TEMP * _6_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.41932661341097) * _TEMP * _6_0;
3086912   +
3086913   +***  Effect: Education ;
MPRINT(EM_DIAGRAM):   *** Effect: Education ;
3086914   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086915   +_LP0 = _LP0 + (   -1.94148642567409) * _TEMP * _7_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.94148642567409) * _TEMP * _7_0;
3086916   +_LP0 = _LP0 + (    7.04331964927999) * _TEMP * _7_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 7.04331964927999) * _TEMP * _7_1;
3086917   +_LP0 = _LP0 + (   -1.84653459246083) * _TEMP * _7_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.84653459246083) * _TEMP * _7_2;
3086918   +_LP0 = _LP0 + (   -1.72829661845225) * _TEMP * _7_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -1.72829661845225) * _TEMP * _7_3;
3086919   +
3086920   +***  Effect: Frq ;
MPRINT(EM_DIAGRAM):   *** Effect: Frq ;
3086921   +_TEMP = Frq ;
MPRINT(EM_DIAGRAM):   _TEMP = Frq ;
3086922   +_LP0 = _LP0 + (    0.00727087817719 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00727087817719 * _TEMP);
3086923   +
3086924   +***  Effect: Income ;
MPRINT(EM_DIAGRAM):   *** Effect: Income ;
3086925   +_TEMP = Income ;
MPRINT(EM_DIAGRAM):   _TEMP = Income ;
3086926   +_LP0 = _LP0 + (   -0.00003549313241 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00003549313241 * _TEMP);
3086927   +
3086928   +***  Effect: Kidhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Kidhome ;
3086929   +_TEMP = Kidhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Kidhome ;
3086930   +_LP0 = _LP0 + (   -0.71347762563628 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.71347762563628 * _TEMP);
3086931   +
3086932   +***  Effect: Marital_Status ;
MPRINT(EM_DIAGRAM):   *** Effect: Marital_Status ;
3086933   +_TEMP = 1;
MPRINT(EM_DIAGRAM):   _TEMP = 1;
3086934   +_LP0 = _LP0 + (    0.62230545564027) * _TEMP * _9_0;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.62230545564027) * _TEMP * _9_0;
3086935   +_LP0 = _LP0 + (     0.0812166675529) * _TEMP * _9_1;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.0812166675529) * _TEMP * _9_1;
3086936   +_LP0 = _LP0 + (   -0.22016205695017) * _TEMP * _9_2;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.22016205695017) * _TEMP * _9_2;
3086937   +_LP0 = _LP0 + (   -0.27129885515911) * _TEMP * _9_3;
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.27129885515911) * _TEMP * _9_3;
3086938   +
3086939   +***  Effect: MntFishProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFishProducts ;
3086940   +_TEMP = MntFishProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFishProducts ;
3086941   +_LP0 = _LP0 + (    0.00043874339286 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00043874339286 * _TEMP);
3086942   +
3086943   +***  Effect: MntFruits ;
MPRINT(EM_DIAGRAM):   *** Effect: MntFruits ;
3086944   +_TEMP = MntFruits ;
MPRINT(EM_DIAGRAM):   _TEMP = MntFruits ;
3086945   +_LP0 = _LP0 + (   -0.00080533081632 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00080533081632 * _TEMP);
3086946   +
3086947   +***  Effect: MntGoldProds ;
MPRINT(EM_DIAGRAM):   *** Effect: MntGoldProds ;
3086948   +_TEMP = MntGoldProds ;
MPRINT(EM_DIAGRAM):   _TEMP = MntGoldProds ;
3086949   +_LP0 = _LP0 + (   -0.00010944243681 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00010944243681 * _TEMP);
3086950   +
3086951   +***  Effect: MntSweetProducts ;
MPRINT(EM_DIAGRAM):   *** Effect: MntSweetProducts ;
3086952   +_TEMP = MntSweetProducts ;
MPRINT(EM_DIAGRAM):   _TEMP = MntSweetProducts ;
3086953   +_LP0 = _LP0 + (   -0.00082832116638 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.00082832116638 * _TEMP);
3086954   +
3086955   +***  Effect: MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   *** Effect: MonthsAsCustomer ;
3086956   +_TEMP = MonthsAsCustomer ;
MPRINT(EM_DIAGRAM):   _TEMP = MonthsAsCustomer ;
3086957   +_LP0 = _LP0 + (    0.01256221882265 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.01256221882265 * _TEMP);
3086958   +
3086959   +***  Effect: NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   *** Effect: NumDealsPurchases ;
3086960   +_TEMP = NumDealsPurchases ;
MPRINT(EM_DIAGRAM):   _TEMP = NumDealsPurchases ;
3086961   +_LP0 = _LP0 + (   -0.11670159812232 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.11670159812232 * _TEMP);
3086962   +
3086963   +***  Effect: NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   *** Effect: NumWebVisitsMonth ;
3086964   +_TEMP = NumWebVisitsMonth ;
MPRINT(EM_DIAGRAM):   _TEMP = NumWebVisitsMonth ;
3086965   +_LP0 = _LP0 + (   -0.23476706905643 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( -0.23476706905643 * _TEMP);
3086966   +
3086967   +***  Effect: RFMstat ;
MPRINT(EM_DIAGRAM):   *** Effect: RFMstat ;
3086968   +_TEMP = RFMstat ;
MPRINT(EM_DIAGRAM):   _TEMP = RFMstat ;
3086969   +_LP0 = _LP0 + (  4.6096891616041E-6 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 4.6096891616041E-6 * _TEMP);
3086970   +
3086971   +***  Effect: RMntFrq ;
MPRINT(EM_DIAGRAM):   *** Effect: RMntFrq ;
3086972   +_TEMP = RMntFrq ;
MPRINT(EM_DIAGRAM):   _TEMP = RMntFrq ;
3086973   +_LP0 = _LP0 + (    0.00306634890495 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00306634890495 * _TEMP);
3086974   +
3086975   +***  Effect: Recency ;
MPRINT(EM_DIAGRAM):   *** Effect: Recency ;
3086976   +_TEMP = Recency ;
MPRINT(EM_DIAGRAM):   _TEMP = Recency ;
3086977   +_LP0 = _LP0 + (    0.00940933569599 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.00940933569599 * _TEMP);
3086978   +
3086979   +***  Effect: Teenhome ;
MPRINT(EM_DIAGRAM):   *** Effect: Teenhome ;
3086980   +_TEMP = Teenhome ;
MPRINT(EM_DIAGRAM):   _TEMP = Teenhome ;
3086981   +_LP0 = _LP0 + (    0.44425327545555 * _TEMP);
MPRINT(EM_DIAGRAM):   _LP0 = _LP0 + ( 0.44425327545555 * _TEMP);
3086982   +
3086983   +*** Naive Posterior Probabilities;
MPRINT(EM_DIAGRAM):   *** Naive Posterior Probabilities;
3086984   +drop _MAXP _IY _P0 _P1;
MPRINT(EM_DIAGRAM):   drop _MAXP _IY _P0 _P1;
3086985   +_TEMP =     5.81096403466168 + _LP0;
MPRINT(EM_DIAGRAM):   _TEMP = 5.81096403466168 + _LP0;
3086986   +if (_TEMP < 0) then do;
MPRINT(EM_DIAGRAM):   if (_TEMP < 0) then do;
3086987   +   _TEMP = exp(_TEMP);
MPRINT(EM_DIAGRAM):   _TEMP = exp(_TEMP);
3086988   +   _P0 = _TEMP / (1 + _TEMP);
MPRINT(EM_DIAGRAM):   _P0 = _TEMP / (1 + _TEMP);
3086989   +end;
MPRINT(EM_DIAGRAM):   end;
3086990   +else _P0 = 1 / (1 + exp(-_TEMP));
MPRINT(EM_DIAGRAM):   else _P0 = 1 / (1 + exp(-_TEMP));
3086991   +_P1 = 1.0 - _P0;
MPRINT(EM_DIAGRAM):   _P1 = 1.0 - _P0;
3086992   +
3086993   +RULE4_2DR1:
3086994   +
3086995   +
3086996   +*** Posterior Probabilities and Predicted Level;
MPRINT(EM_DIAGRAM):   RULE4_2DR1: *** Posterior Probabilities and Predicted Level;
3086997   +label P__bin1 = 'Predicted: _bin=1' ;
MPRINT(EM_DIAGRAM):   label P__bin1 = 'Predicted: _bin=1' ;
3086998   +label P__bin0 = 'Predicted: _bin=0' ;
MPRINT(EM_DIAGRAM):   label P__bin0 = 'Predicted: _bin=0' ;
3086999   +P__bin1 = _P0;
MPRINT(EM_DIAGRAM):   P__bin1 = _P0;
3087000   +_MAXP = _P0;
MPRINT(EM_DIAGRAM):   _MAXP = _P0;
3087001   +_IY = 1;
MPRINT(EM_DIAGRAM):   _IY = 1;
3087002   +P__bin0 = _P1;
MPRINT(EM_DIAGRAM):   P__bin0 = _P1;
3087003   +if (_P1 >  _MAXP + 1E-8) then do;
MPRINT(EM_DIAGRAM):   if (_P1 > _MAXP + 1E-8) then do;
3087004   +   _MAXP = _P1;
MPRINT(EM_DIAGRAM):   _MAXP = _P1;
3087005   +   _IY = 2;
MPRINT(EM_DIAGRAM):   _IY = 2;
3087006   +end;
MPRINT(EM_DIAGRAM):   end;
3087007   +I__bin = RULE4_2DRF[_IY];
MPRINT(EM_DIAGRAM):   I__bin = RULE4_2DRF[_IY];
3087008   +U__bin = RULE4_2DRU[_IY];
MPRINT(EM_DIAGRAM):   U__bin = RULE4_2DRU[_IY];
3087009   +
3087010   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3087011   +***** end scoring code for regression;
MPRINT(EM_DIAGRAM):   ***** end scoring code for regression;
3087012   +*************************************;
MPRINT(EM_DIAGRAM):   *************************************;
3087013   +*;
MPRINT(EM_DIAGRAM):   *;
3087014   +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3087015   +if I__bin eq '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin eq '1' then do;
3087016   +I_DepVar = ("1");
MPRINT(EM_DIAGRAM):   I_DepVar = ("1");
3087017   +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3087018   +P_DepVar1=P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar1=P__bin1;
3087019   +P_DepVar0 = 1-P__bin1;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 1-P__bin1;
3087020   +end;
MPRINT(EM_DIAGRAM):   end;
3087021   +*;
MPRINT(EM_DIAGRAM):   *;
3087022   +*;
MPRINT(EM_DIAGRAM):   *;
3087023   +end;
MPRINT(EM_DIAGRAM):   end;
3087024   +*;
MPRINT(EM_DIAGRAM):   *;
3087025   +DROP P__bin1 P__bin0;
MPRINT(EM_DIAGRAM):   DROP P__bin1 P__bin0;
3087026   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3087027   +* Cleanup Model for DepVar;
MPRINT(EM_DIAGRAM):   * Cleanup Model for DepVar;
3087028   +* Null Model based on training frequencies;
MPRINT(EM_DIAGRAM):   * Null Model based on training frequencies;
3087029   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3087030   +%DMNORMIP(I__bin);
MPRINT(DMNORMIP):   call dmnorm(I__bin,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
MPRINT(EM_DIAGRAM):  ;
3087031   +if I__bin ne '1' then do;
MPRINT(EM_DIAGRAM):   if I__bin ne '1' then do;
3087032   +I_DepVar = ("1");
MPRINT(EM_DIAGRAM):   I_DepVar = ("1");
3087033   +%DMNORMCP(I_DepVar, I_DepVar);
MPRINT(DMNORMCP):   I_DepVar=dmnorm(I_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3087034   +P_DepVar1 = 0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
3087035   +P_DepVar0 = 0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
3087036   +*;
MPRINT(EM_DIAGRAM):   *;
3087037   +end;
MPRINT(EM_DIAGRAM):   end;
3087038   +*;
MPRINT(EM_DIAGRAM):   *;
3087039   +*;
MPRINT(EM_DIAGRAM):   *;
3087040   +drop U__bin _bin;
MPRINT(EM_DIAGRAM):   drop U__bin _bin;
3087041   +*;
MPRINT(EM_DIAGRAM):   *;
3087042   +_FORMAT = PUT(DepVar, BEST.);
MPRINT(EM_DIAGRAM):   _FORMAT = PUT(DepVar, BEST.);
3087043   +%DMNORMCP(_FORMAT, F_DepVar);
MPRINT(DMNORMCP):   F_DepVar=dmnorm(_FORMAT,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMCP):  );
MPRINT(EM_DIAGRAM):  ;
3087044   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3087045   +*Computing Residual Vars: DepVar;
MPRINT(EM_DIAGRAM):   *Computing Residual Vars: DepVar;
3087046   +*------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
3087047   +Label R_DepVar1='Residual: DepVar=1';
MPRINT(EM_DIAGRAM):   Label R_DepVar1= 'Residual: DepVar=1';
3087048   +Label R_DepVar0='Residual: DepVar=0';
MPRINT(EM_DIAGRAM):   Label R_DepVar0= 'Residual: DepVar=0';
3087049   +if
3087050   + F_DepVar ne '1'
3087051   +and F_DepVar ne '0'
3087052   + then do;
MPRINT(EM_DIAGRAM):   if F_DepVar ne '1' and F_DepVar ne '0' then do;
3087053   +R_DepVar1=.;
MPRINT(EM_DIAGRAM):   R_DepVar1=.;
3087054   +R_DepVar0=.;
MPRINT(EM_DIAGRAM):   R_DepVar0=.;
3087055   +end;
MPRINT(EM_DIAGRAM):   end;
3087056   +else do;
MPRINT(EM_DIAGRAM):   else do;
3087057   +R_DepVar1= - P_DepVar1;
MPRINT(EM_DIAGRAM):   R_DepVar1= - P_DepVar1;
3087058   +R_DepVar0= - P_DepVar0;
MPRINT(EM_DIAGRAM):   R_DepVar0= - P_DepVar0;
3087059   +select(F_DepVar);
MPRINT(EM_DIAGRAM):   select(F_DepVar);
3087060   +when('1')R_DepVar1= R_DepVar1+1;
MPRINT(EM_DIAGRAM):   when('1')R_DepVar1= R_DepVar1+1;
3087061   +when('0')R_DepVar0= R_DepVar0+1;
MPRINT(EM_DIAGRAM):   when('0')R_DepVar0= R_DepVar0+1;
3087062   +otherwise;
MPRINT(EM_DIAGRAM):   otherwise;
3087063   +end;
MPRINT(EM_DIAGRAM):   end;
3087064   +end;
MPRINT(EM_DIAGRAM):   end;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
3087065    run;
 
NOTE: DATA STEP view saved on file EMWS8.RULE4_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.META3_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.06 seconds
 
NOTE: DATA statement used (Total process time):
      real time           0.06 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):   quit;
3087066    quit;
3087067    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpTrainFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Rule4_TRAIN end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Train: Target Variable" _NOBS_= "Train: Sum of
Frequencies" _SSE_= "Train: Sum of Squared Errors" _MAX_= "Train: Maximum Absolute Error"
_DIV_ = "Train: Divisor for ASE" _WRONG_= "Train: Number of Wrong Classifications" _DISF_=
"Train: Frequency of Classified Cases" _MISC_= "Train: Misclassification Rate" _ASE_ = "Train:
Average Squared Error" _RASE_ = "Train: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set _tmpTrainFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(CALFITSTATSNOMINAL):   data _tmpValidFitTable(keep=_TARGET_ _ASE_ _DIV_ _MAX_ _NOBS_
_RASE_ _SSE_ _DISF_ _MISC_ _WRONG_ rename=(_TARGET_=TARGET));
MPRINT(CALFITSTATSNOMINAL):   set EMWS8.Rule4_VALIDATE end=eof;
MPRINT(CALFITSTATSNOMINAL):   length _TARGET_ $32;
MPRINT(CALFITSTATSNOMINAL):   length _ASE_ _DIV_ _MAX_ _NOBS_ _RASE_ _SSE_ _DISF_ _MISC_
_WRONG_ 8;
MPRINT(CALFITSTATSNOMINAL):   label _TARGET_ = "Valid: Target Variable" _NOBS_= "Valid: Sum of
Frequencies" _SSE_= "Valid: Sum of Squared Errors" _MAX_= "Valid: Maximum Absolute Error"
_DIV_ = "Valid: Divisor for ASE" _WRONG_= "Valid: Number of Wrong Classifications" _DISF_=
"Valid: Frequency of Classified Cases" _MISC_= "Valid: Misclassification Rate" _ASE_ = "Valid:
Average Squared Error" _RASE_ = "Valid: Root Average Squared Error";
MPRINT(CALFITSTATSNOMINAL):   retain _TARGET_ _WRONG_ _DIV_ _MAX_ _SSE_ _DISF_ _MISC_ _ASE_
_RASE_ ;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar1 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar1)*(R_DepVar1);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar1));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if R_DepVar0 ne . then do;
MPRINT(CALFITSTATSNOMINAL):   _SSE_ +(R_DepVar0)*(R_DepVar0);
MPRINT(CALFITSTATSNOMINAL):   _DIV_ +1;
MPRINT(CALFITSTATSNOMINAL):   _MAX_ =max(_MAX_ ,abs(R_DepVar0));
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if F_DepVar ne "" then do;
MPRINT(CALFITSTATSNOMINAL):   _DISF_+ 1;
MPRINT(CALFITSTATSNOMINAL):   _WRONG_+(F_DepVar ne I_DepVar);
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   if eof then do;
MPRINT(CALFITSTATSNOMINAL):   _TARGET_ = "DepVar";
MPRINT(CALFITSTATSNOMINAL):   _MAX = 0;
MPRINT(CALFITSTATSNOMINAL):   if _DISF_ ne 0 then do;
MPRINT(CALFITSTATSNOMINAL):   _MISC_=_WRONG_/_DISF_;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   _NOBS_ = _DIV_/2;
MPRINT(CALFITSTATSNOMINAL):   _ASE_=_SSE_/_DIV_;
MPRINT(CALFITSTATSNOMINAL):   _RASE_=sqrt(_ASE_);
MPRINT(CALFITSTATSNOMINAL):   output;
MPRINT(CALFITSTATSNOMINAL):   end;
MPRINT(CALFITSTATSNOMINAL):   run;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   data _tmpdata_(DROP= TARGET);
MPRINT(EM_DIAGRAM):   set _tmpValidFitTable;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _tmpdata_;
MPRINT(EM_DIAGRAM):   set _tmpdata_;
MPRINT(EM_DIAGRAM):   rename _ASE_=_VASE_;
MPRINT(EM_DIAGRAM):   rename _DIV_=_VDIV_;
MPRINT(EM_DIAGRAM):   rename _MAX_=_VMAX_;
MPRINT(EM_DIAGRAM):   rename _NOBS_=_VNOBS_;
MPRINT(EM_DIAGRAM):   rename _RASE_=_VRASE_;
MPRINT(EM_DIAGRAM):   rename _SSE_=_VSSE_;
MPRINT(EM_DIAGRAM):   rename _DISF_=_VDISF_;
MPRINT(EM_DIAGRAM):   rename _MISC_=_VMISC_;
MPRINT(EM_DIAGRAM):   rename _WRONG_=_VWRONG_;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   merge EMWS8.Rule4_EMOUTFIT _tmpdata_;
MPRINT(EM_DIAGRAM):   run;
3087127    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
3087128    * Rule4: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * Rule4: Computing metadata for TRAIN data;
3087129    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
 
NOTE: View EMWS8.RULE4_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.Rule4_TRAIN out=_tempAdvisor noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.Rule4_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.Rule4_TRAIN out=WORK.M2Z29JTH noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z29JTH;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z29JTH(keep=name type length label format formatl
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl,
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd,
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat =
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl,
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M2Z29JTH;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M2Z29JTH;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M1UJTY1Q NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1UJTY1Q;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M1UJTY1Q;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1KPESQ6(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M1UJTY1Q;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1UJTY1Q;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M1UJTY1Q;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN"
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO"
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON"
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD"
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" ))
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype =
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" ))
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT"
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB"
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType =
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA',
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W',
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL',
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT',
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M1UJTY1Q;
MPRINT(EMADVISECOLUMNS):   set WORK.M1UJTY1Q;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL=
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY=
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT=
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL=
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.Meta3_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Meta3_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "Rule4";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "Rule4";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "Rule4";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "Rule4";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "Rule4";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "Rule4";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "Rule4";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "Rule4";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "Rule4";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "Rule4";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * Rule4: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   if name = '_NODE_' then role = 'SEGMENT';
MPRINT(EM_DIAGRAM):   if name = '_LEAF_' then role = 'REJECTED';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
3087443    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
3087444    set EMWS8.Rule4_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_EMINFO;
3087445    where DATA='Rule4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='Rule4' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE',
'MODEL');
3087446    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 0 observations read from the data set EMWS8.RULE4_EMINFO.
      WHERE (DATA='Rule4') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3087447    data EMWS8.Rule4_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule4_EMINFO;
3087448    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
3087449    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
3087450    cards;
MPRINT(EM_DIAGRAM):   cards;
 
NOTE: The data set EMWS8.RULE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
MPRINT(EM_DIAGRAM):   run;
3087454    run;
3087455    data EMWS8.Rule4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_EMINFO;
3087456    set EMWS8.Rule4_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_EMINFO WORK.MODELTEMP_INFO;
3087457    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.RULE4_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.RULE4_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3087458    proc sort data = EMWS8.Rule4_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.Rule4_EMINFO NOTHREADS;
3087459    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3087460    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 3 observations read from the data set EMWS8.RULE4_EMINFO.
NOTE: The data set EMWS8.RULE4_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3087461    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
3087462    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3087463    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3087464    proc sort data = EMWS8.Rule4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.Rule4_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
3087465    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3087466    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.RULE4_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3087467    data EMWS8.Rule4_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_EMINFO;
3087468    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
3087469    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
3087470    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.RULE4_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3087471    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
3087472    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
3087473    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
3087474    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.08 seconds
      cpu time            0.09 seconds
 
 
NOTE: View EMWS8.RULE4_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.04 seconds
 
NOTE: View EMWS8.RULE4_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
 
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "11.02 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Report Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Report Log
Date:                28. April 2016
Time:                11.02 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O19A9P26
"C:\\predictive-models-project\Workspaces\EMWS8\Rule4\EMREPORT.out" encoding="UTF-8" NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O19A9P26 new;
MPRINT(EM_DIAGRAM):   run;
3087498    data EMWS8.Rule4_EMOUTFIT;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule4_EMOUTFIT;
3087499    set EMWS8.Rule4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_EMOUTFIT;
3087500    length TargetLabel $200;
MPRINT(EM_DIAGRAM):   length TargetLabel $200;
3087501    label targetLabel = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel,
3087501  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label targetLabel = "Target Label";
3087502    if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TargetLabel = 'DepVar';
3087503    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.RULE4_EMOUTFIT.
NOTE: The data set EMWS8.RULE4_EMOUTFIT has 1 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3087504    proc sort data=EMWS8.Rule4_EMREPORTFIT nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Rule4_EMREPORTFIT nothreads;
3087505    by TARGET;
MPRINT(EM_DIAGRAM):   by TARGET;
3087506    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 9 observations read from the data set EMWS8.RULE4_EMREPORTFIT.
NOTE: The data set EMWS8.RULE4_EMREPORTFIT has 9 observations and 7 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3087507    %let _EMwarndup = 0;
3087508    %let _EMtargetdup =;
3087509    %let _EMASEtargetdup =;
3087510    data _null_;
MPRINT(EM_DIAGRAM):    data _null_;
3087511    set EMWS8.Rule4_EMOUTFIT;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_EMOUTFIT;
3087512    if .<_ASE_<0.000001 then do;
MPRINT(EM_DIAGRAM):   if .<_ASE_<0.000001 then do;
3087513    call symput('_EMwarndup', '1');
MPRINT(EM_DIAGRAM):   call symput('_EMwarndup', '1');
3087514    call symput('_EMtargetdup', target);
MPRINT(EM_DIAGRAM):   call symput('_EMtargetdup', target);
3087515    call symput('_EMASEtargetdup', put(_ASE_, best.));
MPRINT(EM_DIAGRAM):   call symput('_EMASEtargetdup', put(_ASE_, best.));
3087516    end;
MPRINT(EM_DIAGRAM):   end;
3087517    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 1 observations read from the data set EMWS8.RULE4_EMOUTFIT.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3087518    proc sort data=EMWS8.Meta3_CMeta_TRAIN out=WORK.SUBSETINMETA;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Meta3_CMeta_TRAIN out=WORK.SUBSETINMETA;
3087519    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3087520    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set EMWS8.META3_CMETA_TRAIN.
NOTE: The data set WORK.SUBSETINMETA has 36 observations and 20 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3087521    proc sort data=EMWS8.Rule4_VariableSet out=WORK.SUBSETVARSET(keep=NAME REPORT);
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.Rule4_VariableSet out=WORK.SUBSETVARSET(keep=NAME
REPORT);
3087522    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3087523    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 34 observations read from the data set EMWS8.RULE4_VARIABLESET.
NOTE: The data set WORK.SUBSETVARSET has 34 observations and 2 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3087524    data WORK.ASSESS_META;
MPRINT(EM_DIAGRAM):   data WORK.ASSESS_META;
3087525    merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
MPRINT(EM_DIAGRAM):   merge WORK.SUBSETINMETA WORK.SUBSETVARSET;
3087526    by NAME;
MPRINT(EM_DIAGRAM):   by NAME;
3087527    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 36 observations read from the data set WORK.SUBSETINMETA.
NOTE: There were 34 observations read from the data set WORK.SUBSETVARSET.
NOTE: The data set WORK.ASSESS_META has 36 observations and 20 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3087528    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
3087529    set EMWS8.Rule4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_CMeta_TRAIN;
3087530    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
3087530  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
3087531    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS8.RULE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3087532    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
3087533    set EMWS8.Rule4_TRAIN(keep=
3087534    F_DepVar
3087535    I_DepVar
3087536    P_DepVar0
3087537    P_DepVar1
3087538    R_DepVar0
3087539    R_DepVar1
3087540    _WARN_
3087541    DepVar
3087542    );
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_TRAIN(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 _WARN_ DepVar );
3087543    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _bin is uninitialized.
NOTE: There were 2374 observations read from the data set EMWS8.PART_TRAIN.
NOTE: View EMWS8.RULE4_TRAIN.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 2374 observations read from the data set EMWS8.META3_TRAIN.
NOTE: There were 2374 observations read from the data set EMWS8.RULE4_TRAIN.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 2374 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Rule4_2TKS0NI nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Rule4_2TKS0NI;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Rule4_2TKS0NI(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "TRAIN" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule4_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set WORK.Rule4_2TKS0NI;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Rule4_2TKS0NI;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.151221567 _NEVENTS 359
_NNONEVENTS 2015 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 2374));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "TRAIN" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0000230831 OVLMAX 0.9999874137 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 2374 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 2374)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 2374 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 2374;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_EMRANK;
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "TRAIN";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
3091809    data EM_temp_assessMeta;
MPRINT(EM_DIAGRAM):    data EM_temp_assessMeta;
3091810    set EMWS8.Rule4_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_CMeta_TRAIN;
3091811    where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION', 'ASSESS', 'COST')
3091811  ! ;
MPRINT(EM_DIAGRAM):   where role in('DECISION', 'PREDICT', 'RESIDUAL', 'CLASSIFICATION',
'ASSESS', 'COST');
3091812    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 7 observations read from the data set EMWS8.RULE4_CMETA_TRAIN.
      WHERE role in ('ASSESS', 'CLASSIFICATION', 'COST', 'DECISION', 'PREDICT', 'RESIDUAL');
NOTE: The data set WORK.EM_TEMP_ASSESSMETA has 7 observations and 21 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3091813    data EM_temp_assessdata;
MPRINT(EM_DIAGRAM):    data EM_temp_assessdata;
3091814    set EMWS8.Rule4_VALIDATE(keep=
3091815    F_DepVar
3091816    I_DepVar
3091817    P_DepVar0
3091818    P_DepVar1
3091819    R_DepVar0
3091820    R_DepVar1
3091821    _WARN_
3091822    DepVar
3091823    );
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_VALIDATE(keep= F_DepVar I_DepVar P_DepVar0 P_DepVar1
R_DepVar0 R_DepVar1 _WARN_ DepVar );
3091824    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: Variable _bin is uninitialized.
NOTE: There were 1018 observations read from the data set EMWS8.PART_VALIDATE.
NOTE: View EMWS8.RULE4_VALIDATE.VIEW used (Total process time):
      real time           0.05 seconds
      cpu time            0.04 seconds
 
NOTE: There were 1018 observations read from the data set EMWS8.META3_VALIDATE.
NOTE: There were 1018 observations read from the data set EMWS8.RULE4_VALIDATE.
NOTE: The data set WORK.EM_TEMP_ASSESSDATA has 1018 observations and 8 variables.
NOTE: DATA statement used (Total process time):
      real time           0.07 seconds
      cpu time            0.06 seconds
 
 
MPRINT(EM_DIAGRAM):    proc freq data=EM_temp_assessdata noprint;
MPRINT(EM_DIAGRAM):   table I_DepVar*F_DepVar / out = WORK.Rule4_1BNRNID nocol norow outpct;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.Rule4_1BNRNID;
MPRINT(EM_DIAGRAM):   length _TYPE_ $10 DATAROLE TARGET $32 TARGETLABEL $200 FROM INTO $32
CORRECTTEXT $40 ;
MPRINT(EM_DIAGRAM):   label _TYPE_ = "Outcome Type";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role";
MPRINT(EM_DIAGRAM):   label TARGET = "Target Variable";
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
MPRINT(EM_DIAGRAM):   label CORRECTTEXT = "Correct Text";
MPRINT(EM_DIAGRAM):   label CORRECT = "Correct";
MPRINT(EM_DIAGRAM):   set WORK.Rule4_1BNRNID(rename=(F_DepVar=FROM I_DepVar=INTO));
MPRINT(EM_DIAGRAM):   retain _TYPE_ 'PREDICTION' DATAROLE "VALIDATE" TARGET "DepVar";
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   if FROM eq INTO then do;
MPRINT(EM_DIAGRAM):   CORRECT = 0;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Correct";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   else do;
MPRINT(EM_DIAGRAM):   CORRECT = 1;
MPRINT(EM_DIAGRAM):   CORRECTTEXT="Incorrect";
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule4_EMCLASSIFICATION;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_EMCLASSIFICATION WORK.Rule4_1BNRNID;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   set WORK.Rule4_1BNRNID;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK.MISCREPORT(drop=INTO FROM _TYPE_);
MPRINT(EM_DIAGRAM):   set WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   length MISC $12;
MPRINT(EM_DIAGRAM):   if FROM='1' and INTO='1' then MISC='TRUEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM='1' and INTO ne '1' then MISC='FALSENEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne '1' and INTO='1' then MISC='FALSEEVENT';
MPRINT(EM_DIAGRAM):   else if FROM ne'1' and INTO ne '1' then MISC='TRUENEVENT';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.MISCREPORT nothreads;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc summary data=WORK.MISCREPORT NWAY;
MPRINT(EM_DIAGRAM):   output out=WORK.MISCCOUNT(drop=_FREQ_ _TYPE_) SUM=COUNT;
MPRINT(EM_DIAGRAM):   CLASS MISC;
MPRINT(EM_DIAGRAM):   VAR COUNT;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc transpose data=WORK.MISCCOUNT out=WORK.MISCREPORT(drop=_NAME_
_LABEL_);
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET;
MPRINT(EM_DIAGRAM):   ID MISC;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data EMWS8.Rule4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_EMEVENTREPORT WORK.MISCREPORT;
MPRINT(EM_DIAGRAM):   if upcase(TARGET) eq "DEPVAR" then TARGETLABEL = 'DepVar';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data ASSESS_REPORTMETA;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_VariableSet;
MPRINT(EM_DIAGRAM):   where REPORT='Y';
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename temp catalog 'sashelp.emassmt.em_assess.source';
MPRINT(EM_DIAGRAM):   filename temp;
MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_DepVar_DM;
MPRINT(EM_DIAGRAM):   where _TYPE_="TARGET";
MPRINT(EM_DIAGRAM):   call symput('ASSMT_EVENT', strip(event));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):
MPRINT(EM_ASSESS):   data _ea_tmpdata;
MPRINT(EM_ASSESS):   set EM_temp_assessdata;
MPRINT(EM_ASSESS):   _tmpfreqvar_=1;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_CHECKEMSETINIT):   DATA _NULL_;
MPRINT(EM_CHECKEMSETINIT):   EM_SETINIT = 'N';
MPRINT(EM_CHECKEMSETINIT):   IF SYSPROD('PRODNUM50') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM448') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM102') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   ELSE IF SYSPROD('PRODNUM103') THEN EM_SETINIT = 'Y';
MPRINT(EM_CHECKEMSETINIT):   CALL SYMPUT('EM_SETINIT', EM_SETINIT);
MPRINT(EM_CHECKEMSETINIT):   RUN;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Reading in reporting data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET ASSESS_REPORTMETA END = EOF;
MPRINT(EM_ASSESS):   IF TYPE = "C" OR UPCASE (LEVEL) IN ("NOMINAL", "BINARY" , "ORDINAL") THEN
DO;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMCTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTC" || LEFT (PUT (NUMCTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "C");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF UPCASE(NAME) NE UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   NUMNTOREPORT + 1;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("REPORTN" || LEFT (PUT (NUMNTOREPORT, 5.)), NAME);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("RPRT_TRGT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMNTOREPORT", NUMNTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMCTOREPORT", NUMCTOREPORT);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMTOREPORT", SUM (NUMNTOREPORT, NUMCTOREPORT));
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   PROC DMDB DATA = _ea_tmpdata VAROUT = VAROUT DMDBCAT = _D CLASSOUT =
_ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   CLASS F_DepVar ;
 
MPRINT(EM_ASSESS):   VAR P_DepVar1 _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_;
MPRINT(EM_ASSESS):   RUN ;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   PROC SORT DATA = _ASSMT_CLASSOUT;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _auxeventname (keep = __event__) ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ...FLAG0_1 = ..... TARGET IS 0, 1 & EVENT = 1;
 
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   length __event__ $ 32;
MPRINT(EM_ASSESS):   RETAIN FLAG0_1 1 NUM1 . NUM0 . __event__ "_missing_" ;
 
MPRINT(EM_ASSESS):   SET _ASSMT_CLASSOUT END = EOF;
MPRINT(EM_ASSESS):   BY NAME;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ....... LEVEL = BINARY OR NOMINAL OR ORDINAL;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   IF UPCASE(NAME) = UPCASE ("F_DepVar") THEN DO;
MPRINT(EM_ASSESS):   CUMFREQ + FREQUENCY;
MPRINT(EM_ASSESS):   IF LEVEL NE "." THEN DO;
MPRINT(EM_ASSESS):   N1 + 1;
MPRINT(EM_ASSESS):   IF (NRAW NE 0 AND NRAW NE 1) OR TYPE NE "N" OR "" > " " THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * ......................... IF EVENT NE BLANK;
MPRINT(EM_ASSESS):   * ....................LEVEL IS CHAR VAR ;
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   IF UPCASE("1") = UPCASE(LEVEL) THEN DO;
MPRINT(EM_ASSESS):   NUM1 = FREQUENCY;
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", CRAW );
MPRINT(EM_ASSESS):   __event__ = craw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   ELSE do;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("EVENTVALUERAW", NRAW );
MPRINT(EM_ASSESS):   __event__ = nraw;
MPRINT(EM_ASSESS):   end;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF LAST.NAME THEN DO;
 
MPRINT(EM_ASSESS):   * ;
MPRINT(EM_ASSESS):   * .............. IN NOMINAL CASE, NEED TO GROUP ALL '0' ;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   NUM0 = SUM (CUMFREQ, - NUM1);
MPRINT(EM_ASSESS):   IF NUM0 < 0 THEN NUM0 = 0;
MPRINT(EM_ASSESS):   IF NUM1 = . THEN NUM1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM0", NUM0 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUM1", NUM1);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM1", NUM1 / CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PNUM0", (CUMFREQ - NUM1) / CUMFREQ);
MPRINT(EM_ASSESS):   IF TYPE = "C" THEN DO;
MPRINT(EM_ASSESS):   FLAG0_1 = 0;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "C" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF TYPE = "N" THEN DO;
MPRINT(EM_ASSESS):   IF "" = " " THEN DO;
MPRINT(EM_ASSESS):   IF "1" NE "1" THEN FLAG0_1 = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("TARGETTYPE", "N" );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ................... IF TYPE = N;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("FLAG0_1", FLAG0_1 );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................IF LAST.NAME ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ...............IF LEVEL NE '.' ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * .............. IF NAME = TARGET;
MPRINT(EM_ASSESS):   ELSE IF "" > " " AND UPCASE(NAME) = UPCASE("") THEN DO;
MPRINT(EM_ASSESS):   NUMDECISIONS + 1;
MPRINT(EM_ASSESS):   LEVEL = TRANSLATE (LEVEL, "_", "'", "_", '"');
MPRINT(EM_ASSESS):   CALL SYMPUTX ("D_LABEL" || LEFT (PUT (NUMDECISIONS, 3.)), LEVEL );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   * ..................... ELSE IF UPCASE;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   output _auxeventname;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMOBS", CUMFREQ);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NUMDECISIONS", NUMDECISIONS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _NULL_;
MPRINT(EM_ASSESS):   SET VAROUT END = EOF;
MPRINT(EM_ASSESS):   IF UPCASE (NAME) = UPCASE ("P_DepVar1") THEN DO;
MPRINT(EM_ASSESS):   IF N = 0 THEN DO;
MPRINT(EM_ASSESS):   PUT //// "          Warning: All posterior probabilities are missing
values ";
MPRINT(EM_ASSESS):   PUT ///;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("ALLMISS", 1);
MPRINT(EM_ASSESS):   STOP;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("ALLMISS", 0);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB", MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB", MAX);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("DIFF", MAX - MIN);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("NMISSPROB", NMISS);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE IF UPCASE (NAME) = UPCASE ("_tmpfreqvar_") THEN DO;
MPRINT(EM_ASSESS):   AUXMIN = MIN - INT (MIN);
MPRINT(EM_ASSESS):   AUXMAX = MAX - INT (MAX);
MPRINT(EM_ASSESS):   IF AUXMIN > 0 OR AUXMAX > 0 THEN CALL SYMPUTX ("USEWEIGHT", "Y");
MPRINT(EM_ASSESS):   ELSE CALL SYMPUTX ("USEWEIGHT", "N");
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   DATA _ANY0;
MPRINT(EM_ASSESS):   SET _ea_tmpdata (KEEP = F_DepVar P_DepVar1 _tmpfreqvar_ );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................... No Formats;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF LEFT ( F_DepVar ) = "1" THEN NTARGET = 1;
MPRINT(EM_ASSESS):   ELSE NTARGET = 0;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Before proc summary of binary case;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC SUMMARY DATA = _ANY0 (KEEP = P_DepVar1 NTARGET _tmpfreqvar_ WHERE =
(NTARGET > . )) NWAY MISSING;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   CLASS P_DepVar1 ;
MPRINT(EM_ASSESS):   VAR NTARGET ;
MPRINT(EM_ASSESS):   FREQ _tmpfreqvar_ ;
MPRINT(EM_ASSESS):   OUTPUT OUT = ANYSUM (DROP = _TYPE_) MEAN = _MEANTARGET _MEANFREQVAR ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... Main Data Set Processing, Binary case;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK (KEEP = BASECAPC BASECAP __EVENT__ BASEEVENTS
BASEGAIN BASELIFT BASERESP BASERESPC BESTCAP BESTCAPC BESTGAIN BESTLIFT BESTLIFTC
BESTNUMEVENTS BESTRESP BESTRESPC BIN CBASELIFT C_LIFT C_P_CAPT_RESP C_P_RESP GAIN LIFT MAXPROB
MINPROB MNPROB NUMNONRESP NUMOBS NUMRESP PERCENTILE P_CAPT_RESP P_RESP ) WORK._TEMPSCOREDIST
(KEEP = BIN LOWERPROB UPPERPROB EVENTVALUE SCR_NUMEVENTS MODELSCORE SCR_NUMNONEVENTS RANGE
NUMOBSINGROUP PERCOBSINGROUP C_PERCOBSINGROUP SCR_P_EVENTS SCR_CP_EVENTS SCR_P_NONEVENTS
SCR_CP_NONEVENTS SCR_MNPROB SCR_MINPROB SCR_MAXPROB ) ;
 
MPRINT(EM_ASSESS):   SET ANYSUM END = EOF;
 
MPRINT(EM_ASSESS):   IF _N_ = 1 THEN SET _AUXEVENTNAME;
 
MPRINT(EM_ASSESS):   RETAIN MINPROB1 - MINPROB20 1 MAXPROB1 - MAXPROB20 0 MNPROB1 - MNPROB20 0
NUMOBS1 - NUMOBS20 0 NUMRESP1 - NUMRESP20 0 TRUEPOS1 - TRUEPOS100 0 TRUENEG1 - TRUENEG100 0
FALSEPOS1 - FALSEPOS100 0 FALSENEG1 - FALSENEG100 0 EVENTS1 - EVENTS100 NONEVENTS1 -
NONEVENTS100 0 FIRSTIN1 - FIRSTIN100 . LASTIN1 - LASTIN100 . RESPRATE 0.152259332 _NEVENTS 155
_NNONEVENTS 863 TARGET "NTARGET" ;
MPRINT(EM_ASSESS):   ARRAY MINPROBS (20) MINPROB1 - MINPROB20;
MPRINT(EM_ASSESS):   ARRAY MAXPROBS (20) MAXPROB1 - MAXPROB20;
MPRINT(EM_ASSESS):   ARRAY MNPROBS (20) MNPROB1 - MNPROB20;
MPRINT(EM_ASSESS):   ARRAY NUMOBSS (20) NUMOBS1 - NUMOBS20;
MPRINT(EM_ASSESS):   ARRAY NUMRESPS (20) NUMRESP1 - NUMRESP20;
MPRINT(EM_ASSESS):   ARRAY TRUEPOSX (100) TRUEPOS1 - TRUEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSEPOSX (100) FALSEPOS1 - FALSEPOS100;
MPRINT(EM_ASSESS):   ARRAY FALSENEGX (100) FALSENEG1 - FALSENEG100;
MPRINT(EM_ASSESS):   ARRAY TRUENEGX (100) TRUENEG1 - TRUENEG100;
MPRINT(EM_ASSESS):   ARRAY _EVENTS (100) EVENTS1 - EVENTS100;
MPRINT(EM_ASSESS):   ARRAY NONEVENTS (100) NONEVENTS1 - NONEVENTS100;
MPRINT(EM_ASSESS):   ARRAY FIRSTIN (100) FIRSTIN1 - FIRSTIN100;
MPRINT(EM_ASSESS):   ARRAY LASTIN (100) LASTIN1 - LASTIN100;
MPRINT(EM_ASSESS):   RETAIN SCR_MNPROB1 - SCR_MNPROB100 0 SCR_MINPROB1 - SCR_MINPROB100 1
SCR_MAXPROB1 - SCR_MAXPROB100 0;
MPRINT(EM_ASSESS):   ARRAY SCR_MNPROBS (100) SCR_MNPROB1 - SCR_MNPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MINPROBS (100) SCR_MINPROB1 - SCR_MINPROB100;
MPRINT(EM_ASSESS):   ARRAY SCR_MAXPROBS (100) SCR_MAXPROB1 - SCR_MAXPROB100;
MPRINT(EM_ASSESS):   DROP SCR_MINPROB1 - SCR_MINPROB100 SCR_MAXPROB1 - SCR_MAXPROB100
SCR_MNPROB1 - SCR_MNPROB100 ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...... Area For 8 Financials ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF _MEANTARGET = . THEN _MEANTARGET = RESPRATE;
MPRINT(EM_ASSESS):   DROP N1 _K SUMWEIGHTS ;
MPRINT(EM_ASSESS):   SUMWEIGHTS = 1;
 
MPRINT(EM_ASSESS):   DO _K = 1 TO CEIL (_FREQ_);
MPRINT(EM_ASSESS):   IF _K = CEIL (_FREQ_) THEN DO;
MPRINT(EM_ASSESS):   IF _FREQ_ < CEIL (_FREQ_) THEN _WEIGHT = _FREQ_ - FLOOR (_FREQ_);
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE _WEIGHT = 1;
MPRINT(EM_ASSESS):   N1 + _WEIGHT;
MPRINT(EM_ASSESS):   NTARGET = _MEANTARGET ;
MPRINT(EM_ASSESS):   DECILE = MIN (20, CEIL (N1 * 20 / 1018));
MPRINT(EM_ASSESS):   MINPROBS ( DECILE) = MIN (MINPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MAXPROBS ( DECILE) = MAX (MAXPROBS ( DECILE), P_DepVar1 );
MPRINT(EM_ASSESS):   MNPROBS ( DECILE) = SUM (MNPROBS ( DECILE), P_DepVar1 * _WEIGHT);
MPRINT(EM_ASSESS):   NUMOBSS ( DECILE) = NUMOBSS ( DECILE) + _WEIGHT;
MPRINT(EM_ASSESS):   NUMRESPS ( DECILE) = NUMRESPS ( DECILE) + _MEANTARGET * _WEIGHT;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ outside of do loop, Area for final ROC;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   RANKDELTA = (ROUND ( _FREQ_ ) + 1) / 2;
MPRINT(EM_ASSESS):   RANK = UNTIEDRANK + RANKDELTA;
MPRINT(EM_ASSESS):   DROP RANK ;
MPRINT(EM_ASSESS):   SUMRANK1 + RANK * ROUND (_MEANTARGET * _FREQ_, .0000001);
MPRINT(EM_ASSESS):   UNTIEDRANK + ROUND (_FREQ_, .00000001);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ............ Area For ROC Curve;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   DO _K = 1 TO 100;
MPRINT(EM_ASSESS):   IF P_DepVar1 * 100 >= _K THEN DO;
MPRINT(EM_ASSESS):   TRUEPOSX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   FALSEPOSX ( _K ) + _FREQ_ * (1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   TRUENEGX ( _K ) + _FREQ_ * ( 1 - _MEANTARGET) ;
MPRINT(EM_ASSESS):   FALSENEGX ( _K ) + _FREQ_ * _MEANTARGET ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   SLOT = MIN (MAX (CEIL (P_DepVar1 * 100), 1), 100) ;
MPRINT(EM_ASSESS):   DROP SLOT;
MPRINT(EM_ASSESS):   FIRSTIN ( SLOT ) = MIN ( FIRSTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   LASTIN ( SLOT ) = MAX ( LASTIN ( SLOT ), P_DepVar1);
MPRINT(EM_ASSESS):   _EVENTS ( SLOT) = _EVENTS ( SLOT) + _FREQ_ * _MEANTARGET;
MPRINT(EM_ASSESS):   NONEVENTS ( SLOT) = NONEVENTS ( SLOT) + _FREQ_ * (1 - _MEANTARGET);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ START OF OUTDIST IN BINARY CASE MAIN DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   SCR_MNPROBS ( SLOT ) = SUM (SCR_MNPROBS (SLOT), P_DepVar1 * _FREQ_ );
MPRINT(EM_ASSESS):   SCR_MINPROBS ( SLOT ) = MIN (SCR_MINPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   SCR_MAXPROBS ( SLOT ) = MAX (SCR_MAXPROBS (SLOT), P_DepVar1 );
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ End of Outdist in Binary case main DATA STEP ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   IF EOF THEN DO;
MPRINT(EM_ASSESS):   PUT //;
MPRINT(EM_ASSESS):   DO K = 1 TO 20;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LENGTH EVENTVALUE $ 32;
MPRINT(EM_ASSESS):   RETAIN EVENTVALUE "1" ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ......... Start of EOF area of BINARY processing of main data set ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SUMRANK1", SUMRANK1);
MPRINT(EM_ASSESS):   LENGTH DATAROLE $ 10;
MPRINT(EM_ASSESS):   RETAIN DATAROLE "VALIDATE" ;
MPRINT(EM_ASSESS):   RETAIN OVLMIN 0.0000528164 OVLMAX 0.9894078793 ;
MPRINT(EM_ASSESS):   DROP OVLMIN OVLMAX ;
MPRINT(EM_ASSESS):   C_NUMOBS = 0;
MPRINT(EM_ASSESS):   C_NUM_RESP = 0;
MPRINT(EM_ASSESS):   C_NUM_NONRESP = 0;
MPRINT(EM_ASSESS):   C_P_RESP = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = 0;
MPRINT(EM_ASSESS):   PREVIOUSPROFIT = 0;
MPRINT(EM_ASSESS):   MAXPROFIT = 0;
MPRINT(EM_ASSESS):   _KS_BIN_ = 0;
MPRINT(EM_ASSESS):   DROP _KS_BIN_;
MPRINT(EM_ASSESS):   AVGNUMRESP = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASERESP = 100 * RESPRATE;
MPRINT(EM_ASSESS):   BASERESPC = BASERESP;
MPRINT(EM_ASSESS):   BASECAP = 100 / 20;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................Start OF Gainschart = Outranks Area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = 0;
MPRINT(EM_ASSESS):   DO GROUP = 20 TO 1 BY -1;
 
MPRINT(EM_ASSESS):   BASECAPC + BASECAP;
MPRINT(EM_ASSESS):   PERCENTILE = GROUP * (100 / 20);
MPRINT(EM_ASSESS):   MINPROB = MINPROBS ( GROUP);
MPRINT(EM_ASSESS):   MAXPROB = MAXPROBS ( GROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MINPROB" || LEFT ( PUT (GROUP, 3.)), MINPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROB" || LEFT ( PUT (GROUP, 3.)), MAXPROB);
MPRINT(EM_ASSESS):   NUMOBS = NUMOBSS ( GROUP);
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN MNPROB = MNPROBS ( GROUP) / NUMOBS;
MPRINT(EM_ASSESS):   ELSE MNPROB = .;
MPRINT(EM_ASSESS):   C_NUMOBS = SUM (NUMOBS, C_NUMOBS);
MPRINT(EM_ASSESS):   NUMRESP = NUMRESPS ( GROUP);
MPRINT(EM_ASSESS):   NUMNONRESP = NUMOBS - NUMRESP;
MPRINT(EM_ASSESS):   C_AVGNUM_RESP + AVGNUMRESP;
MPRINT(EM_ASSESS):   IF C_NUMOBS <= _NEVENTS THEN DO;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   BESTCAPC = C_NUMOBS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BASEEVENTS = _NEVENTS / 20;
MPRINT(EM_ASSESS):   BASENONEVENTS = 0;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   FLAG + 1;
MPRINT(EM_ASSESS):   DROP FLAG;
MPRINT(EM_ASSESS):   BESTNUMEVENTS = _NEVENTS - C_NUMOBS + NUMOBS;
MPRINT(EM_ASSESS):   IF FLAG > 1 THEN BESTNUMEVENTS = 0;
MPRINT(EM_ASSESS):   BESTCAPC = 100;
MPRINT(EM_ASSESS):   IF C_NUMOBS - _NEVENTS <= NUMOBS THEN DO;
MPRINT(EM_ASSESS):   BASEEVENTS = C_NUMOBS - _NEVENTS;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS - C_NUMOBS + _NEVENTS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BASEEVENTS = 0;
MPRINT(EM_ASSESS):   BASENONEVENTS = NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   BESTCAP = BESTNUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   BESTLIFT = BESTNUMEVENTS / AVGNUMRESP;
MPRINT(EM_ASSESS):   C_BESTNUMEVENTS + BESTNUMEVENTS;
MPRINT(EM_ASSESS):   DROP C_BESTNUMEVENTS;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN BESTLIFTC = C_BESTNUMEVENTS / (_NEVENTS / 1018 *
C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE BESTLIFTC = .;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESP = BESTNUMEVENTS * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_RESP = NUMRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   P_NONRESP = NUMNONRESP * 100 / NUMOBS;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESP = .;
MPRINT(EM_ASSESS):   P_RESP = .;
MPRINT(EM_ASSESS):   P_NONRESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BESTRESPC = C_BESTNUMEVENTS * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   BESTGAIN = MAX (0, ((C_BESTNUMEVENTS / C_NUMOBS ) / ( AVGNUMRESP /
NUMOBS) - 1) * 100);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   BESTRESPC = .;
MPRINT(EM_ASSESS):   BESTGAIN = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF NUMNONRESP > 0 THEN ODDS = NUMRESP / NUMNONRESP;
MPRINT(EM_ASSESS):   ELSE ODDS = .;
MPRINT(EM_ASSESS):   C_NUM_RESP = SUM (C_NUM_RESP , NUMRESP );
MPRINT(EM_ASSESS):   C_NUM_NONRESP = SUM (C_NUM_NONRESP, NUMNONRESP );
MPRINT(EM_ASSESS):   IF C_NUM_NONRESP > 0 THEN C_ODDS = C_NUM_RESP / C_NUM_NONRESP;
MPRINT(EM_ASSESS):   ELSE C_ODDS = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   C_P_RESP = C_NUM_RESP * 100 / C_NUMOBS;
MPRINT(EM_ASSESS):   GAIN = ABS(100 * (((C_NUM_RESP / C_NUMOBS ) / (_NEVENTS / 1018)) - 1));
MPRINT(EM_ASSESS):   BASEGAIN = 100 * (( (C_AVGNUM_RESP / C_NUMOBS) / ( AVGNUMRESP / NUMOBS))
- 1);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE DO;
MPRINT(EM_ASSESS):   GAIN = .;
MPRINT(EM_ASSESS):   BASEGAIN = .;
MPRINT(EM_ASSESS):   C_P_RESP = .;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   IF BASEGAIN <= 0 THEN BASEGAIN = 0;
MPRINT(EM_ASSESS):   P_CAPT_RESP = NUMRESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   P_CAPT_NONRESP = NUMNONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   C_P_CAPT_RESP = C_NUM_RESP * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   C_P_CAPT_NONRESP = C_NUM_NONRESP * 100 / ( 1018 - _NEVENTS);
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Area For Binned KS in Outranks area;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   _DIFFERENCE = C_P_CAPT_RESP - C_P_CAPT_NONRESP ;
MPRINT(EM_ASSESS):   IF _KS_BIN_ < _DIFFERENCE THEN DO;
MPRINT(EM_ASSESS):   _KS_BIN_ = _DIFFERENCE;
MPRINT(EM_ASSESS):   _KS_BIN_PROB = MINPROB + (MAXPROB - MINPROB) / 2 ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LIFT = P_RESP * .01 / RESPRATE ;
MPRINT(EM_ASSESS):   C_LIFT = C_P_RESP * .01 / RESPRATE;
MPRINT(EM_ASSESS):   IF NUMOBS > 0 THEN DO;
MPRINT(EM_ASSESS):   BASELIFT = AVGNUMRESP / ( RESPRATE * NUMOBS );
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   ELSE BASELIFT = .;
MPRINT(EM_ASSESS):   IF C_NUMOBS > 0 THEN CBASELIFT = C_AVGNUM_RESP / (RESPRATE * C_NUMOBS);
MPRINT(EM_ASSESS):   ELSE CBASELIFT = .;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........ WITHIN DO LOOP FOR OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 + 1 - GROUP;
MPRINT(EM_ASSESS):   PERCENTILE = BIN * (100 / 20);
MPRINT(EM_ASSESS):   B_C_P_RESP = PERCENTILE;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPRANK ;
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................ END OF GAINSCHART = OUTRANKS AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFITGROUP" , MAXPROFITGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXPROFIT" , MAXPROFIT );
MPRINT(EM_ASSESS):   KS_ABSDIFF = 0 ;
MPRINT(EM_ASSESS):   MINPRECTPR = 9999;
MPRINT(EM_ASSESS):   Y0 = 1 - RESPRATE;
MPRINT(EM_ASSESS):   Y1 = RESPRATE;
MPRINT(EM_ASSESS):   MAXMUTUAL = 0;
MPRINT(EM_ASSESS):   DROP MAXMUTUAL KSPROB Y0 Y1 KS_ABSDIFF MINPRECTPR;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .....................About to start Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........................... Finished Processing Outroc ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .............. Outdist ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   BIN = 20 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS96 - EVENTS100 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS96 - NONEVENTS100);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB96 -
SCR_MNPROB100) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB96 - SCR_MINPROB100) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB96 - SCR_MAXPROB100) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 20;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 19 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS91 - EVENTS95 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS91 - NONEVENTS95);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB91 -
SCR_MNPROB95) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB91 - SCR_MINPROB95) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB91 - SCR_MAXPROB95) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 19;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 18 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS86 - EVENTS90 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS86 - NONEVENTS90);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB86 -
SCR_MNPROB90) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB86 - SCR_MINPROB90) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB86 - SCR_MAXPROB90) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 18;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 17 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS81 - EVENTS85 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS81 - NONEVENTS85);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB81 -
SCR_MNPROB85) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB81 - SCR_MINPROB85) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB81 - SCR_MAXPROB85) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 17;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 16 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS76 - EVENTS80 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS76 - NONEVENTS80);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB76 -
SCR_MNPROB80) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB76 - SCR_MINPROB80) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB76 - SCR_MAXPROB80) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 16;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 15 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS71 - EVENTS75 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS71 - NONEVENTS75);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB71 -
SCR_MNPROB75) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB71 - SCR_MINPROB75) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB71 - SCR_MAXPROB75) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 15;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 14 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS66 - EVENTS70 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS66 - NONEVENTS70);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB66 -
SCR_MNPROB70) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB66 - SCR_MINPROB70) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB66 - SCR_MAXPROB70) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 14;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 13 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS61 - EVENTS65 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS61 - NONEVENTS65);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB61 -
SCR_MNPROB65) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB61 - SCR_MINPROB65) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB61 - SCR_MAXPROB65) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 13;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 12 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS56 - EVENTS60 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS56 - NONEVENTS60);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB56 -
SCR_MNPROB60) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB56 - SCR_MINPROB60) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB56 - SCR_MAXPROB60) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 12;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 11 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS51 - EVENTS55 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS51 - NONEVENTS55);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB51 -
SCR_MNPROB55) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB51 - SCR_MINPROB55) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB51 - SCR_MAXPROB55) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 11;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 10 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS46 - EVENTS50 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS46 - NONEVENTS50);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB46 -
SCR_MNPROB50) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB46 - SCR_MINPROB50) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB46 - SCR_MAXPROB50) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 10;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 9 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS41 - EVENTS45 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS41 - NONEVENTS45);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB41 -
SCR_MNPROB45) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB41 - SCR_MINPROB45) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB41 - SCR_MAXPROB45) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 9;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 8 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS36 - EVENTS40 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS36 - NONEVENTS40);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB36 -
SCR_MNPROB40) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB36 - SCR_MINPROB40) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB36 - SCR_MAXPROB40) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 8;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 7 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS31 - EVENTS35 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS31 - NONEVENTS35);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB31 -
SCR_MNPROB35) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB31 - SCR_MINPROB35) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB31 - SCR_MAXPROB35) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 7;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 6 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS26 - EVENTS30 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS26 - NONEVENTS30);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB26 -
SCR_MNPROB30) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB26 - SCR_MINPROB30) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB26 - SCR_MAXPROB30) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 6;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 5 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS21 - EVENTS25 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS21 - NONEVENTS25);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB21 -
SCR_MNPROB25) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB21 - SCR_MINPROB25) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB21 - SCR_MAXPROB25) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 5;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 4 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS16 - EVENTS20 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS16 - NONEVENTS20);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB16 -
SCR_MNPROB20) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB16 - SCR_MINPROB20) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB16 - SCR_MAXPROB20) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 4;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 3 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS11 - EVENTS15 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS11 - NONEVENTS15);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB11 -
SCR_MNPROB15) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB11 - SCR_MINPROB15) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB11 - SCR_MAXPROB15) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 3;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 2 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS6 - EVENTS10 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS6 - NONEVENTS10);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB6 -
SCR_MNPROB10) / NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB6 - SCR_MINPROB10) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB6 - SCR_MAXPROB10) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 2;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   BIN = 1 ;
MPRINT(EM_ASSESS):   LOWERPROB = (BIN - 1) / 20;
MPRINT(EM_ASSESS):   UPPERPROB = LOWERPROB + (1 / 20);
MPRINT(EM_ASSESS):   MODELSCORE = LOWERPROB + (1 / 20) / 2;
MPRINT(EM_ASSESS):   RANGE = COMPRESS (PUT (LOWERPROB, 4.2) || "-" || PUT (UPPERPROB, 4.2));
MPRINT(EM_ASSESS):   SCR_NUMEVENTS = SUM ( OF EVENTS1 - EVENTS5 );
MPRINT(EM_ASSESS):   SCR_P_EVENTS = SCR_NUMEVENTS * 100 / _NEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_EVENTS = SUM (SCR_P_EVENTS, SCR_CP_EVENTS);
MPRINT(EM_ASSESS):   SCR_NUMNONEVENTS = SUM ( OF NONEVENTS1 - NONEVENTS5);
MPRINT(EM_ASSESS):   NUMOBSINGROUP = SUM (SCR_NUMEVENTS, SCR_NUMNONEVENTS);
MPRINT(EM_ASSESS):   IF NUMOBSINGROUP > 0 THEN SCR_MNPROB = SUM (OF SCR_MNPROB1 - SCR_MNPROB5)
/ NUMOBSINGROUP;
MPRINT(EM_ASSESS):   ELSE SCR_MNPROB = .;
MPRINT(EM_ASSESS):   SCR_MINPROB = MIN (OF SCR_MINPROB1 - SCR_MINPROB5) ;
MPRINT(EM_ASSESS):   SCR_MAXPROB = MAX (OF SCR_MAXPROB1 - SCR_MAXPROB5) ;
MPRINT(EM_ASSESS):   IF SCR_MINPROB = 1 THEN SCR_MINPROB = .;
MPRINT(EM_ASSESS):   IF SCR_MAXPROB = 0 THEN SCR_MAXPROB = .;
MPRINT(EM_ASSESS):   SCR_P_NONEVENTS = SCR_NUMNONEVENTS * 100 / _NNONEVENTS;
MPRINT(EM_ASSESS):   SCR_CP_NONEVENTS = SUM (SCR_P_NONEVENTS, SCR_CP_NONEVENTS);
MPRINT(EM_ASSESS):   PERCOBSINGROUP = NUMOBSINGROUP * 100 / 1018;
MPRINT(EM_ASSESS):   C_PERCOBSINGROUP = SUM (C_PERCOBSINGROUP, PERCOBSINGROUP);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MINPROB" || LEFT (PUT (BIN, 3.)), LOWERPROB);
MPRINT(EM_ASSESS):   CALL SYMPUTX ("SCR_MAXPROB" || LEFT (PUT (BIN, 3.)), UPPERPROB);
MPRINT(EM_ASSESS):   BIN = 20 + 1 - 1;
MPRINT(EM_ASSESS):   OUTPUT WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSPROB" , PUT (KSPROB, 5.3 ) );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_PROB" , _KS_BIN_PROB );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("_KS_BIN_" , _KS_BIN_ / 100 );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("KSDIFF" , KS_ABSDIFF );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("PRECTPR" , PRECTPR );
MPRINT(EM_ASSESS):   CALL SYMPUTX ("MAXMUTUALPROB" , MAXMUTUALPROB);
MPRINT(EM_ASSESS):   END;
MPRINT(EM_ASSESS):   LABEL __EVENT__ = "Event" DECILE = "Depth" BIN = "Bin" NUMOBS = "Number
of Observations" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * RUN for large data set;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST;
MPRINT(EM_ASSESS):   DELETE _AUXEVENTNAME;
MPRINT(EM_ASSESS):   QUIT;
 
MPRINT(EM_ASSESS):   OPTION NOCENTER LS = 95;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * Report Vars Area.;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start OF Outdist Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPSCOREDIST;
MPRINT(EM_ASSESS):   RENAME MODELSCORE = SCORE UPPERPROB = UPPOSTERIOR SCR_CP_EVENTS =
CUMULATIVEPERCENTAGEOFEVENTS SCR_CP_NONEVENTS = CUMULATIVEPERCENTAGEOFNONEVENTS EVENTVALUE =
EVENT LOWERPROB = LOWPOSTERIOR NUMOBSINGROUP = N PERCOBSINGROUP = PERCENTAGE SCR_MINPROB =
_MINP_ SCR_MAXPROB = _MAXP_ SCR_MNPROB = _MEANP_ RANGE = P_LABEL C_PERCOBSINGROUP =
CUMULATIVEPERCENTAGE SCR_NUMEVENTS = NUMBEROFEVENTS SCR_NUMNONEVENTS = NUMBEROFNONEVENTS
SCR_P_EVENTS = PERCENTAGEOFEVENTS SCR_P_NONEVENTS = PERCENTAGEOFNONEVENTS ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * .................... OUTDIST MODIFICATION LABEL AREA;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL BIN = "Bin" N = "Number of Observations" P_LABEL = "Posterior
Probability Range" EVENT = "Event" LOWPOSTERIOR = "Lower Bound Posterior Probability"
PERCENTAGEOFEVENTS = "Percentage of Events" CUMULATIVEPERCENTAGEOFNONEVENTS = "Cumulative
Percentage of Nonevents" CUMULATIVEPERCENTAGE = "Cumulative Percentage" PERCENTAGEOFEVENTS =
"Percentage of Events" PERCENTAGEOFNONEVENTS = "Percentage of Nonevents"
CUMULATIVEPERCENTAGEOFEVENTS = "Cumulative Percentage of Events" UPPOSTERIOR = "Upper Bound
Posterior Probability" NUMBEROFEVENTS = "Number of Events" PERCENTAGE = "Percentage"
NUMBEROFNONEVENTS = "Number of Nonevents" _MEANP_ = "Mean Posterior Probability" _MINP_ = "Min
Posterior Probability" _MAXP_ = "Max Posterior Probability" SCORE = "Model Score" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPSCOREDIST;
MPRINT(EM_ASSESS):   SET WORK._TEMPSCOREDIST (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ........... END OF OUTDIST MODIFICATION;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ...........Start of OUTRANKS Modification;
MPRINT(EM_ASSESS):   *;
 
MPRINT(EM_ASSESS):   PROC DATASETS NOLIST LIB = WORK;
MPRINT(EM_ASSESS):   MODIFY _TEMPRANK;
MPRINT(EM_ASSESS):   RENAME __EVENT__ = EVENT P_RESP = RESP C_P_CAPT_RESP = CAPC P_CAPT_RESP =
CAP NUMNONRESP = NUMNEVENT NUMRESP = NUMEVENT BASEEVENTS = BASENUMBEROFEVENTS BESTNUMEVENTS =
BESTNUMBEROFEVENTS MAXPROB = _MAXP_ MINPROB = _MINP_ CBASELIFT = BASELIFTC C_LIFT = LIFTC
MNPROB = _MEANP_ PERCENTILE = DECILE NUMOBS = N NUMEVENT = NUMBEROFEVENTS C_P_RESP = RESPC ;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   * ................. OUTRANKS;
MPRINT(EM_ASSESS):   *;
MPRINT(EM_ASSESS):   LABEL _MAXP_ = "Max Posterior Probability" _MINP_ = "Min Posterior
Probability" _MEANP_ = "Mean Posterior Probability" BASECAP = "Baseline % Captured Response"
BASECAPC = "Baseline Cumulative % Captured Response" BASENUMBEROFEVENTS = "Baseline Number of
Events" BASEGAIN = "Baseline Gain" BASELIFT = "Baseline Lift" BASELIFTC = "Baseline Cumulative
Lift" BASERESP = "Baseline % Response" BASERESPC = "Baseline Cumulative % Response" BASELIFTC
= "Baseline Cumulative Lift" BESTCAP = "Best % Captured Response" BESTCAPC = "Best Cumulative
% Captured Response" BESTGAIN = "Best Gain" BESTRESP = "Best % Response" BESTRESPC = "Best
Cumulative % Response" BESTLIFT = "Best Lift" BESTLIFTC = "Best Cumulative Lift"
BESTNUMBEROFEVENTS = "Best Number of Events" CAP = "% Captured Response" CAPC = "Cumulative %
Captured Response" DECILE = "Depth" GAIN = "Gain" LIFT = "Lift" LIFTC = "Cumulative Lift"
NUMNEVENT = "Number of Nonevents" N = "Number of Observations" EVENT = "Event" RESPC =
"Cumulative % Response" NUMBEROFEVENTS = "Number of Events" RESP = "% Response" ;
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   QUIT;
MPRINT(EM_ASSESS):   DATA WORK._TEMPRANK;
MPRINT(EM_ASSESS):   SET WORK._TEMPRANK (WHERE = (_MEANP_ > .));
MPRINT(EM_ASSESS):   RUN;
MPRINT(EM_ASSESS):   proc datasets lib=work nolist;
MPRINT(EM_ASSESS):   delete _ea_tmpdata;
MPRINT(EM_ASSESS):   run;
MPRINT(EM_ASSESS):   quit;
MPRINT(EM_ASSESS):  ;
MPRINT(EM_ASSESS):   OPTION ERRORS = 20;
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):    data WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_EMRANK;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_EMRANK WORK._TEMPRANK;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):    data WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32 TARGETLABEL $200 dataRole $20;
MPRINT(EM_DIAGRAM):   label TARGETLABEL = "Target Label";
MPRINT(EM_DIAGRAM):   set WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   retain target "DepVar";
MPRINT(EM_DIAGRAM):   retain TARGETLABEL 'DepVar';
MPRINT(EM_DIAGRAM):   retain dataRole "VALIDATE";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   length target $32;
MPRINT(EM_DIAGRAM):   length TARGETLABEL $200;
MPRINT(EM_DIAGRAM):   length dataRole $20;
MPRINT(EM_DIAGRAM):   length EVENT $32;
MPRINT(EM_DIAGRAM):   length P_LABEL $9;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_EMSCOREDIST WORK._TEMPSCOREDIST;
MPRINT(EM_DIAGRAM):   run;
3096099    %let _cn = %sysfunc(getoption(CENTER));
3096100    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3096101    proc print data=EMWS8.Rule4_EMREPORTFIT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Rule4_EMREPORTFIT noobs label;
3096102    var STAT LABEL TRAIN
3096103    VALIDATE
3096104    ;
MPRINT(EM_DIAGRAM):   var STAT LABEL TRAIN VALIDATE ;
3096105    by TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by TARGET TARGETLABEL;
3096106    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3096107    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_fitstat_title  , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Fit Statistics";
MPRINT(EM_DIAGRAM):   run;
3096108    run;
 
NOTE: There were 9 observations read from the data set EMWS8.RULE4_EMREPORTFIT.
NOTE: The PROCEDURE PRINT printed page 2798.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3096109    title10;
MPRINT(EM_DIAGRAM):   title10;
3096110    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3096111    proc sort data=EMWS8.Rule4_EMCLASSIFICATION nothreads;
MPRINT(EM_DIAGRAM):    proc sort data=EMWS8.Rule4_EMCLASSIFICATION nothreads;
3096112    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
3096113    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 8 observations read from the data set EMWS8.RULE4_EMCLASSIFICATION.
NOTE: The data set EMWS8.RULE4_EMCLASSIFICATION has 8 observations and 12 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3096114    %let _cn = %sysfunc(getoption(CENTER));
3096115    options nocenter;
MPRINT(EM_DIAGRAM):   options nocenter;
3096116    proc print data=EMWS8.Rule4_EMCLASSIFICATION noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Rule4_EMCLASSIFICATION noobs label;
3096117    var from into pct_row pct_col count percent
3096118    ;
MPRINT(EM_DIAGRAM):   var from into pct_row pct_col count percent ;
3096119    by DATAROLE TARGET TARGETLABEL;
MPRINT(EM_DIAGRAM):   by DATAROLE TARGET TARGETLABEL;
3096120    label FROM = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,     NOQUOTE))";
MPRINT(EM_DIAGRAM):   label FROM = "Target";
3096121    label INTO = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcome_vlabel ,    NOQUOTE))";
MPRINT(EM_DIAGRAM):   label INTO = "Outcome";
3096122    label PCT_ROW = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetpct_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_ROW = "Target Percentage";
3096123    label PCT_COL = "%sysfunc(sasmsg(sashelp.dmine, rpt_outcomepct_vlabel , NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PCT_COL = "Outcome Percentage";
3096124    label COUNT = "%sysfunc(sasmsg(sashelp.dmine, rpt_count_vlabel ,      NOQUOTE))";
MPRINT(EM_DIAGRAM):   label COUNT = "Frequency Count";
3096125    label PERCENT = "%sysfunc(sasmsg(sashelp.dmine, rpt_totalpct_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label PERCENT = "Total Percentage";
3096126    where _TYPE_='PREDICTION';
MPRINT(EM_DIAGRAM):   where _TYPE_='PREDICTION';
3096127    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3096128    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_classification_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Classification Table";
MPRINT(EM_DIAGRAM):   run;
3096129    run;
 
NOTE: There were 8 observations read from the data set EMWS8.RULE4_EMCLASSIFICATION.
      WHERE _TYPE_='PREDICTION';
NOTE: The PROCEDURE PRINT printed page 2799.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
 
 
3096130    title9;
MPRINT(EM_DIAGRAM):   title9;
3096131    title10;
MPRINT(EM_DIAGRAM):   title10;
3096132    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3096133    %let _cn = %sysfunc(getoption(CENTER));
3096134    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3096135    data EMWS8.Rule4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   data EMWS8.Rule4_EMEVENTREPORT;
3096136    length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT FALSEEVENT
3096136  ! TRUEEVENT 8;
MPRINT(EM_DIAGRAM):   length DATAROLE TARGET $32 TARGETLABEL $200 FALSENEVENT TRUENEVENT
FALSEEVENT TRUEEVENT 8;
3096137    label DATAROLE = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3096137  !  TARGET = "%sysfunc(sasmsg(sashelp.dmine, rpt_target_vlabel ,      NOQUOTE))"
3096137  ! TARGETLABEL = "%sysfunc(sasmsg(sashelp.dmine, meta_targetlabel_vlabel, NOQUOTE))"
3096137  ! FALSEEVENT
3096138    = "%sysfunc(sasmsg(sashelp.dmine, rpt_falseevent_vlabel ,  NOQUOTE))" FALSENEVENT =
3096138  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_falsenevent_vlabel , NOQUOTE))" TRUEEVENT =
3096138  ! "%sysfunc(sasmsg(sashelp.dmine, rpt_trueevent_vlabel ,   NOQUOTE))" TRUENEVENT =
3096139       "%sysfunc(sasmsg(sashelp.dmine, rpt_truenevent_vlabel ,  NOQUOTE))";
MPRINT(EM_DIAGRAM):   label DATAROLE = "Data Role" TARGET = "Target" TARGETLABEL = "Target
Label" FALSEEVENT = "False Positive" FALSENEVENT = "False Negative" TRUEEVENT = "True
Positive" TRUENEVENT = "True Negative";
3096140    FALSEEVENT=0;
MPRINT(EM_DIAGRAM):   FALSEEVENT=0;
3096141    FALSENEVENT=0;
MPRINT(EM_DIAGRAM):   FALSENEVENT=0;
3096142    TRUEEVENT=0;
MPRINT(EM_DIAGRAM):   TRUEEVENT=0;
3096143    TRUENEVENT=0;
MPRINT(EM_DIAGRAM):   TRUENEVENT=0;
3096144    set EMWS8.Rule4_EMEVENTREPORT;
MPRINT(EM_DIAGRAM):   set EMWS8.Rule4_EMEVENTREPORT;
3096145    run;
MPRINT(EM_DIAGRAM):   run;
 
NOTE: There were 2 observations read from the data set EMWS8.RULE4_EMEVENTREPORT.
NOTE: The data set EMWS8.RULE4_EMEVENTREPORT has 2 observations and 7 variables.
NOTE: DATA statement used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
 
 
3096146    proc print data=EMWS8.Rule4_EMEVENTREPORT noobs label;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Rule4_EMEVENTREPORT noobs label;
3096147    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3096148    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_eventtable_title    , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Event Classification Table";
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
MPRINT(EM_DIAGRAM):   run;
3096149    by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL;
3096150    run;
 
NOTE: There were 2 observations read from the data set EMWS8.RULE4_EMEVENTREPORT.
NOTE: The PROCEDURE PRINT printed page 2800.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3096151    title10;
MPRINT(EM_DIAGRAM):   title10;
3096152    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3096153    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
3096154    modify Rule4_EMRANK;
MPRINT(EM_DIAGRAM):   modify Rule4_EMRANK;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3096155    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,   NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3096156    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3096156  ! ;
MPRINT(EM_DIAGRAM):   run;
3096157    run;
 
NOTE: MODIFY was successful for EMWS8.RULE4_EMRANK.DATA.
3096158    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.16 seconds
      cpu time            0.17 seconds
 
 
3096159    %let _cn = %sysfunc(getoption(CENTER));
3096160    options nocenter;
MPRINT(EM_DIAGRAM):    options nocenter;
3096161    proc print data=EMWS8.Rule4_EMRANK label noobs;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Rule4_EMRANK label noobs;
3096162    var
3096163    decile gain lift liftc resp respc N _meanP_;
MPRINT(EM_DIAGRAM):   var decile gain lift liftc resp respc N _meanP_;
3096164    by
3096165    notsorted DATAROLE
3096166    notsorted TARGET
3096167    notsorted TARGETLABEL
3096168    ;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
3096169    title9 ' ';
MPRINT(EM_DIAGRAM):   title9 ' ';
3096170    title10 "%sysfunc(sasmsg(sashelp.dmine, rpt_scoreranking_title , NOQUOTE))";
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Rankings";
MPRINT(EM_DIAGRAM):   run;
3096171    run;
 
NOTE: There were 40 observations read from the data set EMWS8.RULE4_EMRANK.
NOTE: The PROCEDURE PRINT printed page 2801.
NOTE: PROCEDURE PRINT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
 
 
3096172    title10;
MPRINT(EM_DIAGRAM):   title10;
3096173    options &_cn;
MPRINT(EM_DIAGRAM):   options NOCENTER;
3096174    proc datasets library=EMWS8 nolist;
MPRINT(EM_DIAGRAM):    proc datasets library=EMWS8 nolist;
3096175    modify Rule4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   modify Rule4_EMSCOREDIST;
MPRINT(EM_DIAGRAM):   label target = "Target Variable";
3096176    label target = "%sysfunc(sasmsg(sashelp.dmine, rpt_targetvar_vlabel ,
3096176  ! NOQUOTE))";
MPRINT(EM_DIAGRAM):   label datarole = "Data Role";
3096177    label datarole = "%sysfunc(sasmsg(sashelp.dmine, rpt_datarole_vlabel ,    NOQUOTE))"
3096177  ! ;
MPRINT(EM_DIAGRAM):   run;
3096178    run;
 
NOTE: MODIFY was successful for EMWS8.RULE4_EMSCOREDIST.DATA.
3096179    quit;
MPRINT(EM_DIAGRAM):   quit;
 
NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.17 seconds
      cpu time            0.18 seconds
 
 
MPRINT(EM_DIAGRAM):    options nocenter;
MPRINT(EM_DIAGRAM):   proc print data=EMWS8.Rule4_EMSCOREDIST label noobs;
MPRINT(EM_DIAGRAM):   var p_label numberOfEvents numberOfNonEvents _meanp_ percentage;
MPRINT(EM_DIAGRAM):   by notsorted DATAROLE notsorted TARGET notsorted TARGETLABEL ;
MPRINT(EM_DIAGRAM):   where TARGET in( "DepVar" );
MPRINT(EM_DIAGRAM):   title9 ' ';
MPRINT(EM_DIAGRAM):   title10 "Assessment Score Distribution";
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   title10;
MPRINT(EM_DIAGRAM):   options NOCENTER;
MPRINT(EM_DIAGRAM):   proc printto;
MPRINT(EM_DIAGRAM):   run;
