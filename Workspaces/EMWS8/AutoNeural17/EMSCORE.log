MPRINT(EM_DIAGRAM):    data _null_;
MPRINT(EM_DIAGRAM):   call symput('NLDATE', strip(put(date(), NLDATE.)));
MPRINT(EM_DIAGRAM):   call symput('NLTIME', strip(put(datetime(), NLTIME.)));
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data _null_;
MPRINT(EM_DIAGRAM):   nldate= sasmsg("sashelp.dmine", "log_date_note", 'N', "28. April 2016" );
MPRINT(EM_DIAGRAM):   nltime= sasmsg("sashelp.dmine", "log_time_note", 'N', "09.40 Uhr" );
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   put "* Score Log";
MPRINT(EM_DIAGRAM):   put nldate;
MPRINT(EM_DIAGRAM):   put nltime;
MPRINT(EM_DIAGRAM):   put "*------------------------------------------------------------*";
MPRINT(EM_DIAGRAM):   run;
*------------------------------------------------------------*
* Score Log
Date:                28. April 2016
Time:                09.40 Uhr
*------------------------------------------------------------*
MPRINT(EM_DIAGRAM):    filename O20JROZ5 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural17\EMSCORE.out" encoding="UTF-8" 
NOBOM;
MPRINT(EM_DIAGRAM):   proc printto print=O20JROZ5 new;
MPRINT(EM_DIAGRAM):   run;
1656084    filename emflow
1656084  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural17: Scoring DATA data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1656085    *------------------------------------------------------------*;
1656086    * AutoNeural17: Scoring DATA data;
1656087    *------------------------------------------------------------*;
1656088    data EMWS8.AutoNeural17_TRAIN
1656089    / view=EMWS8.AutoNeural17_TRAIN
1656090    ;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural17_TRAIN / view=EMWS8.AutoNeural17_TRAIN ;
1656091    set EMWS8.PRINCOMP_TRAIN
1656092    ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_TRAIN ;
1656093    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural17\EMFLOWSCORE.sas.
1656094   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1656095   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1656096   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1656097   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1656098   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1656099   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1656100   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1656101   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1656102   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1656103   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1656104   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1656105   +LENGTH _WARN_ $4
1656106   +      F_DepVar  $ 12
1656107   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1656108   +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
1656109   +
1656110   +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
1656111   +
1656112   +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
1656113   +
1656114   +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
1656115   +
1656116   +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
1656117   +
1656118   +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
1656119   +
1656120   +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
1656121   +
1656122   +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
1656123   +
1656124   +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
1656125   +
1656126   +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
1656127   +
1656128   +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
1656129   +
1656130   +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
1656131   +
1656132   +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
1656133   +
1656134   +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
1656135   +
1656136   +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
1656137   +
1656138   +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
1656139   +
1656140   +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
1656141   +
1656142   +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
1656143   +
1656144   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1656145   +
1656146   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1656147   +
1656148   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1656149   +
1656150   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1656151   +
1656152   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1656153   +
1656154   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1656155   +
1656156   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1656157   +
1656158   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1656159   +
1656160   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1656161   +
1656162   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1656163   +
1656164   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1656165   +
1656166   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1656167   +
1656168   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1656169   +
1656170   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1656171   +
1656172   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656173   +*** Checking missing input Interval
1656174   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1656175   +
1656176   +IF NMISS(
1656177   +   PC_1 ,
1656178   +   PC_10 ,
1656179   +   PC_11 ,
1656180   +   PC_12 ,
1656181   +   PC_13 ,
1656182   +   PC_14 ,
1656183   +   PC_15 ,
1656184   +   PC_16 ,
1656185   +   PC_17 ,
1656186   +   PC_2 ,
1656187   +   PC_3 ,
1656188   +   PC_4 ,
1656189   +   PC_5 ,
1656190   +   PC_6 ,
1656191   +   PC_7 ,
1656192   +   PC_8 ,
1656193   +   PC_9 ,
1656194   +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
1656195   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1656196   +
1656197   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1656198   +END;
MPRINT(EM_DIAGRAM):   END;
1656199   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656200   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1656201   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656202   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1656203   +   S_PC_1  =  -3.567597872154E-15 +     0.29892739052271 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.567597872154E-15 + 0.29892739052271 * PC_1 ;
1656204   +   S_PC_10  = -6.0346468636081E-15 +     0.82173953858445 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.0346468636081E-15 + 0.82173953858445 * PC_10 ;
1656205   +   S_PC_11  =   6.055841017477E-15 +     0.85619046033275 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 6.055841017477E-15 + 0.85619046033275 * PC_11 ;
1656206   +   S_PC_12  = -3.9570415662911E-15 +     0.88816580619395 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -3.9570415662911E-15 + 0.88816580619395 * PC_12 ;
1656207   +   S_PC_13  =  1.4807903817941E-15 +     0.89679040249719 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4807903817941E-15 + 0.89679040249719 * PC_13 ;
1656208   +   S_PC_14  = -6.1940871521205E-15 +     0.90336543119982 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.1940871521205E-15 + 0.90336543119982 * PC_14 ;
1656209   +   S_PC_15  =   -3.45147395417E-16 +     0.92997960877389 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -3.45147395417E-16 + 0.92997960877389 * PC_15 ;
1656210   +   S_PC_16  = -2.0832890955173E-15 +     0.95096832834142 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.0832890955173E-15 + 0.95096832834142 * PC_16 ;
1656211   +   S_PC_17  =  4.0710461992609E-15 +     0.99882451143041 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 4.0710461992609E-15 + 0.99882451143041 * PC_17 ;
1656212   +   S_PC_2  =  6.4589631283016E-15 +      0.5437311140029 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4589631283016E-15 + 0.5437311140029 * PC_2 ;
1656213   +   S_PC_3  =  2.2833690425384E-15 +     0.55367740285547 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2833690425384E-15 + 0.55367740285547 * PC_3 ;
1656214   +   S_PC_4  = -3.6725092169592E-15 +     0.63698127005552 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.6725092169592E-15 + 0.63698127005552 * PC_4 ;
1656215   +   S_PC_5  = -4.6355038408768E-15 +     0.66670299180006 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.6355038408768E-15 + 0.66670299180006 * PC_5 ;
1656216   +   S_PC_6  =  1.5846922792836E-15 +     0.70534791664737 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5846922792836E-15 + 0.70534791664737 * PC_6 ;
1656217   +   S_PC_7  =  6.7268179657212E-16 +     0.74932361381713 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 6.7268179657212E-16 + 0.74932361381713 * PC_7 ;
1656218   +   S_PC_8  = -2.3246545307055E-15 +     0.77161638976627 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.3246545307055E-15 + 0.77161638976627 * PC_8 ;
1656219   +   S_PC_9  = -3.7729896578756E-15 +     0.80831761659605 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -3.7729896578756E-15 + 0.80831761659605 * PC_9 ;
1656220   +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
1656221   +END;
MPRINT(EM_DIAGRAM):   END;
1656222   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1656223   +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
1656224   +   ELSE S_PC_1  =  -3.567597872154E-15 +     0.29892739052271 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.567597872154E-15 + 0.29892739052271 * PC_1 ;
1656225   +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
1656226   +   ELSE S_PC_10  = -6.0346468636081E-15 +     0.82173953858445 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.0346468636081E-15 + 0.82173953858445 * PC_10 ;
1656227   +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
1656228   +   ELSE S_PC_11  =   6.055841017477E-15 +     0.85619046033275 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 6.055841017477E-15 + 0.85619046033275 * PC_11 ;
1656229   +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
1656230   +   ELSE S_PC_12  = -3.9570415662911E-15 +     0.88816580619395 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -3.9570415662911E-15 + 0.88816580619395 * PC_12 ;
1656231   +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
1656232   +   ELSE S_PC_13  =  1.4807903817941E-15 +     0.89679040249719 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4807903817941E-15 + 0.89679040249719 * PC_13 ;
1656233   +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
1656234   +   ELSE S_PC_14  = -6.1940871521205E-15 +     0.90336543119982 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.1940871521205E-15 + 0.90336543119982 * PC_14 ;
1656235   +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
1656236   +   ELSE S_PC_15  =   -3.45147395417E-16 +     0.92997960877389 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -3.45147395417E-16 + 0.92997960877389 * PC_15 ;
1656237   +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
1656238   +   ELSE S_PC_16  = -2.0832890955173E-15 +     0.95096832834142 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.0832890955173E-15 + 0.95096832834142 * PC_16 ;
1656239   +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
1656240   +   ELSE S_PC_17  =  4.0710461992609E-15 +     0.99882451143041 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 4.0710461992609E-15 + 0.99882451143041 * PC_17 ;
1656241   +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
1656242   +   ELSE S_PC_2  =  6.4589631283016E-15 +      0.5437311140029 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4589631283016E-15 + 0.5437311140029 * PC_2 ;
1656243   +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
1656244   +   ELSE S_PC_3  =  2.2833690425384E-15 +     0.55367740285547 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2833690425384E-15 + 0.55367740285547 * PC_3 ;
1656245   +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
1656246   +   ELSE S_PC_4  = -3.6725092169592E-15 +     0.63698127005552 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.6725092169592E-15 + 0.63698127005552 * PC_4 ;
1656247   +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
1656248   +   ELSE S_PC_5  = -4.6355038408768E-15 +     0.66670299180006 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.6355038408768E-15 + 0.66670299180006 * PC_5 ;
1656249   +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
1656250   +   ELSE S_PC_6  =  1.5846922792836E-15 +     0.70534791664737 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5846922792836E-15 + 0.70534791664737 * PC_6 ;
1656251   +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
1656252   +   ELSE S_PC_7  =  6.7268179657212E-16 +     0.74932361381713 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 6.7268179657212E-16 + 0.74932361381713 * PC_7 ;
1656253   +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
1656254   +   ELSE S_PC_8  = -2.3246545307055E-15 +     0.77161638976627 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.3246545307055E-15 + 0.77161638976627 * PC_8 ;
1656255   +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
1656256   +   ELSE S_PC_9  = -3.7729896578756E-15 +     0.80831761659605 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -3.7729896578756E-15 + 0.80831761659605 * PC_9 ;
1656257   +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
1656258   +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
1656259   +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
1656260   +END;
MPRINT(EM_DIAGRAM):   END;
1656261   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656262   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1656263   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656264   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1656265   +   H1x1_1  =     0.43680201227507 * S_PC_1  +     -6.2790158097825 * S_PC_10
1656266   +          +    -0.85163775862488 * S_PC_11  +    -0.47925818483654 * S_PC_12
1656267   +          +     0.53949631368636 * S_PC_13  +    -1.02786919322634 * S_PC_14
1656268   +          +     1.05380889262599 * S_PC_15  +     0.42199683608767 * S_PC_16
1656269   +          +    -0.71911349630558 * S_PC_17  +     1.49052849216329 * S_PC_2
1656270   +          +     2.01791864422989 * S_PC_3  +     0.50251490560603 * S_PC_4
1656271   +          +     2.37547414637231 * S_PC_5  +    -12.9780560511029 * S_PC_6
1656272   +          +     3.16615596569995 * S_PC_7  +    -0.95122743907623 * S_PC_8
1656273   +          +     0.60588801007045 * S_PC_9  +    -1.68407195457659 *
1656274   +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.43680201227507 * S_PC_1 + -6.2790158097825 * S_PC_10 + 
-0.85163775862488 * S_PC_11 + -0.47925818483654 * S_PC_12 + 0.53949631368636 * S_PC_13 + 
-1.02786919322634 * S_PC_14 + 1.05380889262599 * S_PC_15 + 0.42199683608767 * S_PC_16 + 
-0.71911349630558 * S_PC_17 + 1.49052849216329 * S_PC_2 + 2.01791864422989 * S_PC_3 + 
0.50251490560603 * S_PC_4 + 2.37547414637231 * S_PC_5 + -12.9780560511029 * S_PC_6 + 
3.16615596569995 * S_PC_7 + -0.95122743907623 * S_PC_8 + 0.60588801007045 * S_PC_9 + 
-1.68407195457659 * S_Year_Birth ;
1656275   +   H1x1_2  =     1.63884455838679 * S_PC_1  +     1.55805646615441 * S_PC_10
1656276   +          +       0.871527478556 * S_PC_11  +    -1.86644786352904 * S_PC_12
1656277   +          +     0.41262512952967 * S_PC_13  +    -0.22890984418147 * S_PC_14
1656278   +          +    -0.48543757796659 * S_PC_15  +     0.45387364017022 * S_PC_16
1656279   +          +     0.56687737066004 * S_PC_17  +    -4.72959850328856 * S_PC_2
1656280   +          +    -3.28098421689064 * S_PC_3  +     2.18992266997339 * S_PC_4
1656281   +          +     1.40182849048979 * S_PC_5  +     -0.0909042963425 * S_PC_6
1656282   +          +     1.04679329187044 * S_PC_7  +    -6.82015390191902 * S_PC_8
1656283   +          +    -1.56263590917838 * S_PC_9  +     0.77238679717726 *
1656284   +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.63884455838679 * S_PC_1 + 1.55805646615441 * S_PC_10 + 
0.871527478556 * S_PC_11 + -1.86644786352904 * S_PC_12 + 0.41262512952967 * S_PC_13 + 
-0.22890984418147 * S_PC_14 + -0.48543757796659 * S_PC_15 + 0.45387364017022 * S_PC_16 + 
0.56687737066004 * S_PC_17 + -4.72959850328856 * S_PC_2 + -3.28098421689064 * S_PC_3 + 
2.18992266997339 * S_PC_4 + 1.40182849048979 * S_PC_5 + -0.0909042963425 * S_PC_6 + 
1.04679329187044 * S_PC_7 + -6.82015390191902 * S_PC_8 + -1.56263590917838 * S_PC_9 + 
0.77238679717726 * S_Year_Birth ;
1656285   +   H1x1_1  =     4.05028790797153 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 4.05028790797153 + H1x1_1 ;
1656286   +   H1x1_2  =     1.11077500443451 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.11077500443451 + H1x1_2 ;
1656287   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1656288   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1656289   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1656290   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1656291   +END;
MPRINT(EM_DIAGRAM):   END;
1656292   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1656293   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1656294   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1656295   +END;
MPRINT(EM_DIAGRAM):   END;
1656296   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656297   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1656298   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656299   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1656300   +   H1x2_1  =     0.49133572641194 * S_PC_1  +    -3.63139547485729 * S_PC_10
1656301   +          +    -2.85339070710028 * S_PC_11  +     0.77282036887084 * S_PC_12
1656302   +          +    -0.66851763433834 * S_PC_13  +    -3.91056372100105 * S_PC_14
1656303   +          +     1.87346503010337 * S_PC_15  +    -0.07558934876683 * S_PC_16
1656304   +          +     0.42787488264488 * S_PC_17  +    -2.88492824877701 * S_PC_2
1656305   +          +    -0.31661887817892 * S_PC_3  +     2.91913215925162 * S_PC_4
1656306   +          +    -2.71227883848425 * S_PC_5  +     1.38175958071778 * S_PC_6
1656307   +          +     2.36276963584368 * S_PC_7  +     1.22943836582433 * S_PC_8
1656308   +          +    -1.27876292661165 * S_PC_9  +    -1.37310011899913 *
1656309   +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.49133572641194 * S_PC_1 + -3.63139547485729 * S_PC_10 + 
-2.85339070710028 * S_PC_11 + 0.77282036887084 * S_PC_12 + -0.66851763433834 * S_PC_13 + 
-3.91056372100105 * S_PC_14 + 1.87346503010337 * S_PC_15 + -0.07558934876683 * S_PC_16 + 
0.42787488264488 * S_PC_17 + -2.88492824877701 * S_PC_2 + -0.31661887817892 * S_PC_3 + 
2.91913215925162 * S_PC_4 + -2.71227883848425 * S_PC_5 + 1.38175958071778 * S_PC_6 + 
2.36276963584368 * S_PC_7 + 1.22943836582433 * S_PC_8 + -1.27876292661165 * S_PC_9 + 
-1.37310011899913 * S_Year_Birth ;
1656310   +   H1x2_2  =     1.13194891980772 * S_PC_1  +       1.200296031517 * S_PC_10
1656311   +          +      1.9424285056754 * S_PC_11  +    -0.72512252212605 * S_PC_12
1656312   +          +     0.42487518228862 * S_PC_13  +    -0.51909348949551 * S_PC_14
1656313   +          +     0.46199702179315 * S_PC_15  +     1.55734866191972 * S_PC_16
1656314   +          +    -0.24286430970891 * S_PC_17  +     0.23604119250321 * S_PC_2
1656315   +          +    -0.48848660893775 * S_PC_3  +    -1.13412105084126 * S_PC_4
1656316   +          +     2.75507735274993 * S_PC_5  +    -0.17128767064677 * S_PC_6
1656317   +          +    -1.57104436529298 * S_PC_7  +    -0.46913090608696 * S_PC_8
1656318   +          +     2.07900112911328 * S_PC_9  +     0.03363552766376 *
1656319   +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.13194891980772 * S_PC_1 + 1.200296031517 * S_PC_10 + 
1.9424285056754 * S_PC_11 + -0.72512252212605 * S_PC_12 + 0.42487518228862 * S_PC_13 + 
-0.51909348949551 * S_PC_14 + 0.46199702179315 * S_PC_15 + 1.55734866191972 * S_PC_16 + 
-0.24286430970891 * S_PC_17 + 0.23604119250321 * S_PC_2 + -0.48848660893775 * S_PC_3 + 
-1.13412105084126 * S_PC_4 + 2.75507735274993 * S_PC_5 + -0.17128767064677 * S_PC_6 + 
-1.57104436529298 * S_PC_7 + -0.46913090608696 * S_PC_8 + 2.07900112911328 * S_PC_9 + 
0.03363552766376 * S_Year_Birth ;
1656320   +   H1x2_1  =    -0.43155049224367 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -0.43155049224367 + H1x2_1 ;
1656321   +   H1x2_2  =    -2.78257059016385 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -2.78257059016385 + H1x2_2 ;
1656322   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1656323   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1656324   +   H1x2_1  = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
1656325   +   H1x2_2  = 1.0 / (1.0 + EXP(MIN( - H1x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.0 / (1.0 + EXP(MIN( - H1x2_2 , _EXP_BAR)));
1656326   +END;
MPRINT(EM_DIAGRAM):   END;
1656327   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1656328   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1656329   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1656330   +END;
MPRINT(EM_DIAGRAM):   END;
1656331   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656332   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1656333   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656334   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1656335   +   H2x1_1  =    -0.58628901827172 * H1x1_1  +    -0.38264717664894 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -0.58628901827172 * H1x1_1 + -0.38264717664894 * H1x1_2 ;
1656336   +   H2x1_2  =     3.34114365917939 * H1x1_1  +     5.29708430378954 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 3.34114365917939 * H1x1_1 + 5.29708430378954 * H1x1_2 ;
1656337   +   H2x1_1  = H2x1_1  +      2.5805656289524 * H1x2_1
1656338   +          +    -1.49998755966571 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 2.5805656289524 * H1x2_1 + -1.49998755966571 * H1x2_2 ;
1656339   +   H2x1_2  = H2x1_2  +    -1.69181018760832 * H1x2_1
1656340   +          +    -2.07716568009834 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -1.69181018760832 * H1x2_1 + -2.07716568009834 * 
H1x2_2 ;
1656341   +   H2x1_1  =    -0.33385262176294 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -0.33385262176294 + H2x1_1 ;
1656342   +   H2x1_2  =     -2.8869129511929 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -2.8869129511929 + H2x1_2 ;
1656343   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1656344   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1656345   +   H2x1_1  = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
1656346   +   H2x1_2  = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
1656347   +END;
MPRINT(EM_DIAGRAM):   END;
1656348   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1656349   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1656350   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1656351   +END;
MPRINT(EM_DIAGRAM):   END;
1656352   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656353   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1656354   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656355   +
1656356   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1656357   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1656358   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1656359   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1656360   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1656361   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1656362   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1656363   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1656364   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1656365   +end;
MPRINT(EM_DIAGRAM):   end;
1656366   +else do;
MPRINT(EM_DIAGRAM):   else do;
1656367   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1656368   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1656369   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1656370   +   end;
MPRINT(EM_DIAGRAM):   end;
1656371   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1656372   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1656373   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1656374   +   end;
MPRINT(EM_DIAGRAM):   end;
1656375   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1656376   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1656377   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1656378   +   end;
MPRINT(EM_DIAGRAM):   end;
1656379   +end;
MPRINT(EM_DIAGRAM):   end;
1656380   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1656381   +   P_DepVar1  =     3.04524518437786 * H2x1_1  +     -10.199120548994 * H2x1_2
1656382   +         ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.04524518437786 * H2x1_1 + -10.199120548994 * H2x1_2 ;
1656383   +   P_DepVar1  =       0.762279546697 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.762279546697 + P_DepVar1 ;
1656384   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1656385   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1656386   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1656387   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1656388   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1656389   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1656390   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1656391   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1656392   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1656393   +END;
MPRINT(EM_DIAGRAM):   END;
1656394   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1656395   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1656396   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1656397   +END;
MPRINT(EM_DIAGRAM):   END;
1656398   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1656399   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1656400   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1656401   +END;
MPRINT(EM_DIAGRAM):   END;
1656402   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1656403   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1656404   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1656405   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1656406   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1656407   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1656408   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1656409   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656410   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1656411   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656412   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1656413   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1656414   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1656415   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1656416   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1656417   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1656418   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1656419   +END;
MPRINT(EM_DIAGRAM):   END;
1656420   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1656421   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1656422   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1656423   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1656424    run;

NOTE: DATA STEP view saved on file EMWS8.AUTONEURAL17_TRAIN.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1656425    quit;
1656426    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1656427    filename emflow
1656427  ! "C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):    filename emflow 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural17\EMFLOWSCORE.sas";
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural17: Scoring VALIDATE data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
1656428    *------------------------------------------------------------*;
1656429    * AutoNeural17: Scoring VALIDATE data;
1656430    *------------------------------------------------------------*;
1656431    data EMWS8.AutoNeural17_VALIDATE
1656432    / view=EMWS8.AutoNeural17_VALIDATE
1656433    ;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural17_VALIDATE / view=EMWS8.AutoNeural17_VALIDATE ;
1656434    set EMWS8.PRINCOMP_VALIDATE
1656435    ;
MPRINT(EM_DIAGRAM):   set EMWS8.PRINCOMP_VALIDATE ;
1656436    %inc emflow;
NOTE: %INCLUDE (level 1) file EMFLOW is file 
      C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural17\EMFLOWSCORE.sas.
1656437   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1656438   +*** Begin Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** Begin Scoring Code for Neural;
1656439   +***********************************;
MPRINT(EM_DIAGRAM):   ***********************************;
1656440   +DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
MPRINT(EM_DIAGRAM):   DROP _DM_BAD _EPS _NOCL_ _MAX_ _MAXP_ _SUM_ _NTRIALS;
1656441   + _DM_BAD = 0;
MPRINT(EM_DIAGRAM):   _DM_BAD = 0;
1656442   + _NOCL_ = .;
MPRINT(EM_DIAGRAM):   _NOCL_ = .;
1656443   + _MAX_ = .;
MPRINT(EM_DIAGRAM):   _MAX_ = .;
1656444   + _MAXP_ = .;
MPRINT(EM_DIAGRAM):   _MAXP_ = .;
1656445   + _SUM_ = .;
MPRINT(EM_DIAGRAM):   _SUM_ = .;
1656446   + _NTRIALS = .;
MPRINT(EM_DIAGRAM):   _NTRIALS = .;
1656447   + _EPS =                1E-10;
MPRINT(EM_DIAGRAM):   _EPS = 1E-10;
1656448   +LENGTH _WARN_ $4
1656449   +      F_DepVar  $ 12
1656450   +;
MPRINT(EM_DIAGRAM):   LENGTH _WARN_ $4 F_DepVar $ 12 ;
1656451   +      label S_PC_1 = 'Standard: PC_1' ;
MPRINT(EM_DIAGRAM):   label S_PC_1 = 'Standard: PC_1' ;
1656452   +
1656453   +      label S_PC_10 = 'Standard: PC_10' ;
MPRINT(EM_DIAGRAM):   label S_PC_10 = 'Standard: PC_10' ;
1656454   +
1656455   +      label S_PC_11 = 'Standard: PC_11' ;
MPRINT(EM_DIAGRAM):   label S_PC_11 = 'Standard: PC_11' ;
1656456   +
1656457   +      label S_PC_12 = 'Standard: PC_12' ;
MPRINT(EM_DIAGRAM):   label S_PC_12 = 'Standard: PC_12' ;
1656458   +
1656459   +      label S_PC_13 = 'Standard: PC_13' ;
MPRINT(EM_DIAGRAM):   label S_PC_13 = 'Standard: PC_13' ;
1656460   +
1656461   +      label S_PC_14 = 'Standard: PC_14' ;
MPRINT(EM_DIAGRAM):   label S_PC_14 = 'Standard: PC_14' ;
1656462   +
1656463   +      label S_PC_15 = 'Standard: PC_15' ;
MPRINT(EM_DIAGRAM):   label S_PC_15 = 'Standard: PC_15' ;
1656464   +
1656465   +      label S_PC_16 = 'Standard: PC_16' ;
MPRINT(EM_DIAGRAM):   label S_PC_16 = 'Standard: PC_16' ;
1656466   +
1656467   +      label S_PC_17 = 'Standard: PC_17' ;
MPRINT(EM_DIAGRAM):   label S_PC_17 = 'Standard: PC_17' ;
1656468   +
1656469   +      label S_PC_2 = 'Standard: PC_2' ;
MPRINT(EM_DIAGRAM):   label S_PC_2 = 'Standard: PC_2' ;
1656470   +
1656471   +      label S_PC_3 = 'Standard: PC_3' ;
MPRINT(EM_DIAGRAM):   label S_PC_3 = 'Standard: PC_3' ;
1656472   +
1656473   +      label S_PC_4 = 'Standard: PC_4' ;
MPRINT(EM_DIAGRAM):   label S_PC_4 = 'Standard: PC_4' ;
1656474   +
1656475   +      label S_PC_5 = 'Standard: PC_5' ;
MPRINT(EM_DIAGRAM):   label S_PC_5 = 'Standard: PC_5' ;
1656476   +
1656477   +      label S_PC_6 = 'Standard: PC_6' ;
MPRINT(EM_DIAGRAM):   label S_PC_6 = 'Standard: PC_6' ;
1656478   +
1656479   +      label S_PC_7 = 'Standard: PC_7' ;
MPRINT(EM_DIAGRAM):   label S_PC_7 = 'Standard: PC_7' ;
1656480   +
1656481   +      label S_PC_8 = 'Standard: PC_8' ;
MPRINT(EM_DIAGRAM):   label S_PC_8 = 'Standard: PC_8' ;
1656482   +
1656483   +      label S_PC_9 = 'Standard: PC_9' ;
MPRINT(EM_DIAGRAM):   label S_PC_9 = 'Standard: PC_9' ;
1656484   +
1656485   +      label S_Year_Birth = 'Standard: Year_Birth' ;
MPRINT(EM_DIAGRAM):   label S_Year_Birth = 'Standard: Year_Birth' ;
1656486   +
1656487   +      label H1x1_1 = 'Hidden: H1x1_=1' ;
MPRINT(EM_DIAGRAM):   label H1x1_1 = 'Hidden: H1x1_=1' ;
1656488   +
1656489   +      label H1x1_2 = 'Hidden: H1x1_=2' ;
MPRINT(EM_DIAGRAM):   label H1x1_2 = 'Hidden: H1x1_=2' ;
1656490   +
1656491   +      label H1x2_1 = 'Hidden: H1x2_=1' ;
MPRINT(EM_DIAGRAM):   label H1x2_1 = 'Hidden: H1x2_=1' ;
1656492   +
1656493   +      label H1x2_2 = 'Hidden: H1x2_=2' ;
MPRINT(EM_DIAGRAM):   label H1x2_2 = 'Hidden: H1x2_=2' ;
1656494   +
1656495   +      label H2x1_1 = 'Hidden: H2x1_=1' ;
MPRINT(EM_DIAGRAM):   label H2x1_1 = 'Hidden: H2x1_=1' ;
1656496   +
1656497   +      label H2x1_2 = 'Hidden: H2x1_=2' ;
MPRINT(EM_DIAGRAM):   label H2x1_2 = 'Hidden: H2x1_=2' ;
1656498   +
1656499   +      label I_DepVar = 'Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label I_DepVar = 'Into: DepVar' ;
1656500   +
1656501   +      label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1656502   +
1656503   +      label U_DepVar = 'Unnormalized Into: DepVar' ;
MPRINT(EM_DIAGRAM):   label U_DepVar = 'Unnormalized Into: DepVar' ;
1656504   +
1656505   +      label P_DepVar1 = 'Predicted: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label P_DepVar1 = 'Predicted: DepVar=1' ;
1656506   +
1656507   +      label R_DepVar1 = 'Residual: DepVar=1' ;
MPRINT(EM_DIAGRAM):   label R_DepVar1 = 'Residual: DepVar=1' ;
1656508   +
1656509   +      label P_DepVar0 = 'Predicted: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label P_DepVar0 = 'Predicted: DepVar=0' ;
1656510   +
1656511   +      label R_DepVar0 = 'Residual: DepVar=0' ;
MPRINT(EM_DIAGRAM):   label R_DepVar0 = 'Residual: DepVar=0' ;
1656512   +
1656513   +      label  _WARN_ = "Warnings";
MPRINT(EM_DIAGRAM):   label _WARN_ = "Warnings";
1656514   +
1656515   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656516   +*** Checking missing input Interval
1656517   +*** *************************;
MPRINT(EM_DIAGRAM):   *** Checking missing input Interval *** *************************;
1656518   +
1656519   +IF NMISS(
1656520   +   PC_1 ,
1656521   +   PC_10 ,
1656522   +   PC_11 ,
1656523   +   PC_12 ,
1656524   +   PC_13 ,
1656525   +   PC_14 ,
1656526   +   PC_15 ,
1656527   +   PC_16 ,
1656528   +   PC_17 ,
1656529   +   PC_2 ,
1656530   +   PC_3 ,
1656531   +   PC_4 ,
1656532   +   PC_5 ,
1656533   +   PC_6 ,
1656534   +   PC_7 ,
1656535   +   PC_8 ,
1656536   +   PC_9 ,
1656537   +   Year_Birth   ) THEN DO;
MPRINT(EM_DIAGRAM):   IF NMISS( PC_1 , PC_10 , PC_11 , PC_12 , PC_13 , PC_14 , PC_15 , PC_16 , 
PC_17 , PC_2 , PC_3 , PC_4 , PC_5 , PC_6 , PC_7 , PC_8 , PC_9 , Year_Birth ) THEN DO;
1656538   +   SUBSTR(_WARN_, 1, 1) = 'M';
MPRINT(EM_DIAGRAM):   SUBSTR(_WARN_, 1, 1) = 'M';
1656539   +
1656540   +   _DM_BAD = 1;
MPRINT(EM_DIAGRAM):   _DM_BAD = 1;
1656541   +END;
MPRINT(EM_DIAGRAM):   END;
1656542   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656543   +*** Writing the Node interval ;
MPRINT(EM_DIAGRAM):   *** Writing the Node interval ;
1656544   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656545   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1656546   +   S_PC_1  =  -3.567597872154E-15 +     0.29892739052271 * PC_1 ;
MPRINT(EM_DIAGRAM):   S_PC_1 = -3.567597872154E-15 + 0.29892739052271 * PC_1 ;
1656547   +   S_PC_10  = -6.0346468636081E-15 +     0.82173953858445 * PC_10 ;
MPRINT(EM_DIAGRAM):   S_PC_10 = -6.0346468636081E-15 + 0.82173953858445 * PC_10 ;
1656548   +   S_PC_11  =   6.055841017477E-15 +     0.85619046033275 * PC_11 ;
MPRINT(EM_DIAGRAM):   S_PC_11 = 6.055841017477E-15 + 0.85619046033275 * PC_11 ;
1656549   +   S_PC_12  = -3.9570415662911E-15 +     0.88816580619395 * PC_12 ;
MPRINT(EM_DIAGRAM):   S_PC_12 = -3.9570415662911E-15 + 0.88816580619395 * PC_12 ;
1656550   +   S_PC_13  =  1.4807903817941E-15 +     0.89679040249719 * PC_13 ;
MPRINT(EM_DIAGRAM):   S_PC_13 = 1.4807903817941E-15 + 0.89679040249719 * PC_13 ;
1656551   +   S_PC_14  = -6.1940871521205E-15 +     0.90336543119982 * PC_14 ;
MPRINT(EM_DIAGRAM):   S_PC_14 = -6.1940871521205E-15 + 0.90336543119982 * PC_14 ;
1656552   +   S_PC_15  =   -3.45147395417E-16 +     0.92997960877389 * PC_15 ;
MPRINT(EM_DIAGRAM):   S_PC_15 = -3.45147395417E-16 + 0.92997960877389 * PC_15 ;
1656553   +   S_PC_16  = -2.0832890955173E-15 +     0.95096832834142 * PC_16 ;
MPRINT(EM_DIAGRAM):   S_PC_16 = -2.0832890955173E-15 + 0.95096832834142 * PC_16 ;
1656554   +   S_PC_17  =  4.0710461992609E-15 +     0.99882451143041 * PC_17 ;
MPRINT(EM_DIAGRAM):   S_PC_17 = 4.0710461992609E-15 + 0.99882451143041 * PC_17 ;
1656555   +   S_PC_2  =  6.4589631283016E-15 +      0.5437311140029 * PC_2 ;
MPRINT(EM_DIAGRAM):   S_PC_2 = 6.4589631283016E-15 + 0.5437311140029 * PC_2 ;
1656556   +   S_PC_3  =  2.2833690425384E-15 +     0.55367740285547 * PC_3 ;
MPRINT(EM_DIAGRAM):   S_PC_3 = 2.2833690425384E-15 + 0.55367740285547 * PC_3 ;
1656557   +   S_PC_4  = -3.6725092169592E-15 +     0.63698127005552 * PC_4 ;
MPRINT(EM_DIAGRAM):   S_PC_4 = -3.6725092169592E-15 + 0.63698127005552 * PC_4 ;
1656558   +   S_PC_5  = -4.6355038408768E-15 +     0.66670299180006 * PC_5 ;
MPRINT(EM_DIAGRAM):   S_PC_5 = -4.6355038408768E-15 + 0.66670299180006 * PC_5 ;
1656559   +   S_PC_6  =  1.5846922792836E-15 +     0.70534791664737 * PC_6 ;
MPRINT(EM_DIAGRAM):   S_PC_6 = 1.5846922792836E-15 + 0.70534791664737 * PC_6 ;
1656560   +   S_PC_7  =  6.7268179657212E-16 +     0.74932361381713 * PC_7 ;
MPRINT(EM_DIAGRAM):   S_PC_7 = 6.7268179657212E-16 + 0.74932361381713 * PC_7 ;
1656561   +   S_PC_8  = -2.3246545307055E-15 +     0.77161638976627 * PC_8 ;
MPRINT(EM_DIAGRAM):   S_PC_8 = -2.3246545307055E-15 + 0.77161638976627 * PC_8 ;
1656562   +   S_PC_9  = -3.7729896578756E-15 +     0.80831761659605 * PC_9 ;
MPRINT(EM_DIAGRAM):   S_PC_9 = -3.7729896578756E-15 + 0.80831761659605 * PC_9 ;
1656563   +   S_Year_Birth  =    -163.205330145852 +     0.08289609202864 * Year_Birth ;
MPRINT(EM_DIAGRAM):   S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
1656564   +END;
MPRINT(EM_DIAGRAM):   END;
1656565   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1656566   +   IF MISSING( PC_1 ) THEN S_PC_1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_1 ) THEN S_PC_1 = . ;
1656567   +   ELSE S_PC_1  =  -3.567597872154E-15 +     0.29892739052271 * PC_1 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_1 = -3.567597872154E-15 + 0.29892739052271 * PC_1 ;
1656568   +   IF MISSING( PC_10 ) THEN S_PC_10  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_10 ) THEN S_PC_10 = . ;
1656569   +   ELSE S_PC_10  = -6.0346468636081E-15 +     0.82173953858445 * PC_10 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_10 = -6.0346468636081E-15 + 0.82173953858445 * PC_10 ;
1656570   +   IF MISSING( PC_11 ) THEN S_PC_11  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_11 ) THEN S_PC_11 = . ;
1656571   +   ELSE S_PC_11  =   6.055841017477E-15 +     0.85619046033275 * PC_11 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_11 = 6.055841017477E-15 + 0.85619046033275 * PC_11 ;
1656572   +   IF MISSING( PC_12 ) THEN S_PC_12  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_12 ) THEN S_PC_12 = . ;
1656573   +   ELSE S_PC_12  = -3.9570415662911E-15 +     0.88816580619395 * PC_12 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_12 = -3.9570415662911E-15 + 0.88816580619395 * PC_12 ;
1656574   +   IF MISSING( PC_13 ) THEN S_PC_13  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_13 ) THEN S_PC_13 = . ;
1656575   +   ELSE S_PC_13  =  1.4807903817941E-15 +     0.89679040249719 * PC_13 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_13 = 1.4807903817941E-15 + 0.89679040249719 * PC_13 ;
1656576   +   IF MISSING( PC_14 ) THEN S_PC_14  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_14 ) THEN S_PC_14 = . ;
1656577   +   ELSE S_PC_14  = -6.1940871521205E-15 +     0.90336543119982 * PC_14 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_14 = -6.1940871521205E-15 + 0.90336543119982 * PC_14 ;
1656578   +   IF MISSING( PC_15 ) THEN S_PC_15  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_15 ) THEN S_PC_15 = . ;
1656579   +   ELSE S_PC_15  =   -3.45147395417E-16 +     0.92997960877389 * PC_15 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_15 = -3.45147395417E-16 + 0.92997960877389 * PC_15 ;
1656580   +   IF MISSING( PC_16 ) THEN S_PC_16  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_16 ) THEN S_PC_16 = . ;
1656581   +   ELSE S_PC_16  = -2.0832890955173E-15 +     0.95096832834142 * PC_16 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_16 = -2.0832890955173E-15 + 0.95096832834142 * PC_16 ;
1656582   +   IF MISSING( PC_17 ) THEN S_PC_17  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_17 ) THEN S_PC_17 = . ;
1656583   +   ELSE S_PC_17  =  4.0710461992609E-15 +     0.99882451143041 * PC_17 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_17 = 4.0710461992609E-15 + 0.99882451143041 * PC_17 ;
1656584   +   IF MISSING( PC_2 ) THEN S_PC_2  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_2 ) THEN S_PC_2 = . ;
1656585   +   ELSE S_PC_2  =  6.4589631283016E-15 +      0.5437311140029 * PC_2 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_2 = 6.4589631283016E-15 + 0.5437311140029 * PC_2 ;
1656586   +   IF MISSING( PC_3 ) THEN S_PC_3  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_3 ) THEN S_PC_3 = . ;
1656587   +   ELSE S_PC_3  =  2.2833690425384E-15 +     0.55367740285547 * PC_3 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_3 = 2.2833690425384E-15 + 0.55367740285547 * PC_3 ;
1656588   +   IF MISSING( PC_4 ) THEN S_PC_4  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_4 ) THEN S_PC_4 = . ;
1656589   +   ELSE S_PC_4  = -3.6725092169592E-15 +     0.63698127005552 * PC_4 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_4 = -3.6725092169592E-15 + 0.63698127005552 * PC_4 ;
1656590   +   IF MISSING( PC_5 ) THEN S_PC_5  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_5 ) THEN S_PC_5 = . ;
1656591   +   ELSE S_PC_5  = -4.6355038408768E-15 +     0.66670299180006 * PC_5 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_5 = -4.6355038408768E-15 + 0.66670299180006 * PC_5 ;
1656592   +   IF MISSING( PC_6 ) THEN S_PC_6  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_6 ) THEN S_PC_6 = . ;
1656593   +   ELSE S_PC_6  =  1.5846922792836E-15 +     0.70534791664737 * PC_6 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_6 = 1.5846922792836E-15 + 0.70534791664737 * PC_6 ;
1656594   +   IF MISSING( PC_7 ) THEN S_PC_7  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_7 ) THEN S_PC_7 = . ;
1656595   +   ELSE S_PC_7  =  6.7268179657212E-16 +     0.74932361381713 * PC_7 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_7 = 6.7268179657212E-16 + 0.74932361381713 * PC_7 ;
1656596   +   IF MISSING( PC_8 ) THEN S_PC_8  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_8 ) THEN S_PC_8 = . ;
1656597   +   ELSE S_PC_8  = -2.3246545307055E-15 +     0.77161638976627 * PC_8 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_8 = -2.3246545307055E-15 + 0.77161638976627 * PC_8 ;
1656598   +   IF MISSING( PC_9 ) THEN S_PC_9  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( PC_9 ) THEN S_PC_9 = . ;
1656599   +   ELSE S_PC_9  = -3.7729896578756E-15 +     0.80831761659605 * PC_9 ;
MPRINT(EM_DIAGRAM):   ELSE S_PC_9 = -3.7729896578756E-15 + 0.80831761659605 * PC_9 ;
1656600   +   IF MISSING( Year_Birth ) THEN S_Year_Birth  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( Year_Birth ) THEN S_Year_Birth = . ;
1656601   +   ELSE S_Year_Birth  =    -163.205330145852 +     0.08289609202864 *
1656602   +        Year_Birth ;
MPRINT(EM_DIAGRAM):   ELSE S_Year_Birth = -163.205330145852 + 0.08289609202864 * Year_Birth ;
1656603   +END;
MPRINT(EM_DIAGRAM):   END;
1656604   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656605   +*** Writing the Node H1x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x1_ ;
1656606   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656607   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1656608   +   H1x1_1  =     0.43680201227507 * S_PC_1  +     -6.2790158097825 * S_PC_10
1656609   +          +    -0.85163775862488 * S_PC_11  +    -0.47925818483654 * S_PC_12
1656610   +          +     0.53949631368636 * S_PC_13  +    -1.02786919322634 * S_PC_14
1656611   +          +     1.05380889262599 * S_PC_15  +     0.42199683608767 * S_PC_16
1656612   +          +    -0.71911349630558 * S_PC_17  +     1.49052849216329 * S_PC_2
1656613   +          +     2.01791864422989 * S_PC_3  +     0.50251490560603 * S_PC_4
1656614   +          +     2.37547414637231 * S_PC_5  +    -12.9780560511029 * S_PC_6
1656615   +          +     3.16615596569995 * S_PC_7  +    -0.95122743907623 * S_PC_8
1656616   +          +     0.60588801007045 * S_PC_9  +    -1.68407195457659 *
1656617   +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 0.43680201227507 * S_PC_1 + -6.2790158097825 * S_PC_10 + 
-0.85163775862488 * S_PC_11 + -0.47925818483654 * S_PC_12 + 0.53949631368636 * S_PC_13 + 
-1.02786919322634 * S_PC_14 + 1.05380889262599 * S_PC_15 + 0.42199683608767 * S_PC_16 + 
-0.71911349630558 * S_PC_17 + 1.49052849216329 * S_PC_2 + 2.01791864422989 * S_PC_3 + 
0.50251490560603 * S_PC_4 + 2.37547414637231 * S_PC_5 + -12.9780560511029 * S_PC_6 + 
3.16615596569995 * S_PC_7 + -0.95122743907623 * S_PC_8 + 0.60588801007045 * S_PC_9 + 
-1.68407195457659 * S_Year_Birth ;
1656618   +   H1x1_2  =     1.63884455838679 * S_PC_1  +     1.55805646615441 * S_PC_10
1656619   +          +       0.871527478556 * S_PC_11  +    -1.86644786352904 * S_PC_12
1656620   +          +     0.41262512952967 * S_PC_13  +    -0.22890984418147 * S_PC_14
1656621   +          +    -0.48543757796659 * S_PC_15  +     0.45387364017022 * S_PC_16
1656622   +          +     0.56687737066004 * S_PC_17  +    -4.72959850328856 * S_PC_2
1656623   +          +    -3.28098421689064 * S_PC_3  +     2.18992266997339 * S_PC_4
1656624   +          +     1.40182849048979 * S_PC_5  +     -0.0909042963425 * S_PC_6
1656625   +          +     1.04679329187044 * S_PC_7  +    -6.82015390191902 * S_PC_8
1656626   +          +    -1.56263590917838 * S_PC_9  +     0.77238679717726 *
1656627   +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.63884455838679 * S_PC_1 + 1.55805646615441 * S_PC_10 + 
0.871527478556 * S_PC_11 + -1.86644786352904 * S_PC_12 + 0.41262512952967 * S_PC_13 + 
-0.22890984418147 * S_PC_14 + -0.48543757796659 * S_PC_15 + 0.45387364017022 * S_PC_16 + 
0.56687737066004 * S_PC_17 + -4.72959850328856 * S_PC_2 + -3.28098421689064 * S_PC_3 + 
2.18992266997339 * S_PC_4 + 1.40182849048979 * S_PC_5 + -0.0909042963425 * S_PC_6 + 
1.04679329187044 * S_PC_7 + -6.82015390191902 * S_PC_8 + -1.56263590917838 * S_PC_9 + 
0.77238679717726 * S_Year_Birth ;
1656628   +   H1x1_1  =     4.05028790797153 + H1x1_1 ;
MPRINT(EM_DIAGRAM):   H1x1_1 = 4.05028790797153 + H1x1_1 ;
1656629   +   H1x1_2  =     1.11077500443451 + H1x1_2 ;
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.11077500443451 + H1x1_2 ;
1656630   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1656631   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1656632   +   H1x1_1  = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_1 = 1.0 / (1.0 + EXP(MIN( - H1x1_1 , _EXP_BAR)));
1656633   +   H1x1_2  = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x1_2 = 1.0 / (1.0 + EXP(MIN( - H1x1_2 , _EXP_BAR)));
1656634   +END;
MPRINT(EM_DIAGRAM):   END;
1656635   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1656636   +   H1x1_1  = .;
MPRINT(EM_DIAGRAM):   H1x1_1 = .;
1656637   +   H1x1_2  = .;
MPRINT(EM_DIAGRAM):   H1x1_2 = .;
1656638   +END;
MPRINT(EM_DIAGRAM):   END;
1656639   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656640   +*** Writing the Node H1x2_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H1x2_ ;
1656641   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656642   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1656643   +   H1x2_1  =     0.49133572641194 * S_PC_1  +    -3.63139547485729 * S_PC_10
1656644   +          +    -2.85339070710028 * S_PC_11  +     0.77282036887084 * S_PC_12
1656645   +          +    -0.66851763433834 * S_PC_13  +    -3.91056372100105 * S_PC_14
1656646   +          +     1.87346503010337 * S_PC_15  +    -0.07558934876683 * S_PC_16
1656647   +          +     0.42787488264488 * S_PC_17  +    -2.88492824877701 * S_PC_2
1656648   +          +    -0.31661887817892 * S_PC_3  +     2.91913215925162 * S_PC_4
1656649   +          +    -2.71227883848425 * S_PC_5  +     1.38175958071778 * S_PC_6
1656650   +          +     2.36276963584368 * S_PC_7  +     1.22943836582433 * S_PC_8
1656651   +          +    -1.27876292661165 * S_PC_9  +    -1.37310011899913 *
1656652   +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_1 = 0.49133572641194 * S_PC_1 + -3.63139547485729 * S_PC_10 + 
-2.85339070710028 * S_PC_11 + 0.77282036887084 * S_PC_12 + -0.66851763433834 * S_PC_13 + 
-3.91056372100105 * S_PC_14 + 1.87346503010337 * S_PC_15 + -0.07558934876683 * S_PC_16 + 
0.42787488264488 * S_PC_17 + -2.88492824877701 * S_PC_2 + -0.31661887817892 * S_PC_3 + 
2.91913215925162 * S_PC_4 + -2.71227883848425 * S_PC_5 + 1.38175958071778 * S_PC_6 + 
2.36276963584368 * S_PC_7 + 1.22943836582433 * S_PC_8 + -1.27876292661165 * S_PC_9 + 
-1.37310011899913 * S_Year_Birth ;
1656653   +   H1x2_2  =     1.13194891980772 * S_PC_1  +       1.200296031517 * S_PC_10
1656654   +          +      1.9424285056754 * S_PC_11  +    -0.72512252212605 * S_PC_12
1656655   +          +     0.42487518228862 * S_PC_13  +    -0.51909348949551 * S_PC_14
1656656   +          +     0.46199702179315 * S_PC_15  +     1.55734866191972 * S_PC_16
1656657   +          +    -0.24286430970891 * S_PC_17  +     0.23604119250321 * S_PC_2
1656658   +          +    -0.48848660893775 * S_PC_3  +    -1.13412105084126 * S_PC_4
1656659   +          +     2.75507735274993 * S_PC_5  +    -0.17128767064677 * S_PC_6
1656660   +          +    -1.57104436529298 * S_PC_7  +    -0.46913090608696 * S_PC_8
1656661   +          +     2.07900112911328 * S_PC_9  +     0.03363552766376 *
1656662   +        S_Year_Birth ;
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.13194891980772 * S_PC_1 + 1.200296031517 * S_PC_10 + 
1.9424285056754 * S_PC_11 + -0.72512252212605 * S_PC_12 + 0.42487518228862 * S_PC_13 + 
-0.51909348949551 * S_PC_14 + 0.46199702179315 * S_PC_15 + 1.55734866191972 * S_PC_16 + 
-0.24286430970891 * S_PC_17 + 0.23604119250321 * S_PC_2 + -0.48848660893775 * S_PC_3 + 
-1.13412105084126 * S_PC_4 + 2.75507735274993 * S_PC_5 + -0.17128767064677 * S_PC_6 + 
-1.57104436529298 * S_PC_7 + -0.46913090608696 * S_PC_8 + 2.07900112911328 * S_PC_9 + 
0.03363552766376 * S_Year_Birth ;
1656663   +   H1x2_1  =    -0.43155049224367 + H1x2_1 ;
MPRINT(EM_DIAGRAM):   H1x2_1 = -0.43155049224367 + H1x2_1 ;
1656664   +   H1x2_2  =    -2.78257059016385 + H1x2_2 ;
MPRINT(EM_DIAGRAM):   H1x2_2 = -2.78257059016385 + H1x2_2 ;
1656665   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1656666   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1656667   +   H1x2_1  = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_1 = 1.0 / (1.0 + EXP(MIN( - H1x2_1 , _EXP_BAR)));
1656668   +   H1x2_2  = 1.0 / (1.0 + EXP(MIN( - H1x2_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H1x2_2 = 1.0 / (1.0 + EXP(MIN( - H1x2_2 , _EXP_BAR)));
1656669   +END;
MPRINT(EM_DIAGRAM):   END;
1656670   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1656671   +   H1x2_1  = .;
MPRINT(EM_DIAGRAM):   H1x2_1 = .;
1656672   +   H1x2_2  = .;
MPRINT(EM_DIAGRAM):   H1x2_2 = .;
1656673   +END;
MPRINT(EM_DIAGRAM):   END;
1656674   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656675   +*** Writing the Node H2x1_ ;
MPRINT(EM_DIAGRAM):   *** Writing the Node H2x1_ ;
1656676   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656677   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1656678   +   H2x1_1  =    -0.58628901827172 * H1x1_1  +    -0.38264717664894 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -0.58628901827172 * H1x1_1 + -0.38264717664894 * H1x1_2 ;
1656679   +   H2x1_2  =     3.34114365917939 * H1x1_1  +     5.29708430378954 * H1x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = 3.34114365917939 * H1x1_1 + 5.29708430378954 * H1x1_2 ;
1656680   +   H2x1_1  = H2x1_1  +      2.5805656289524 * H1x2_1
1656681   +          +    -1.49998755966571 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = H2x1_1 + 2.5805656289524 * H1x2_1 + -1.49998755966571 * H1x2_2 ;
1656682   +   H2x1_2  = H2x1_2  +    -1.69181018760832 * H1x2_1
1656683   +          +    -2.07716568009834 * H1x2_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = H2x1_2 + -1.69181018760832 * H1x2_1 + -2.07716568009834 * 
H1x2_2 ;
1656684   +   H2x1_1  =    -0.33385262176294 + H2x1_1 ;
MPRINT(EM_DIAGRAM):   H2x1_1 = -0.33385262176294 + H2x1_1 ;
1656685   +   H2x1_2  =     -2.8869129511929 + H2x1_2 ;
MPRINT(EM_DIAGRAM):   H2x1_2 = -2.8869129511929 + H2x1_2 ;
1656686   +   DROP _EXP_BAR;
MPRINT(EM_DIAGRAM):   DROP _EXP_BAR;
1656687   +   _EXP_BAR=50;
MPRINT(EM_DIAGRAM):   _EXP_BAR=50;
1656688   +   H2x1_1  = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_1 = 1.0 / (1.0 + EXP(MIN( - H2x1_1 , _EXP_BAR)));
1656689   +   H2x1_2  = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
MPRINT(EM_DIAGRAM):   H2x1_2 = 1.0 / (1.0 + EXP(MIN( - H2x1_2 , _EXP_BAR)));
1656690   +END;
MPRINT(EM_DIAGRAM):   END;
1656691   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1656692   +   H2x1_1  = .;
MPRINT(EM_DIAGRAM):   H2x1_1 = .;
1656693   +   H2x1_2  = .;
MPRINT(EM_DIAGRAM):   H2x1_2 = .;
1656694   +END;
MPRINT(EM_DIAGRAM):   END;
1656695   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656696   +*** Writing the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Node DepVar ;
1656697   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656698   +
1656699   +*** Generate dummy variables for DepVar ;
MPRINT(EM_DIAGRAM):   *** Generate dummy variables for DepVar ;
1656700   +drop DepVar1 DepVar0 ;
MPRINT(EM_DIAGRAM):   drop DepVar1 DepVar0 ;
1656701   +label F_DepVar = 'From: DepVar' ;
MPRINT(EM_DIAGRAM):   label F_DepVar = 'From: DepVar' ;
1656702   +length F_DepVar $ 12;
MPRINT(EM_DIAGRAM):   length F_DepVar $ 12;
1656703   +F_DepVar = put( DepVar , BEST. );
MPRINT(EM_DIAGRAM):   F_DepVar = put( DepVar , BEST. );
1656704   +%DMNORMIP( F_DepVar )
MPRINT(DMNORMIP):   call dmnorm(F_DepVar,
MPRINT(DMNORLEN):  32
MPRINT(DMNORMIP):  );
1656705   +if missing( DepVar ) then do;
MPRINT(EM_DIAGRAM):   if missing( DepVar ) then do;
1656706   +   DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1656707   +   DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1656708   +end;
MPRINT(EM_DIAGRAM):   end;
1656709   +else do;
MPRINT(EM_DIAGRAM):   else do;
1656710   +   if F_DepVar = '0'  then do;
MPRINT(EM_DIAGRAM):   if F_DepVar = '0' then do;
1656711   +      DepVar1 = 0;
MPRINT(EM_DIAGRAM):   DepVar1 = 0;
1656712   +      DepVar0 = 1;
MPRINT(EM_DIAGRAM):   DepVar0 = 1;
1656713   +   end;
MPRINT(EM_DIAGRAM):   end;
1656714   +   else if F_DepVar = '1'  then do;
MPRINT(EM_DIAGRAM):   else if F_DepVar = '1' then do;
1656715   +      DepVar1 = 1;
MPRINT(EM_DIAGRAM):   DepVar1 = 1;
1656716   +      DepVar0 = 0;
MPRINT(EM_DIAGRAM):   DepVar0 = 0;
1656717   +   end;
MPRINT(EM_DIAGRAM):   end;
1656718   +   else do;
MPRINT(EM_DIAGRAM):   else do;
1656719   +      DepVar1 = .;
MPRINT(EM_DIAGRAM):   DepVar1 = .;
1656720   +      DepVar0 = .;
MPRINT(EM_DIAGRAM):   DepVar0 = .;
1656721   +   end;
MPRINT(EM_DIAGRAM):   end;
1656722   +end;
MPRINT(EM_DIAGRAM):   end;
1656723   +IF _DM_BAD EQ 0 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 0 THEN DO;
1656724   +   P_DepVar1  =     3.04524518437786 * H2x1_1  +     -10.199120548994 * H2x1_2
1656725   +         ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 3.04524518437786 * H2x1_1 + -10.199120548994 * H2x1_2 ;
1656726   +   P_DepVar1  =       0.762279546697 + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.762279546697 + P_DepVar1 ;
1656727   +   P_DepVar0  = 0;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0;
1656728   +   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
MPRINT(EM_DIAGRAM):   _MAX_ = MAX (P_DepVar1 , P_DepVar0 );
1656729   +   _SUM_ = 0.;
MPRINT(EM_DIAGRAM):   _SUM_ = 0.;
1656730   +   P_DepVar1  = EXP(P_DepVar1  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar1 = EXP(P_DepVar1 - _MAX_);
1656731   +   _SUM_ = _SUM_ + P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar1 ;
1656732   +   P_DepVar0  = EXP(P_DepVar0  - _MAX_);
MPRINT(EM_DIAGRAM):   P_DepVar0 = EXP(P_DepVar0 - _MAX_);
1656733   +   _SUM_ = _SUM_ + P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _SUM_ = _SUM_ + P_DepVar0 ;
1656734   +   P_DepVar1  = P_DepVar1  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar1 = P_DepVar1 / _SUM_;
1656735   +   P_DepVar0  = P_DepVar0  / _SUM_;
MPRINT(EM_DIAGRAM):   P_DepVar0 = P_DepVar0 / _SUM_;
1656736   +END;
MPRINT(EM_DIAGRAM):   END;
1656737   +ELSE DO;
MPRINT(EM_DIAGRAM):   ELSE DO;
1656738   +   P_DepVar1  = .;
MPRINT(EM_DIAGRAM):   P_DepVar1 = .;
1656739   +   P_DepVar0  = .;
MPRINT(EM_DIAGRAM):   P_DepVar0 = .;
1656740   +END;
MPRINT(EM_DIAGRAM):   END;
1656741   +IF _DM_BAD EQ 1 THEN DO;
MPRINT(EM_DIAGRAM):   IF _DM_BAD EQ 1 THEN DO;
1656742   +   P_DepVar1  =     0.15122156697556;
MPRINT(EM_DIAGRAM):   P_DepVar1 = 0.15122156697556;
1656743   +   P_DepVar0  =     0.84877843302443;
MPRINT(EM_DIAGRAM):   P_DepVar0 = 0.84877843302443;
1656744   +END;
MPRINT(EM_DIAGRAM):   END;
1656745   +*** *****************************;
MPRINT(EM_DIAGRAM):   *** *****************************;
1656746   +*** Writing the Residuals  of the Node DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the Residuals of the Node DepVar ;
1656747   +*** ******************************;
MPRINT(EM_DIAGRAM):   *** ******************************;
1656748   +IF MISSING( DepVar1 ) THEN R_DepVar1  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar1 ) THEN R_DepVar1 = . ;
1656749   +ELSE R_DepVar1  = DepVar1  - P_DepVar1 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar1 = DepVar1 - P_DepVar1 ;
1656750   +IF MISSING( DepVar0 ) THEN R_DepVar0  = . ;
MPRINT(EM_DIAGRAM):   IF MISSING( DepVar0 ) THEN R_DepVar0 = . ;
1656751   +ELSE R_DepVar0  = DepVar0  - P_DepVar0 ;
MPRINT(EM_DIAGRAM):   ELSE R_DepVar0 = DepVar0 - P_DepVar0 ;
1656752   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656753   +*** Writing the I_DepVar  AND U_DepVar ;
MPRINT(EM_DIAGRAM):   *** Writing the I_DepVar AND U_DepVar ;
1656754   +*** *************************;
MPRINT(EM_DIAGRAM):   *** *************************;
1656755   +_MAXP_ = P_DepVar1 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar1 ;
1656756   +I_DepVar  = "1           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "1           " ;
1656757   +U_DepVar  =                    1;
MPRINT(EM_DIAGRAM):   U_DepVar = 1;
1656758   +IF( _MAXP_ LT P_DepVar0  ) THEN DO;
MPRINT(EM_DIAGRAM):   IF( _MAXP_ LT P_DepVar0 ) THEN DO;
1656759   +   _MAXP_ = P_DepVar0 ;
MPRINT(EM_DIAGRAM):   _MAXP_ = P_DepVar0 ;
1656760   +   I_DepVar  = "0           " ;
MPRINT(EM_DIAGRAM):   I_DepVar = "0           " ;
1656761   +   U_DepVar  =                    0;
MPRINT(EM_DIAGRAM):   U_DepVar = 0;
1656762   +END;
MPRINT(EM_DIAGRAM):   END;
1656763   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1656764   +*** End Scoring Code for Neural;
MPRINT(EM_DIAGRAM):   *** End Scoring Code for Neural;
1656765   +********************************;
MPRINT(EM_DIAGRAM):   ********************************;
1656766   +drop S_:;
MPRINT(EM_DIAGRAM):   drop S_:;
NOTE: %INCLUDE (level 1) ending.
MPRINT(EM_DIAGRAM):   run;
1656767    run;

NOTE: DATA STEP view saved on file EMWS8.AUTONEURAL17_VALIDATE.
NOTE: A stored DATA STEP view cannot run under a different operating system.
NOTE: View EMWS8.PRINCOMP_VALIDATE.VIEW used (Total process time):
      real time           0.37 seconds
      cpu time            0.04 seconds
      
NOTE: DATA statement used (Total process time):
      real time           0.37 seconds
      cpu time            0.04 seconds
      

MPRINT(EM_DIAGRAM):   quit;
1656768    quit;
1656769    filename emflow;
MPRINT(EM_DIAGRAM):   filename emflow;
NOTE: Fileref EMFLOW has been deassigned.
1656770    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
1656771    * AutoNeural17: Computing metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   * AutoNeural17: Computing metadata for TRAIN data;
1656772    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;

NOTE: View EMWS8.AUTONEURAL17_TRAIN.VIEW used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      
MPRINT(EM_DIAGRAM):    *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Computing Metadata for TRAIN data;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   filename _delta 
"C:\\predictive-models-project\Workspaces\EMWS8\AutoNeural17\CDELTA_TRAIN.sas";
MPRINT(EMADVISECOLUMNS):   proc display c=sashelp.emmeta.advisecolumns.scl;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    options validvarname=any;
MPRINT(EMADVISECOLUMNS):   proc contents data=EMWS8.AutoNeural17_TRAIN out=_tempAdvisor 
noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   options validvarname=V7;
MPRINT(EMADVISECOLUMNS):    data _null_;
MPRINT(EMADVISECOLUMNS):   dsid = open('EMWS8.AutoNeural17_TRAIN');
MPRINT(EMADVISECOLUMNS):   call symput('_dsidTable', strip(put(dsid, best.)));
MPRINT(EMADVISECOLUMNS):   if dsid then do;
MPRINT(EMADVISECOLUMNS):   call symput('_engineTable', attrc(dsid, 'ENGINE'));
MPRINT(EMADVISECOLUMNS):   dsid = close(dsid);
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc contents data=EMWS8.AutoNeural17_TRAIN out=WORK.M3CHWRXD 
noprint;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CHWRXD;
MPRINT(EMADVISECOLUMNS):   length NAME $ 64 TYPE $ 1 LABEL $ 200 FORMAT $ 20 INFORMAT $20 
INDEX $ 1 INDEXTYPE $ 9;
MPRINT(EMADVISECOLUMNS):   label NAME =;
MPRINT(EMADVISECOLUMNS):   set WORK.M3CHWRXD(keep=name type length label format formatl 
formatd informat informl informd idxusage rename=(type=itype));
MPRINT(EMADVISECOLUMNS):   if itype = 1 then type = 'N';
MPRINT(EMADVISECOLUMNS):   else type = 'C';
MPRINT(EMADVISECOLUMNS):   if formatl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then format = strip(format)!!strip(put(formatl, 
best12.))!!'.'!!strip(put(formatd, best12.));
MPRINT(EMADVISECOLUMNS):   else format = strip(put(formatl, best12.))!!'.'!!strip(put(formatd, 
best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if format ne '' then format = strip(format)!!'.';
MPRINT(EMADVISECOLUMNS):   if informl > 0 then do;
MPRINT(EMADVISECOLUMNS):   if informat ne ' ' then informat = 
strip(informat)!!strip(put(informl, best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   else informat = strip(put(informl, 
best12.))!!'.'!!strip(put(informd, best12.));
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if informat ne '' then informat = strip(informat)!!'.';
MPRINT(EMADVISECOLUMNS):   if idxusage = 'NONE' then index ="N";
MPRINT(EMADVISECOLUMNS):   else index = "Y";
MPRINT(EMADVISECOLUMNS):   indextype = idxusage;
MPRINT(EMADVISECOLUMNS):   drop idxusage itype formatl formatd informl informd;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3CHWRXD;
MPRINT(EMADVISECOLUMNS):   length UNAME $64;
MPRINT(EMADVISECOLUMNS):   set WORK.M3CHWRXD;
MPRINT(EMADVISECOLUMNS):   UNAME = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    proc sort data=WORK.M0O_9LV4 NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by UNAME;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0O_9LV4;
MPRINT(EMADVISECOLUMNS):   drop UNAME;
MPRINT(EMADVISECOLUMNS):   set WORK.M0O_9LV4;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M3BM4N5_(keep=NAME ATTR);
MPRINT(EMADVISECOLUMNS):   length ATTR $ 20;
MPRINT(EMADVISECOLUMNS):   set WORK.M0O_9LV4;
MPRINT(EMADVISECOLUMNS):   if level ne "INTERVAL" then do;
MPRINT(EMADVISECOLUMNS):   if order = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ORDER';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' and formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'FORMATTYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'ROLE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'LEVEL';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if type = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'TYPE';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if index = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'INDEX';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if report = ' ' then do;
MPRINT(EMADVISECOLUMNS):   attr = 'REPORT';
MPRINT(EMADVISECOLUMNS):   output;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   proc sort NOTHREADS;
MPRINT(EMADVISECOLUMNS):   by attr;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0O_9LV4;
MPRINT(EMADVISECOLUMNS):   length NAME $64 ROLE $ 32 LEVEL $ 10 ORDER $ 8 CREATOR $32 
FORMATTYPE $ 10 FAMILY $ 10 LOWERLIMIT 8 UPPERLIMIT 8 REPORT $1 DISTRIBUTION $ 20 COMMENT $64;
MPRINT(EMADVISECOLUMNS):   length levelAssigned 8 roleAssigned 8 PRICE 8;
MPRINT(EMADVISECOLUMNS):   set WORK.M0O_9LV4;
MPRINT(EMADVISECOLUMNS):   if formattype = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if format ne ' ' then do;
MPRINT(EMADVISECOLUMNS):   if type = 'N' then do;
MPRINT(EMADVISECOLUMNS):   pos = indexc(format,'.1234567890');
MPRINT(EMADVISECOLUMNS):   if pos > 1 then tempfmt = substr(format,1, pos-1);
MPRINT(EMADVISECOLUMNS):   else tempfmt = ' ';
MPRINT(EMADVISECOLUMNS):   flen = length(tempfmt);
MPRINT(EMADVISECOLUMNS):   select;
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATE" "DAY" "DDMMYY" "DOWNAME" "JULDAY" "JULIAN" 
"MMDDYY" "MMDDYYD" "MMDDYYC" "MMDDYYN" "MMDDYYP" "MMDDYYS" "MONNAME" "MONTH" "MONYY" "NENGO" 
"QTR" "QTRR" "WEEKDATE" "WEEKDATX" "WEEKDAY" "WORDDATE" "WORDDATX" "YEAR" "YYMMDD" "YYMON" 
"YYMMDDC" "YYMMDDD" "YYMMDDN" "YYMMDDP" "YYMMDDS" "EURDFDE" "NJDATE" "NLDATE" "EURDFDD" 
"EURDFDWN" "EURDFMN" "EURDFMY" "EURDFWK" "EURDFWKX" "EURDFWDX" "EURDFDN" "EURDFDE" )) 
formattype = 'DATE';
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("DATETIME" "EURDFDT" "TOD" )) formattype = 
"DATETIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("HHMM" "HOUR" "MMSS" "TIME" "TIMEAMPM" )) 
formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("COMMA" "COMMAX" "DOLLAR" "DOLLARX" "E" "FRACT" 
"NEGPAREN" "PERCENT")) formattype="QUANTITY";
MPRINT(EMADVISECOLUMNS):   when(tempfmt in ("BINARY" "HEX" "IB" "OCTAL" "PD" "PIB" "PK" "RB" 
"SSN" "Z" "ZD")) formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   formattype = "USER";
MPRINT(EMADVISECOLUMNS):   if substr(tempfmt, 1, 6)='NLDATE' then formattype = "DATE";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 6)='NLDATM' then formattype = "DATETIME";
MPRINT(EMADVISECOLUMNS):   else if substr(tempfmt, 1, 4)='NLTIM' then formattype = "TIME";
MPRINT(EMADVISECOLUMNS):   else if flen >= 4 then do;
MPRINT(EMADVISECOLUMNS):   str = substr(tempfmt,1,4);
MPRINT(EMADVISECOLUMNS):   if str in ("MMYY" "YYMM" "YYQR") then formattype ="DATE";
MPRINT(EMADVISECOLUMNS):   else if str = "S370" then formattype = "CODING";
MPRINT(EMADVISECOLUMNS):   else if str = "BEST" then formattype = "NUM";
MPRINT(EMADVISECOLUMNS):   drop str;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if flen >=3 and substr(tempfmt,1,3) = "YYQ" then formatType = 
"DATE";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   drop flen tempfmt pos;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   formatType = "CATEGORY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if formatType = "NUM" then do;
MPRINT(EMADVISECOLUMNS):   if index = "Y" then formatType = "DISCRETE";
MPRINT(EMADVISECOLUMNS):   else formatType = "QUANTITY";
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if level = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formatType in ("CATEGORY", "CODING", "ID") or type = "C" then 
level = "NOMINAL";
MPRINT(EMADVISECOLUMNS):   else level = "INTERVAL";
MPRINT(EMADVISECOLUMNS):   levelAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else level = upcase(level);
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   length name_prefix $8 _uname $64;
MPRINT(EMADVISECOLUMNS):   drop name_prefix _uname _freqflag;
MPRINT(EMADVISECOLUMNS):   retain _freqflag;
MPRINT(EMADVISECOLUMNS):   if LENGTH> 80 then ROLE = 'TEXT';
MPRINT(EMADVISECOLUMNS):   _uname = upcase(NAME);
MPRINT(EMADVISECOLUMNS):   select(_uname);
MPRINT(EMADVISECOLUMNS):   when('_WARN_') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_SEGMENT') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('_NODE_') do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSTARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_VALUETARGET') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_PREDICTION') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_PROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_EVENTPROBABILITY') ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   when('EM_CLASSIFICATION') ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   when('EM_DECISION') ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   when('EM_PROFIT') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_LOSS') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('EM_ROI') ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   when('URI') ROLE = 'URL';
MPRINT(EMADVISECOLUMNS):   when('FILTERED') ROLE = 'TEXTLOC';
MPRINT(EMADVISECOLUMNS):   otherwise do;
MPRINT(EMADVISECOLUMNS):   if upcase(NAME) =: 'ZIP' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'REJECTED';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   COMMENT = 'Rejected by: Exceed the maximum class level of %s';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if upcase(NAME) in('FREQ', 'FREQUENCY') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'FREQ';
MPRINT(EMADVISECOLUMNS):   if TYPE = 'C' then ROLE = 'INPUT';
MPRINT(EMADVISECOLUMNS):   else if _freqflag =1 then ROLE='REJECTED';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   name_prefix = scan(_uname, 1, '_');
MPRINT(EMADVISECOLUMNS):   if scan(_uname, 2, '_') = '' then name_prefix='';
MPRINT(EMADVISECOLUMNS):   if name_prefix in('F', 'I', 'U') then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'CLASSIFICATION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('P', 'V') then ROLE = 'PREDICT';
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('R', 'RS', 'RT', 'RD', 'RDS', 'RDT', 'RA', 
'RAS', 'RAT') then ROLE = 'RESIDUAL';
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='D' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'DECISION';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix ='B' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'SEGMENT';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else if name_prefix in('EP', 'BP', 'CP', 'EL', 'CL', 'BL', 'W', 
'ROI', 'IC') then ROLE = 'ASSESS';
MPRINT(EMADVISECOLUMNS):   else do;
MPRINT(EMADVISECOLUMNS):   array _ROLE_ (19) $32 _TEMPORARY_ 
('ASSESS','CLASSIFICATION','CENSOR', 'COST', 'CROSSID', 'DECISION', 'ID','INPUT', 'LABEL', 
'MISSING','PREDICT','REFERRER','REJECTED', 'RESIDUAL','SEGMENT', 'SEQUENCE','TARGET', 'TEXT', 
'TIMEID');
MPRINT(EMADVISECOLUMNS):   drop _found_ i;
MPRINT(EMADVISECOLUMNS):   _found_=0;
MPRINT(EMADVISECOLUMNS):   do i=1 to 19 until(_found_=1);
MPRINT(EMADVISECOLUMNS):   if index(_uname, trim(_ROLE_{i}))=1 then do;
MPRINT(EMADVISECOLUMNS):   ROLE=_ROLE_{i};
MPRINT(EMADVISECOLUMNS):   if ROLE = 'ID' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'SEGMENT' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'TIMEID' and TYPE='N' then LEVEL = 'INTERVAL';
MPRINT(EMADVISECOLUMNS):   _found_=1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if length(_uname)>2 then do;
MPRINT(EMADVISECOLUMNS):   if substr(reverse(trim(_uname)), 1, 3) = 'DI_' then do;
MPRINT(EMADVISECOLUMNS):   ROLE = 'ID';
MPRINT(EMADVISECOLUMNS):   LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if ROLE='FREQ' then _freqflag=1;
MPRINT(EMADVISECOLUMNS):   else if ROLE = 'CLASSIFICATION' then LEVEL = 'NOMINAL';
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   if role = ' ' then do;
MPRINT(EMADVISECOLUMNS):   if formattype in('DATE', 'DATETIME', 'TIME') then role = 'TIMEID';
MPRINT(EMADVISECOLUMNS):   else role = 'INPUT';
MPRINT(EMADVISECOLUMNS):   roleAssigned = 1;
MPRINT(EMADVISECOLUMNS):   end;
MPRINT(EMADVISECOLUMNS):   else role = upcase(role);
MPRINT(EMADVISECOLUMNS):   if REPORT = '' then REPORT = 'N';
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):    data WORK.M0O_9LV4;
MPRINT(EMADVISECOLUMNS):   set WORK.M0O_9LV4;
MPRINT(EMADVISECOLUMNS):   label NAME = "Variable Name" TYPE = "Type" ROLE = "Role" LEVEL= 
"Measurement Level" ORDER= "Order" CREATOR= "Creator" FORMATTYPE= "Format Type" FAMILY= 
"Family" DISTRIBUTION= "Distribution" PRICE= "Price" LOWERLIMIT= "Lower limit" UPPERLIMIT= 
"Upper Limit" REPORT= "Report" COMMENT= "Comment" INDEX= "Index" INDEXTYPE= "IndexType" LABEL= 
"Label" LENGTH= "Length";
MPRINT(EMADVISECOLUMNS):   drop levelAssigned roleAssigned;
MPRINT(EMADVISECOLUMNS):   run;
MPRINT(EMADVISECOLUMNS):   
MPRINT(EM_DIAGRAM):  ;
MPRINT(EM_DIAGRAM):   proc sort data=WORK.COLUMNMETA;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * &nodeid: Merge incoming metadata;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   proc contents data=EMWS8.PRINCOMP_TRAIN noprint out=_temp2(keep=NAME);
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=_temp2;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   proc sort data=EMWS8.PRINCOMP_CMeta_TRAIN out=_temp;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural17_CMeta_TRAIN;
MPRINT(EM_DIAGRAM):   merge WORK.COLUMNMETA(in=_a) _temp2(in=_b) _temp(drop=FORMAT INFORMAT 
LENGTH INDEX INDEXTYPE in=_c) end=_eof_;
MPRINT(EM_DIAGRAM):   by NAME;
MPRINT(EM_DIAGRAM):   if (^_a and _b) or (^_c and _a and _b) then delete;
MPRINT(EM_DIAGRAM):   if ^_b then CREATOR = "AutoNeural17";
MPRINT(EM_DIAGRAM):   select(upcase(name));
MPRINT(EM_DIAGRAM):   when("P_DEPVAR1") creator = "AutoNeural17";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR1") creator = "AutoNeural17";
MPRINT(EM_DIAGRAM):   when("P_DEPVAR0") creator = "AutoNeural17";
MPRINT(EM_DIAGRAM):   when("R_DEPVAR0") creator = "AutoNeural17";
MPRINT(EM_DIAGRAM):   when("F_DEPVAR") creator = "AutoNeural17";
MPRINT(EM_DIAGRAM):   when("I_DEPVAR") creator = "AutoNeural17";
MPRINT(EM_DIAGRAM):   when("U_DEPVAR") creator = "AutoNeural17";
MPRINT(EM_DIAGRAM):   when("_WARN_") creator = "AutoNeural17";
MPRINT(EM_DIAGRAM):   when("DEPVAR") model = "AutoNeural17";
MPRINT(EM_DIAGRAM):   when('');
MPRINT(EM_DIAGRAM):   otherwise;
MPRINT(EM_DIAGRAM):   end;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   * AutoNeural17: Apply Delta Code;
MPRINT(EM_DIAGRAM):   *------------------------------------------------------------*;
MPRINT(EM_DIAGRAM):   run;
MPRINT(EM_DIAGRAM):   filename _delta;
1657084    data WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):    data WORK.MODELTEMP_INFO;
1657085    set EMWS8.AutoNeural17_EMINFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural17_EMINFO;
1657086    where DATA='AutoNeural17' and KEY ^in('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
MPRINT(EM_DIAGRAM):   where DATA='AutoNeural17' and KEY ^in('DECDATA', 'DECMETA', 
'IMPORTANCE', 'MODEL');
1657087    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 0 observations read from the data set EMWS8.AUTONEURAL17_EMINFO.
      WHERE (DATA='AutoNeural17') and KEY not in ('DECDATA', 'DECMETA', 'IMPORTANCE', 'MODEL');
NOTE: The data set WORK.MODELTEMP_INFO has 0 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1657088    data EMWS8.AutoNeural17_EMINFO;
MPRINT(EM_DIAGRAM):    data EMWS8.AutoNeural17_EMINFO;
1657089    length TARGET KEY $32 DATA $43;
MPRINT(EM_DIAGRAM):   length TARGET KEY $32 DATA $43;
1657090    input TARGET KEY DATA $;
MPRINT(EM_DIAGRAM):   input TARGET KEY DATA $;
1657091    cards;
MPRINT(EM_DIAGRAM):   cards;

NOTE: The data set EMWS8.AUTONEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.01 seconds
      

MPRINT(EM_DIAGRAM):   run;
1657095    run;
1657096    data EMWS8.AutoNeural17_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural17_EMINFO;
1657097    set EMWS8.AutoNeural17_EMINFO WORK.MODELTEMP_INFO;
MPRINT(EM_DIAGRAM):   set EMWS8.AutoNeural17_EMINFO WORK.MODELTEMP_INFO;
1657098    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL17_EMINFO.
NOTE: There were 0 observations read from the data set WORK.MODELTEMP_INFO.
NOTE: The data set EMWS8.AUTONEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1657099    proc sort data = EMWS8.AutoNeural17_EMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.AutoNeural17_EMINFO NOTHREADS;
1657100    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1657101    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL17_EMINFO.
NOTE: The data set EMWS8.AUTONEURAL17_EMINFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1657102    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
MPRINT(EM_DIAGRAM):    proc sort data = EMWS8.FIMPORT_EMINFO OUT=WORK.SORTEDEMINFO NOTHREADS;
1657103    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1657104    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set EMWS8.FIMPORT_EMINFO.
NOTE: The data set WORK.SORTEDEMINFO has 1 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.01 seconds
      cpu time            0.01 seconds
      

1657105    proc sort data = EMWS8.AutoNeural17_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
MPRINT(EM_DIAGRAM):   proc sort data = EMWS8.AutoNeural17_EMINFO OUT=WORK.TEMP_INFO NOTHREADS;
1657106    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1657107    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Input data set is already sorted; it has been copied to the output data set.
NOTE: There were 3 observations read from the data set EMWS8.AUTONEURAL17_EMINFO.
NOTE: The data set WORK.TEMP_INFO has 3 observations and 3 variables.
NOTE: PROCEDURE SORT used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1657108    data EMWS8.AutoNeural17_EMINFO;
MPRINT(EM_DIAGRAM):   data EMWS8.AutoNeural17_EMINFO;
1657109    merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
MPRINT(EM_DIAGRAM):   merge WORK.SORTEDEMINFO WORK.TEMP_INFO;
1657110    by TARGET KEY;
MPRINT(EM_DIAGRAM):   by TARGET KEY;
1657111    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: There were 1 observations read from the data set WORK.SORTEDEMINFO.
NOTE: There were 3 observations read from the data set WORK.TEMP_INFO.
NOTE: The data set EMWS8.AUTONEURAL17_EMINFO has 4 observations and 3 variables.
NOTE: DATA statement used (Total process time):
      real time           0.00 seconds
      cpu time            0.00 seconds
      

1657112    proc datasets lib=work nolist;
MPRINT(EM_DIAGRAM):   proc datasets lib=work nolist;
1657113    delete TEMP_INFO SORTEDEMINFO;
MPRINT(EM_DIAGRAM):   delete TEMP_INFO SORTEDEMINFO;
1657114    run;
MPRINT(EM_DIAGRAM):   run;

NOTE: Deleting WORK.TEMP_INFO (memtype=DATA).
NOTE: Deleting WORK.SORTEDEMINFO (memtype=DATA).
1657115    quit;
MPRINT(EM_DIAGRAM):   quit;

NOTE: PROCEDURE DATASETS used (Total process time):
      real time           0.04 seconds
      cpu time            0.04 seconds
      

NOTE: View EMWS8.AUTONEURAL17_TRAIN.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
NOTE: View EMWS8.AUTONEURAL17_VALIDATE.VIEW used (Total process time):
      real time           0.03 seconds
      cpu time            0.03 seconds
      
MPRINT(EM_DIAGRAM):    proc printto;
MPRINT(EM_DIAGRAM):   run;
